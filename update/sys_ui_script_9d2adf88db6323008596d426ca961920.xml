<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_241495_myapplica.app</name>
        <script><![CDATA[webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(1);
	var platform_browser_dynamic_1 = __webpack_require__(19);
	var app_module_1 = __webpack_require__(23);
	core_1.enableProdMode();
	var platform = platform_browser_dynamic_1.platformBrowserDynamic();
	platform.bootstrapModule(app_module_1.AppModule);


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var forms_1 = __webpack_require__(24);
	var platform_browser_1 = __webpack_require__(21);
	var app_routing_1 = __webpack_require__(28);
	var ng_bootstrap_1 = __webpack_require__(95);
	var ng2_datetime_1 = __webpack_require__(98);
	var agent_state_component_1 = __webpack_require__(101);
	var call_control_component_1 = __webpack_require__(104);
	var login_component_1 = __webpack_require__(72);
	var master_component_1 = __webpack_require__(75);
	var index_component_1 = __webpack_require__(57);
	var call_result_component_1 = __webpack_require__(78);
	var call_info_component_1 = __webpack_require__(81);
	var call_wrap_component_1 = __webpack_require__(84);
	var call_incident_component_1 = __webpack_require__(89);
	var page_not_found_component_1 = __webpack_require__(87);
	var app_service_1 = __webpack_require__(58);
	var app_http_service_1 = __webpack_require__(107);
	var team_info_component_1 = __webpack_require__(92);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    AppModule = __decorate([
	        core_1.NgModule({
	            imports: [platform_browser_1.BrowserModule, app_routing_1.routing, forms_1.FormsModule, ng_bootstrap_1.NgbModule.forRoot(), ng2_datetime_1.NKDatetimeModule],
	            declarations: [
	                index_component_1.IndexComponent, page_not_found_component_1.PageNotFoundComponent, login_component_1.LoginComponent,
	                master_component_1.MasterComponent, agent_state_component_1.AgentStateComponent, call_control_component_1.CallControlComponent,
	                call_result_component_1.CallResultComponent,
	                call_info_component_1.CallInfoComponent, call_wrap_component_1.CallWrapComponent,
	                call_incident_component_1.CallIncidentComponent,
	                team_info_component_1.TeamInfoComponent
	            ],
	            providers: [
	                app_routing_1.appRoutingProviders,
	                app_service_1.AppService,
	                app_http_service_1.HttpAjaxService
	            ],
	            bootstrap: [index_component_1.IndexComponent]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppModule);
	    return AppModule;
	}());
	exports.AppModule = AppModule;


/***/ }),
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var router_1 = __webpack_require__(29);
	var index_component_1 = __webpack_require__(57);
	var login_component_1 = __webpack_require__(72);
	var master_component_1 = __webpack_require__(75);
	var call_result_component_1 = __webpack_require__(78);
	var call_info_component_1 = __webpack_require__(81);
	var call_wrap_component_1 = __webpack_require__(84);
	var page_not_found_component_1 = __webpack_require__(87);
	var call_incident_component_1 = __webpack_require__(89);
	var team_info_component_1 = __webpack_require__(92);
	var appRoutes = [
	    { path: '', component: index_component_1.IndexComponent },
	    { path: 'lynxlogin', component: login_component_1.LoginComponent },
	    {
	        path: 'master',
	        component: master_component_1.MasterComponent,
	        children: [
	            { path: '', redirectTo: 'cr', pathMatch: 'full' },
	            {
	                path: 'cr', component: call_result_component_1.CallResultComponent,
	                children: [
	                    { path: '', redirectTo: 'info', pathMatch: 'full' },
	                    { path: 'info', component: call_info_component_1.CallInfoComponent },
	                    { path: 'wrap', component: call_wrap_component_1.CallWrapComponent },
	                    { path: 'incident', component: call_incident_component_1.CallIncidentComponent } //Added by Prakash
	                ]
	            },
	            { path: 'team', component: team_info_component_1.TeamInfoComponent }
	        ]
	    },
	    { path: '**', component: page_not_found_component_1.PageNotFoundComponent }
	];
	exports.appRoutingProviders = [];
	exports.routing = router_1.RouterModule.forRoot(appRoutes, {
	    enableTracing: true
	});
	// ,{
	//   enableTracing: true
	// }


/***/ }),
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var router_1 = __webpack_require__(29);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var IndexComponent = (function () {
	    function IndexComponent(router, appService, activateRoute) {
	        var _this = this;
	        this.router = router;
	        this.appService = appService;
	        this.activateRoute = activateRoute;
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.evntLst = new Array();
	        this.canRedirect = true;
	        this.v = new validation_1.Validation();
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (type, data) {
	            _this.setState(data);
	        }));
	        this.setState(this.appService.AgentDetail);
	        console.log('IndexComponent Url -', window.location.search);
	    }
	    IndexComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('IndexComponent Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    IndexComponent.prototype.setState = function (agent) {
	        if (agent.State !== 'LOGOUT') {
	            this.canRedirect = false;
	            this.router.navigate(['/master']);
	            setTimeout(function () {
	                //console.log('routing to /master')      
	                //this.router.navigate(['/master']);
	            }, 1000);
	        }
	        else if (agent.State === 'LOGOUT') {
	            this.canRedirect = true;
	            this.router.navigate(['/lynxlogin']);
	        }
	    };
	    IndexComponent = __decorate([
	        core_1.Component({
	            selector: 'App',
	            template: __webpack_require__(71)
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object])
	    ], IndexComponent);
	    return IndexComponent;
	    var _a, _b, _c;
	}());
	exports.IndexComponent = IndexComponent;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(1);
	var Models = __webpack_require__(59);
	var app_config_1 = __webpack_require__(60);
	var validation_1 = __webpack_require__(61);
	var browserTab_1 = __webpack_require__(62);
	var storage_1 = __webpack_require__(63);
	var persistentList_1 = __webpack_require__(64);
	var logger_1 = __webpack_require__(65);
	var incontact_methods_1 = __webpack_require__(66);
	var sn_method_1 = __webpack_require__(69);
	var sn_method_inline_1 = __webpack_require__(70);
	core_1.Injectable();
	var AppService = (function () {
	    function AppService() {
	        var _this = this;
	        //expose the data from here 
	        this.logger = new logger_1.CustomLogger('AppService');
	        this.IsAgentLoggedIn = false;
	        this.store = storage_1.default.getInstance();
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.dt = new validation_1.DateTimeProcess();
	        this.tab = browserTab_1.default.getInstance();
	        this.v = new validation_1.Validation();
	        this.eventLst = new Array();
	        //Added by Prakash
	        this.incident = null;
	        this.currentCallerSid = null;
	        this.currentSelectedIncident = null;
	        this.jobList = new persistentList_1.default('AppService');
	        this.jobsProcessing = {};
	        this.AgentDetail = new Models.Agent();
	        this.Call = null;
	        this.CallDetails = new Array();
	        this.Teams = new Array();
	        this.Queues = new Array();
	        this.NotReadyReasonCode = new Array();
	        this.LogoutReasonCode = new Array();
	        this.WrapupReasonCode = new Array();
	        this.SystemInformation = new Models.SystemInfo();
	        this.CallResults = new Array();
	        this.TopicList = {
	            'LoginResponse': 'SERVICE_LOGINRESPONSE',
	            'AgentDetail': 'SERVICE_AGENTDETAIL',
	            'CallDetails': 'SERVICE_CALLDETAILs',
	            'NotReadyResonCode': 'SERVICE_NOTREADYREASONCODE',
	            'LogoutReasonCode': 'SERVICE_LOGOUTREASONCODE',
	            'CurrentCallDetail': 'SERVICE_CURRENTCALLDETAIL',
	            'CurrentCallResult': 'SERVICE_CURRENTCALLRESULT',
	            'TeamsDetail': 'SERVICE_TEAMSDETAIL',
	            'QueuesDetail': 'SERVICE_QUEUEDETAIL',
	            'WrapupReasonCode': 'SERVICE_WRAPUPREASONCODE',
	            'ClickToDial': 'SERVICE_CLICKTODIAL',
	            'SystemMessage': 'SERVICE_SYSTEMMESSAGE',
	            //Added by Prakash
	            'WrapupIncidentSelect': 'SERVICE_WRAPUPINCIDENTSELECT'
	        };
	        if (AppService._instance) {
	            console.log('AppService instance exist returning the existing instance');
	            return AppService._instance;
	        }
	        this.icm = new incontact_methods_1.IncontactMethod();
	        if (app_config_1.default.IsInlineDeployment) {
	            this.sn = new sn_method_inline_1.SnConnectorInline(this); //Added by Prakash
	        }
	        else {
	            this.sn = new sn_method_1.SnConnector(this); //Added by Prakash
	        }
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.LoginResponse, function (type, data) {
	            _this.processChangeEvent(type, data);
	        }));
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.AgentDetail, function (type, data, any) {
	            _this.processChangeEvent(type, data);
	        }));
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.SystemInformation, function (type, data, any) {
	            _this.processChangeEvent(type, data);
	        }));
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.CallDetail, function (type, data, any) {
	            _this.processChangeEvent(type, data);
	        }));
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.NotReadyReasonCode, function (type, data, any) {
	            _this.processChangeEvent(type, data);
	        }));
	        this.eventLst.push(this.evnt.RegisterEvent(Models.Topics.TeamInformation, function (type, data, any) {
	            _this.processChangeEvent(type, data);
	        }));
	        //issue command to fetch or clear data for finesse methods and sf methods.
	        //this.cf.
	        this.tab.OnPollingWindow(function () {
	            console.log(">>> APP SERVICE -  ON POLLING WINDOW");
	        });
	        //Check if agent has logged from new session 
	        var prevSessionId = this.store.GetData('SF_SESSIONID');
	        var currSessionId = this.getQueryVariable(window.location.search, 'nonce');
	        console.log('AppService - Agent Session id : ', prevSessionId, '  -  ', currSessionId);
	        if (prevSessionId === currSessionId) {
	            this.icm.OnInit(false);
	            this.sn.OnInit(false); //Added by Prakash
	        }
	        else {
	            this.jobList.Clear();
	            this.icm.OnInit(true);
	            this.sn.OnInit(true); //Added by Prakash
	        }
	        //Should get usersetting and load it in the login module. 
	        this.store.SetData('SF_SESSIONID', currSessionId);
	        setTimeout(function () {
	            _this.processJobs();
	        }, 100);
	    }
	    AppService.prototype.ngOnDestroy = function () {
	    };
	    AppService.prototype.GetElapsedTime = function (time) {
	        var val = this.dt.GetElapsedTime(this.SystemInformation.ServerTime, this.SystemInformation.LocalTime, time);
	        return this.dt.SecondsToTime(val);
	    };
	    AppService.prototype.ChangeAgentState = function (state, reasonCode) {
	        this.logger.Debug("State : " + state);
	        this.icm.changeAgentState(state, reasonCode);
	    };
	    AppService.prototype.DoCallAction = function (action, data) {
	        if (data != null) {
	            this.logger.Debug('Agent Do Call Action : ' + action);
	            console.log("Agent Do Call Action : ", data);
	        }
	        switch (action) {
	            case 'ANSWER':
	                this.icm.AnswerCall(data.callId);
	                break;
	            case 'DROP':
	                // this.icm.DropCall(data.callId);
	                this.icm.DropCall(data.call);
	                break;
	            case 'HOLD':
	                this.icm.HoldCall(data.callId);
	                break;
	            case 'RETRIEVE':
	                this.icm.RetrieveCall(data.callId);
	                break;
	            case 'CONSULT':
	                this.icm.ConsultCall(data.callId, data.callState, data.agentId, data.userName);
	                break;
	            case 'SST':
	                this.icm.DirectTransfer(data.callId, data.callState, data.agentId, data.userName);
	                break;
	            case 'TRANSFER':
	                this.icm.TransferCall(data.callId);
	                break;
	            case 'CONFERENCE':
	                this.icm.ConferenceCall(data.callId);
	                break;
	            case 'CONSULT_ACCEPT':
	                this.icm.AcceptConsultCall(data.callId);
	                break;
	            default:
	                console.log('AppService  action not processed ..', action);
	                break;
	        }
	    };
	    AppService.prototype.AgentLogin = function (user, callback) {
	        var _this = this;
	        this.logger.Debug('AgentLogin..');
	        var job = {
	            type: 'AgentLogin',
	            id: this.v.GenerateUniqueId('AgentLogin'),
	            user: user,
	            callback: function (jobId) {
	                console.log("Got into AgentLogin callback..");
	                //to remove the duplicate login request.
	                _this.RemoveJob({ id: jobId });
	            }
	        };
	        this.AddJob(job);
	    };
	    AppService.prototype.MakeCall = function (toAddress) {
	        if (this.AgentDetail.State === "Unavailable" && (!this.v.IsNotNullOrUndefinedOjbect(this.AgentDetail.Reason) || (this.v.IsNotNullOrUndefinedOjbect(this.AgentDetail.Reason) && this.AgentDetail.Reason.isAcw == false))) {
	            this.icm.MakeCall(toAddress);
	        }
	    };
	    AppService.prototype.SetActiveCall = function (call) {
	        this.Call = call;
	        this.evnt.Broadcast(this.TopicList.CurrentCallDetail, this.Call);
	    };
	    AppService.prototype.AgentLogout = function () {
	        this.icm.AgentLogout();
	    };
	    AppService.prototype.processJobs = function () {
	        var _this = this;
	        var that = this;
	        if (this.tab.IsPollingWindow() === true) {
	            this.jobList.ForEach(function (i, job) {
	                try {
	                    // If the job is already being processed, do not run it again
	                    if (_this.jobsProcessing.hasOwnProperty(job.id)) {
	                        return false;
	                    }
	                    _this.logger.Debug('Executing Job: ' + job.id + ' | ' + job.type);
	                    switch (job.type) {
	                        case 'AgentLogin':
	                            _this.jobsProcessing[job.id] = true;
	                            _this.icm.AgentLogin(job.user, job.id, job.callback);
	                            break;
	                        default:
	                    }
	                }
	                catch (ex) {
	                    console.log("Error processing job: ", ex.message);
	                    _this.RemoveJob(job);
	                    return true;
	                }
	            });
	        }
	        setTimeout(function () {
	            _this.processJobs();
	        }, 100);
	    };
	    AppService.prototype.processChangeEvent = function (type, data) {
	        console.log('AppService processChangeEvent - ', type);
	        switch (type) {
	            case Models.Topics.LoginResponse:
	                //read the data and send to the components registered
	                this.LoginResponse = data;
	                //fire the event from here for service class                 
	                this.RemoveJob({ id: this.LoginResponse.Id });
	                this.evnt.Broadcast(this.TopicList.LoginResponse, this.LoginResponse);
	                break;
	            case Models.Topics.AgentDetail:
	                //on agent detail received make a call for agent team information
	                this.onAgentDetailChanged(data);
	                break;
	            case Models.Topics.SystemInformation:
	                this.SystemInformation = data;
	                break;
	            case Models.Topics.CallDetail:
	                this.onCallDetailChanged(data);
	                break;
	            case Models.Topics.NotReadyReasonCode:
	                this.NotReadyReasonCode = data;
	                this.evnt.Broadcast(this.TopicList.NotReadyResonCode, this.NotReadyReasonCode);
	                break;
	            case Models.Topics.TeamInformation:
	                this.Teams = data;
	                this.evnt.Broadcast(this.TopicList.TeamsDetail, this.Teams);
	                break;
	            default:
	                console.log('APP Service processChangeEvent type not processed :' + type);
	                break;
	        }
	    };
	    AppService.prototype.onAgentDetailChanged = function (agent) {
	        try {
	            console.log('%c APS onAgentDetailChanged() ', 'background:#FF334F; color:#FFF', agent);
	            var prevState = this.AgentDetail.State;
	            this.AgentDetail = agent;
	            // used to validate omni channel events        
	            this.store.SetData("Agent_State", agent.State);
	            this.logger.Debug("onAgentDetailChanged Agent State : " + this.AgentDetail.State + ' - Previous State : ' + prevState);
	            //Added by Prakash - To clear current caller incident details
	            if (this.AgentDetail.State === "Available" || (this.AgentDetail.State === "Unavailable" && this.v.IsNotNullOrUndefinedOjbect(this.AgentDetail.Reason) && this.AgentDetail.Reason.isAcw == false)) {
	                this.incident = null;
	                this.currentCallerSid = null;
	                this.currentSelectedIncident = null;
	            }
	            this.evnt.Broadcast(this.TopicList.AgentDetail, agent);
	        }
	        catch (ex) {
	            this.logger.Error('OnAgentState Change Error : ' + ex);
	        }
	    };
	    AppService.prototype.onCallDetailChanged = function (calls) {
	        console.log('%c APS - onCallDetailChanged :', 'background:#FF334F; color:#FFF', calls);
	        var lstCallId = {};
	        console.log("calls.length :: " + calls.length + " | this.CallDetails.length :: " + this.CallDetails.length);
	        var newCallAdded = false;
	        if (this.CallDetails.length > 0 && calls.length > this.CallDetails.length)
	            newCallAdded = true;
	        // this.CallDetails = calls;
	        this.CallDetails = new Array();
	        for (var _i = 0, calls_1 = calls; _i < calls_1.length; _i++) {
	            var call = calls_1[_i];
	            this.CallDetails.push(call);
	        }
	        if (this.CallDetails.length > 0) {
	            if (this.Call === null || this.CallDetails.length === 1) {
	                this.Call = this.CallDetails[0];
	            }
	            else if (this.CallDetails.length > 1 && newCallAdded) {
	                this.Call = this.CallDetails[this.CallDetails.length - 1];
	            }
	            else {
	                for (var _a = 0, _b = this.CallDetails; _a < _b.length; _a++) {
	                    var call = _b[_a];
	                    if (call.Id == this.Call.Id) {
	                        this.Call = call;
	                        break;
	                    }
	                }
	            }
	            if (this.Call.IsOutbound == false && this.AgentDetail.State != "InboundConsult") {
	                //Added by Prakash
	                this.pushCallResult(this.Call);
	            }
	        }
	        else {
	            this.Call = null;
	            this.setActiveCallResult();
	        }
	        this.evnt.Broadcast(this.TopicList.CurrentCallDetail, this.Call);
	        this.evnt.Broadcast(this.TopicList.CallDetails, this.CallDetails); // Bin Code 
	    };
	    AppService.prototype.setActiveCallResult = function () {
	        if (this.CallResults.length > 0 && this.Call !== null) {
	            this.CurrentCallRes = this.CallResults[0];
	        }
	        else {
	            this.CurrentCallRes = null;
	        }
	        this.evnt.Broadcast(this.TopicList.CurrentCallResult, this.CurrentCallRes);
	    };
	    //Added by prakash
	    AppService.prototype.pushCallResult = function (call, flds) {
	        this.sn.processCallResult(call);
	        // var callResult:Models.CallResult = new Models.CallResult();
	        // callResult.Call = call;
	        // callResult.ResultFld = flds;
	        // this.CallResults.push(callResult);
	        // this.setActiveCallResult();
	    };
	    AppService.prototype.AddJob = function (job) {
	        console.log('Adding Job: ' + job.id + ' | ' + job.type);
	        this.jobList.Add(job);
	    };
	    AppService.prototype.AddPollingWindowJob = function (job) {
	        if (this.tab.IsPollingWindow()) {
	            this.AddJob(job);
	        }
	    };
	    AppService.prototype.RemoveJob = function (job) {
	        console.log('Remove Job: ' + job.id);
	        this.jobList.Remove(job);
	        delete this.jobsProcessing[job.id];
	    };
	    AppService.prototype.getQueryVariable = function (query, variable) {
	        query = query.substring(1);
	        var vars = query.split("&");
	        for (var i = 0; i < vars.length; i++) {
	            var pair = vars[i].split("=");
	            if (pair[0] == variable) {
	                return pair[1];
	            }
	        }
	        return '';
	    };
	    AppService._instance = new AppService();
	    return AppService;
	}());
	exports.AppService = AppService;


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	"use strict";
	/**
	 * @license
	 * Copyright Servion. All Rights Reserved.
	 */
	/**
	 * @module
	 * @description
	 * Contains class models used in Salesforce - Finesse Integration app.
	 */
	var UserCredentials = (function () {
	    function UserCredentials() {
	        this.username = "";
	        this.password = "";
	        this.stationPhoneNumber = "";
	        this.businessUnitId = "";
	    }
	    return UserCredentials;
	}());
	exports.UserCredentials = UserCredentials;
	var CallInfo = (function () {
	    function CallInfo() {
	        // this.Participants = [];
	        this.CallVariables = {};
	        this.IsOutbound = false;
	    }
	    return CallInfo;
	}());
	exports.CallInfo = CallInfo;
	var Participant = (function () {
	    function Participant() {
	    }
	    return Participant;
	}());
	exports.Participant = Participant;
	var CallActions = (function () {
	    function CallActions() {
	        this.CanAnswer = false;
	        this.CanHold = false;
	        this.CanRetrieve = false;
	        this.CanDrop = false;
	        this.CanUpdateCallData = false;
	        this.CanSendDTMF = false;
	        this.CanConsult = false;
	        this.CanConference = false;
	        this.CanTransfer = false;
	        this.CanTransferSST = false;
	        this.CanSilentMonitor = false;
	        this.CanBargeCall = false;
	        this.CanParticipantDrop = false;
	        this.CanStartRecording = false;
	        this.CanUpdateScheduledCallback = false;
	        this.CanCancelScheduledCallback = false;
	        this.CanAccept = false;
	        this.CanReject = false;
	        this.CanClose = false;
	        ;
	    }
	    return CallActions;
	}());
	exports.CallActions = CallActions;
	var savestr = (function () {
	    function savestr() {
	    }
	    return savestr;
	}());
	exports.savestr = savestr;
	var Agent = (function () {
	    function Agent() {
	        this.Roles = new Role();
	        this.Team = new Team();
	        this.State = 'LOGOUT';
	        this.StateChangeTime = 0;
	    }
	    return Agent;
	}());
	exports.Agent = Agent;
	var Role = (function () {
	    function Role() {
	        this.Agent = false;
	        this.Supervisor = false;
	    }
	    return Role;
	}());
	var Team = (function () {
	    function Team(id, name) {
	        this.Id = id;
	        this.Name = name;
	    }
	    return Team;
	}());
	exports.Team = Team;
	var TeamAgent = (function () {
	    function TeamAgent(teamId, teamName) {
	        this.State = 'LOGOUT';
	        this.TeamId = teamId;
	        this.TeamName = teamName;
	    }
	    return TeamAgent;
	}());
	exports.TeamAgent = TeamAgent;
	var Queue = (function () {
	    function Queue() {
	    }
	    return Queue;
	}());
	exports.Queue = Queue;
	var ReasonCode = (function () {
	    function ReasonCode(id, label) {
	        this.Id = id;
	        this.Label = label;
	        this.isAcw = false;
	        this.acwTimeout = 0;
	    }
	    return ReasonCode;
	}());
	exports.ReasonCode = ReasonCode;
	var SystemInfo = (function () {
	    function SystemInfo() {
	    }
	    return SystemInfo;
	}());
	exports.SystemInfo = SystemInfo;
	var ApiError = (function () {
	    function ApiError() {
	    }
	    return ApiError;
	}());
	exports.ApiError = ApiError;
	var SystemMessage = (function () {
	    function SystemMessage() {
	        this.Id = '';
	        this.Msg = '';
	        this.Type = MessageType.General;
	        this.Level = Severity.Error;
	        this.IsOk = false;
	    }
	    return SystemMessage;
	}());
	exports.SystemMessage = SystemMessage;
	var MessageType;
	(function (MessageType) {
	    MessageType[MessageType["General"] = 0] = "General";
	    MessageType[MessageType["Success"] = 1] = "Success";
	    MessageType[MessageType["LoginResponse"] = 2] = "LoginResponse";
	    MessageType[MessageType["Logout"] = 3] = "Logout";
	    MessageType[MessageType["Call"] = 4] = "Call";
	    MessageType[MessageType["AgentState"] = 5] = "AgentState";
	})(MessageType || (MessageType = {}));
	exports.MessageType = MessageType;
	var Severity;
	(function (Severity) {
	    Severity[Severity["Error"] = 0] = "Error";
	    Severity[Severity["Warn"] = 1] = "Warn";
	    Severity[Severity["Info"] = 2] = "Info";
	})(Severity || (Severity = {}));
	exports.Severity = Severity;
	var Message = (function () {
	    function Message() {
	    }
	    Message.EnterCredentials = 'Please enter valid Agent ID/Password/Station Number.';
	    Message.InvalidUserCredential = 'Invalid Agent ID or Password. Please try again.';
	    Message.InvalidExtension = 'The device associated with that extension or dial number is invalid.';
	    Message.DeviceBusy = 'The extension specified is already in use.';
	    Message.InvalidDevice = 'The specified user is already signed in with extension {0}. To sign in using extension {1}, sign out from extension {0} and try again.';
	    Message.WrapSucess = 'Call Wrapup saved successfully.';
	    Message.WrapFailure = 'Call Wrapup save failed.';
	    Message.FinesseReconnect = 'Finesse connection failure, trying to reconnect on {0}';
	    Message.LoginServerNotReachable = 'Finesse server is not reachable. Please contact your administrator.';
	    Message.DefaultConfigNotAvailable = 'Screen pop setting default configuration is not configured for {0}. Please contact administrator.';
	    Message.ChangeNumberSuccess = 'Number Changed Successfully.';
	    Message.ChangeNumberFail = "Unable to change number.";
	    Message.BusinessFieldChanged = "Business fields changed successfully.";
	    Message.LCMDateTimeValidation = "Please select valid date and time.";
	    Message.LCMNonPEWCEmptyResult = "Sorry,No contacts available.";
	    Message.RestrictCreateActivity = "Can't create activity during call";
	    Message.wrapaccountleadfailure = "You can't relate an account, opportunity, or other object to a task already related to a lead.";
	    Message.alertuserinnotredystate = "Agent should be in Not Ready state to perform Operator Dialing";
	    Message.NoOutCome = "No outcome to process";
	    return Message;
	}());
	exports.Message = Message;
	var Topics = (function () {
	    function Topics() {
	    }
	    Topics.LoginResponse = 'LOGIN_RESPONSE';
	    Topics.AgentDetail = 'Agent_Detail';
	    Topics.CallDetail = 'CALL_DETAIL';
	    Topics.QueueInformation = 'QUEUE_INFORMATION';
	    Topics.TeamInformation = 'TEAM_INFORMATION';
	    Topics.LogoutReasonCode = 'LOGOUT_REASONCODE';
	    Topics.NotReadyReasonCode = 'NOTREADY_REASONCODE';
	    Topics.Wrapup = 'WRAPUP_CODE';
	    Topics.SystemInformation = 'SYSTEM_INFORMATION';
	    Topics.ErrorMsg = 'ERROR_MESSAGE';
	    Topics.ConnectionStatus = 'CONNECTION_STATUS';
	    Topics.UserCredentials = 'USER_CREDENTIALS';
	    Topics.CallResult = 'CALL_RESULTS';
	    Topics.ActivityResult = 'ACTIVITY_RESULT';
	    Topics.ClickToDial = 'CLICK_TO_DIAL';
	    Topics.SystemMessage = 'SYSTEM_MESSAGE';
	    Topics.AutoConference = "AUTO_CONFERENCE";
	    Topics.Enableactivity = "Enableactivity";
	    return Topics;
	}());
	exports.Topics = Topics;
	var LCMTopics = (function () {
	    function LCMTopics() {
	    }
	    LCMTopics.LCMKeyInformation = 'LCM_KEYINFORMATION';
	    LCMTopics.LCMModes = 'LCM_MODES';
	    LCMTopics.LCMCallbackModes = 'LCM_CALLBACKMODES';
	    LCMTopics.LCMBusinessFields = 'LCM_BUSINESSFIELDS';
	    LCMTopics.LCMBOGroupParents = 'LCM_BOGROUPPARENT';
	    LCMTopics.LCMBusinessOutComes = 'LCM_BUSINESSOUTCOME';
	    LCMTopics.LCMCallOutComes = 'LCM_CALLOUTCOMES';
	    LCMTopics.LCMCallCount = 'LCM_CALLCOUNT';
	    LCMTopics.LCMContact = 'LCM_CONTACT';
	    return LCMTopics;
	}());
	exports.LCMTopics = LCMTopics;
	var CallTypes = (function () {
	    function CallTypes() {
	    }
	    CallTypes.AcdIn = 'ACD_IN';
	    CallTypes.PrerouteAcdIn = 'PREROUTE_ACD_IN';
	    CallTypes.PrerouteDirectAgent = 'PREROUTE_DIRECT_AGENT';
	    CallTypes.TransferIn = 'TRANSFER_IN';
	    CallTypes.OverflowIn = 'OVERFLOW_IN';
	    CallTypes.OtherIn = 'OTHER_IN';
	    CallTypes.AutoOut = 'AUTO_OUT';
	    CallTypes.AgentOut = 'AGENT_OUT';
	    CallTypes.Out = 'OUT';
	    CallTypes.AgentInside = 'AGENT_INSIDE';
	    CallTypes.Offered = 'OFFERED';
	    CallTypes.Consult = 'CONSULT';
	    CallTypes.ConsultOffered = 'CONSULT_OFFERED';
	    CallTypes.ConsultConference = 'CONSULT_CONFERENCED';
	    CallTypes.Conference = 'CONFERENCE';
	    CallTypes.Unmonitored = 'UNMONITORED';
	    CallTypes.Preview = 'PREVIEW';
	    CallTypes.Reservation = 'RESERVATION';
	    CallTypes.Assist = 'ASSIST';
	    CallTypes.Emerency = 'EMERGENCY';
	    CallTypes.SupervisorMonitor = 'SUPERVISOR_MONITOR';
	    CallTypes.SupervisorWhisper = 'SUPERVISOR_WHISPER';
	    CallTypes.SupervisorBargein = 'SUPERVISOR_BARGEIN';
	    CallTypes.SuperviosrIntercept = 'SUPERVISOR_INTERCEPT';
	    CallTypes.TaskRoutedByICM = 'TASK_ROUTED_BY_ICM';
	    CallTypes.TaskRoutedByApplication = 'TASK_ROUTED_BY_APPLICATION';
	    CallTypes.NonACD = 'NON_ACD';
	    CallTypes.ReservationPreview = 'RESERVATION_PREVIEW';
	    CallTypes.ReservationPreviewDirect = 'RESERVATION_PREVIEW_DIRECT';
	    CallTypes.ReservationPredictive = 'RESERVATION_PREDICTIVE';
	    CallTypes.ReservationCallback = 'RESERVATION_CALLBACK';
	    CallTypes.ReservationPersonalCallback = 'CUSTOMER_PERSONAL_CALLBACK';
	    CallTypes.CustomerPreview = 'CUSTOMER_PREVIEW';
	    CallTypes.CustomerPreviewDirect = 'CUSTOMER_PREVIEW_DIRECT';
	    CallTypes.CustomerPredictive = 'CUSTOMER_PREDICTIVE';
	    CallTypes.CustomerCallback = 'CUSTOMER_CALLBACK';
	    CallTypes.CustomerPersonal = 'CUSTOMER_PERSONAL';
	    CallTypes.CustomerIVR = 'CALLTYPE_IVR';
	    CallTypes.CalltypeNonACD = 'CALLTYPE_NON_ACD';
	    CallTypes.CalltypePlayAgentGreeting = 'CALLTYPE_PLAY_AGENT_GREETING';
	    CallTypes.CalltypeRecordAgentGreeting = 'CALLTYPE_RECORD_AGENT_GREETING';
	    CallTypes.CalltypeVoiceCallBack = 'CALLTYPE_VOICE_CALL_BACK';
	    //Adding variable not from CTI server guide
	    CallTypes.OutboundPreview = 'OUTBOUND_PREVIEW';
	    CallTypes.OutboundDirectPreview = 'OUTBOUND_DIRECT_PREVIEW';
	    CallTypes.CustomerPersonalCallback = 'OO_CUSTOMER_PERSONALCALLBACK';
	    CallTypes.Transfer = 'TRANSFER';
	    CallTypes.Outbound = 'OUTBOUND';
	    return CallTypes;
	}());
	exports.CallTypes = CallTypes;
	var CallResult = (function () {
	    function CallResult() {
	        this.Result = new Array();
	        this.WhoLst = new Array();
	        this.WhatLst = new Array();
	        this.ResultFld = new Array();
	        this.ActivityField = new Array();
	        this.ActivityComplexField = new Array();
	        this.CanScreenpop = false;
	        this.IsScreenpopDone = false;
	        this.IsCommentEdited = false;
	        this.ScreenpopURL = '';
	    }
	    return CallResult;
	}());
	exports.CallResult = CallResult;
	var SFObject = (function () {
	    function SFObject() {
	    }
	    return SFObject;
	}());
	exports.SFObject = SFObject;
	var DispositionConfig = (function () {
	    function DispositionConfig() {
	    }
	    return DispositionConfig;
	}());
	exports.DispositionConfig = DispositionConfig;
	var ActivityResult = (function () {
	    function ActivityResult() {
	        this.Flds = new Array();
	    }
	    return ActivityResult;
	}());
	exports.ActivityResult = ActivityResult;
	var ValueMap = (function () {
	    function ValueMap() {
	    }
	    return ValueMap;
	}());
	exports.ValueMap = ValueMap;
	var LCMKeyInformation = (function () {
	    function LCMKeyInformation() {
	    }
	    return LCMKeyInformation;
	}());
	exports.LCMKeyInformation = LCMKeyInformation;
	var BusinessOutCome = (function () {
	    function BusinessOutCome() {
	    }
	    return BusinessOutCome;
	}());
	exports.BusinessOutCome = BusinessOutCome;
	var BusinessOutComes = (function () {
	    function BusinessOutComes() {
	        this.BusinessOutCome = new Array();
	    }
	    return BusinessOutComes;
	}());
	exports.BusinessOutComes = BusinessOutComes;
	var BOGroupParent = (function () {
	    function BOGroupParent() {
	    }
	    return BOGroupParent;
	}());
	exports.BOGroupParent = BOGroupParent;
	var BOGroupParents = (function () {
	    function BOGroupParents() {
	        this.BOGroupParent = new Array();
	    }
	    return BOGroupParents;
	}());
	exports.BOGroupParents = BOGroupParents;
	var Modes = (function () {
	    function Modes() {
	        this.Mode = new Array();
	    }
	    return Modes;
	}());
	exports.Modes = Modes;
	var Mode = (function () {
	    function Mode() {
	    }
	    return Mode;
	}());
	exports.Mode = Mode;
	var CallOutComes = (function () {
	    function CallOutComes() {
	        this.CallOutCome = new Array();
	    }
	    return CallOutComes;
	}());
	exports.CallOutComes = CallOutComes;
	var CallCount = (function () {
	    function CallCount() {
	        this.count = 0;
	        this.PCBcount = 0;
	        this.type = 'CallCount';
	    }
	    return CallCount;
	}());
	exports.CallCount = CallCount;
	var CallOutCome = (function () {
	    function CallOutCome() {
	    }
	    return CallOutCome;
	}());
	exports.CallOutCome = CallOutCome;
	var LcmContact = (function () {
	    function LcmContact() {
	    }
	    return LcmContact;
	}());
	exports.LcmContact = LcmContact;
	var BusinessField = (function () {
	    function BusinessField() {
	    }
	    return BusinessField;
	}());
	exports.BusinessField = BusinessField;
	var BusinessFields = (function () {
	    function BusinessFields() {
	        this.BusinessField = new Array();
	    }
	    return BusinessFields;
	}());
	exports.BusinessFields = BusinessFields;
	var ApiSuccess = (function () {
	    function ApiSuccess() {
	    }
	    return ApiSuccess;
	}());
	exports.ApiSuccess = ApiSuccess;
	var SearchConfiguration = (function () {
	    function SearchConfiguration() {
	        this.Comment = new CommentText();
	        this.DisplayVar = new Array();
	        this.ActivityField = new Array();
	        this.ActivityComplexField = new Array();
	    }
	    return SearchConfiguration;
	}());
	exports.SearchConfiguration = SearchConfiguration;
	var ComplexField = (function () {
	    function ComplexField() {
	        this.Fields = new Array();
	    }
	    return ComplexField;
	}());
	exports.ComplexField = ComplexField;
	var CommentText = (function () {
	    function CommentText() {
	        this.Fields = new Array();
	        this.IsModified = false;
	    }
	    return CommentText;
	}());
	exports.CommentText = CommentText;
	var DisplayField = (function () {
	    function DisplayField() {
	    }
	    return DisplayField;
	}());
	exports.DisplayField = DisplayField;
	var Enableactivity = (function () {
	    function Enableactivity() {
	        this.Enableactivity = false;
	    }
	    return Enableactivity;
	}());
	exports.Enableactivity = Enableactivity;
	/**Added by Prakash */
	var SNIncident = (function () {
	    function SNIncident() {
	        this.ResultFld = new Array();
	    }
	    return SNIncident;
	}());
	exports.SNIncident = SNIncident;
	/**Added by Prakash */
	var SNIncidentField = (function () {
	    function SNIncidentField() {
	    }
	    return SNIncidentField;
	}());
	exports.SNIncidentField = SNIncidentField;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

	"use strict";
	var AppConfig = (function () {
	    function AppConfig() {
	    }
	    AppConfig.InboundDefaultTab = window['DialerConfig'].InboundDefaultTab;
	    AppConfig.IsInlineDeployment = window['DialerConfig'].IsInlineDeployment;
	    AppConfig.LoggerSetting = window['DialerConfig'].LoggerSetting;
	    AppConfig.tokenUri = window['DialerConfig'].tokenUri;
	    AppConfig.applicationName = window['DialerConfig'].applicationName;
	    AppConfig.vendorName = window['DialerConfig'].vendorName;
	    AppConfig.apiVersion = window['DialerConfig'].apiVersion;
	    AppConfig.requestingAPIs = window['DialerConfig'].requestingAPIs;
	    AppConfig.nextCallActions = window['DialerConfig'].nextCallActions;
	    AppConfig.nextConsultActions = window['DialerConfig'].nextConsultActions;
	    AppConfig.callStates = window['DialerConfig'].callStates;
	    AppConfig.searchConfig = window['DialerConfig'].searchConfig;
	    AppConfig.callvariableField = window['DialerConfig'].callvariableField;
	    //Added by Prakash
	    AppConfig.ServiceNowDomainUrl = window['SNConfig'].ServiceNowDomainUrl;
	    AppConfig.openUserPageForNewUser = window['SNConfig'].openUserPageForNewUser;
	    AppConfig.hideAgentDesktopAfterCall = window['SNConfig'].hideAgentDesktopAfterCall;
	    AppConfig.hideAgentDesktopAfterIncidentSelect = window['SNConfig'].hideAgentDesktopAfterIncidentSelect;
	    return AppConfig;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AppConfig;


/***/ }),
/* 61 */
/***/ (function(module, exports) {

	"use strict";
	var Validation = (function () {
	    function Validation() {
	    }
	    Validation.prototype.getQueryVariable = function (query, variable) {
	        query = query.substring(1);
	        var vars = query.split("&");
	        for (var i = 0; i < vars.length; i++) {
	            var pair = vars[i].split("=");
	            if (pair[0] == variable) {
	                return pair[1];
	            }
	        }
	        return '';
	    };
	    Validation.prototype.IsNullOrEmptyOrEmptySpace = function (data) {
	        if (data === undefined || data === null || data.trim() === "") {
	            return true;
	        }
	        return false;
	    };
	    Validation.prototype.IsNullOrEmpty = function (data) {
	        if (data === undefined || data === null || data === "") {
	            return true;
	        }
	        return false;
	    };
	    Validation.prototype.IsNotNullOrUndefinedString = function (data) {
	        if (data === undefined || data === null || data === '' || data === 'undefined' || data === 'null') {
	            return false;
	        }
	        return true;
	    };
	    Validation.prototype.IsNotNullOrUndefinedOjbect = function (data) {
	        if (data === undefined || data === null || data === '' || data === 'undefined' || data === 'null') {
	            return false;
	        }
	        return true;
	    };
	    Validation.prototype.IsNotNullOrEmpty = function (data) {
	        if (data === undefined || data === null || data === "") {
	            return false;
	        }
	        return true;
	    };
	    Validation.prototype.IsNotNull = function (data) {
	        if (data === undefined || data === null || data === "") {
	            return false;
	        }
	        return true;
	    };
	    Validation.prototype.IsNotNullOrEmptyArray = function (data) {
	        if (typeof data !== 'object' || !this.IsNumber(data.length) || data.length === 0) {
	            return false;
	        }
	        return true;
	    };
	    Validation.prototype.IsNumber = function (n) {
	        return !isNaN(parseFloat(n)) && isFinite(n);
	    };
	    Validation.prototype.IsValidObject = function (o) {
	        return o !== null && typeof o === 'object';
	    };
	    Validation.prototype.IsValidFunction = function (f) {
	        /// <summary>
	        /// Checks if the parameter is valid function
	        /// </summary>
	        /// <param name="f">Object to check</param>
	        /// <returns type="bool">true if parameter is function</returns>
	        return f !== null && typeof f === 'function';
	    };
	    Validation.prototype.IsValidEmail = function (data) {
	        /// <summary>
	        ///Check the string to valid email id format. 
	        /// </summary>
	        /// <param name="data">String value</param>
	        /// <returns type="Boolean">isValidEmail</returns>
	        var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
	        return filter.test(data);
	    };
	    Validation.prototype.IsValidPhoneNumber = function (data) {
	        /// <summary>
	        /// Check the given value is an valid  phone number format
	        /// </summary>
	        /// <param name="data"></param>
	        /// <returns type=""></returns>
	        var filter = /^(\+?)([0-9#\*])+$/;
	        if (filter.test(data) && data.length <= 16) {
	            return true;
	        }
	        return false;
	    };
	    Validation.prototype.IsValidURL = function (url) {
	        var validURL = /((?:https?\:\/\/|www\.)(?:[-a-z0-9]+\.)*[-a-z0-9]+.*)/i;
	        return validURL.test(url);
	    };
	    Validation.prototype.isEmpty = function (obj) {
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key))
	                return false;
	        }
	        return true;
	    };
	    Validation.prototype.GenerateUniqueId = function (prefix) {
	        function rand() {
	            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	        }
	        return prefix + '_' + rand() + rand() + '-' + rand() + '-' + rand();
	    };
	    return Validation;
	}());
	exports.Validation = Validation;
	var Request = (function () {
	    function Request(credentials, token_type) {
	        this.v = new Validation();
	        this.credentials = credentials;
	        this.token_type = token_type;
	    }
	    Object.defineProperty(Request.prototype, "Credentials", {
	        set: function (credentials) {
	            this.credentials = credentials;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Request.prototype, "TokenType", {
	        set: function (token_type) {
	            this.token_type = token_type;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Request.prototype.createSuccessHandler = function (handler) {
	        return function (data, textStatus, jqXhr) {
	            if (handler) {
	                handler(data, jqXhr.status, textStatus);
	            }
	        };
	    };
	    Request.prototype.createErrorHandler = function (handler) {
	        return function (jqXhr, textStatus, errorThrown) {
	            if (handler) {
	                handler(jqXhr.status, jqXhr.statusText, jqXhr.responseText);
	            }
	        };
	    };
	    Request.prototype.createSetHeaders = function (headers) {
	        return function (xhr) {
	            var header;
	            if (headers) {
	                for (header in headers) {
	                    if (headers.hasOwnProperty(header)) {
	                        xhr.setRequestHeader(header, headers[header]);
	                    }
	                }
	            }
	        };
	    };
	    //send request for 
	    // public SendRequest(url: string, method: string, object: string, successHandler: any, errorHandler: any) {
	    //     //frame the request object here
	    //     //make use of jquery frame to make ajax call from here.
	    //     let contentType: string = 'application/json';
	    //     let headers = {};
	    //     // let accept: string = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';
	    //     let xhrArgs: any;
	    //     if (this.v.IsNotNullOrEmpty(this.credentials)) {
	    //         // headers = headers || {};
	    //         headers['Authorization'] = this.token_type + ' ' + this.credentials;
	    //         headers['content-Type'] = contentType;
	    //     }
	    //     xhrArgs = {
	    //         url: url,
	    //         type: method,
	    //         // processData: false,
	    //         // beforeSend: this.createSetHeaders(headers),
	    //         headers: headers,
	    //         success: this.createSuccessHandler(successHandler),
	    //         error: this.createErrorHandler(errorHandler),
	    //         cache: null
	    //     };
	    //     if (method !== 'GET') {
	    //         // xhrArgs['contentType'] = contentType;
	    //         xhrArgs['data'] = object;
	    //     }
	    //     window.$.ajax(xhrArgs);
	    // }
	    Request.prototype.SendRequest = function (url, method, headers, xml, successHandler, errorHandler) {
	        if (headers === void 0) { headers = null; }
	        //frame the request object here
	        //make use of jquery frame to make ajax call from here.
	        var contentType = 'application/json';
	        // let accept: string = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';
	        var xhrArgs;
	        if (this.v.IsNotNullOrEmpty(this.credentials)) {
	            headers = headers || {};
	            headers.Authorization = this.token_type + ' ' + this.credentials;
	        }
	        xhrArgs = {
	            url: url,
	            type: method,
	            // accept: accept,
	            // processData: false,
	            beforeSend: this.createSetHeaders(headers),
	            success: this.createSuccessHandler(successHandler),
	            error: this.createErrorHandler(errorHandler),
	            cache: null
	        };
	        if (method !== 'GET') {
	            xhrArgs['contentType'] = contentType;
	            xhrArgs['data'] = xml;
	        }
	        window.$.ajax(xhrArgs);
	    };
	    return Request;
	}());
	exports.Request = Request;
	var MessageEvent = (function () {
	    function MessageEvent() {
	        this.v = new Validation();
	        this.eventKeys = new Map();
	        this.eventIdMap = new Map();
	        console.log('MessageEvent invoked..');
	        if (MessageEvent._instance) {
	            console.log("MessageEvent Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");
	        }
	        MessageEvent._instance = this;
	    }
	    MessageEvent.getInstance = function () {
	        return MessageEvent._instance;
	    };
	    MessageEvent.prototype.Broadcast = function (eventType, data) {
	        if (this.eventKeys.hasOwnProperty(eventType) && this.eventKeys[eventType].length > 0) {
	            for (var i = 0; i < this.eventKeys[eventType].length; i++) {
	                var ev = this.eventKeys[eventType][i];
	                if (eventType != "LCM_CALLCOUNT") {
	                }
	                ev.callback(eventType, data);
	            }
	        }
	    };
	    MessageEvent.prototype.RegisterEvent = function (eventType, callback) {
	        if (this.v.IsValidFunction(callback)) {
	            var eventId = this.v.GenerateUniqueId('Event');
	            if (!this.eventKeys.hasOwnProperty(eventType)) {
	                this.eventKeys[eventType] = [];
	            }
	            if (eventType != "LCM_CALLCOUNT") {
	            }
	            this.eventKeys[eventType].push({
	                id: eventId,
	                callback: callback
	            });
	            this.eventIdMap[eventId] = eventType;
	            return eventId;
	        }
	        return '';
	    };
	    //create a unique
	    MessageEvent.prototype.UnRegisterEvent = function (eventId) {
	        var index = -1;
	        var eventType = this.eventIdMap[eventId];
	        if (this.v.IsNotNullOrEmpty(eventType) && this.eventKeys.hasOwnProperty(eventType) && this.eventKeys[eventType].length > 0 && eventId !== '') {
	            delete this.eventIdMap[eventId];
	            for (var i = 0; i < this.eventKeys[eventType].length; i++) {
	                var ev = this.eventKeys[eventType][i];
	                //console.log('%c UN-REGISTER ', 'color:Red', eventType);
	                if (eventId === ev.id) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index !== -1) {
	                this.eventKeys[eventType].splice(index, 1);
	            }
	        }
	        return index;
	    };
	    MessageEvent._instance = new MessageEvent();
	    return MessageEvent;
	}());
	exports.MessageEvent = MessageEvent;
	var DateTimeProcess = (function () {
	    function DateTimeProcess() {
	    }
	    DateTimeProcess.prototype.twoDigitText = function (number) {
	        return (number < 10 ? '0' : '') + number;
	    };
	    DateTimeProcess.prototype.ParseInt = function (value) {
	        if (isNaN(value) === false) {
	            return parseInt(value);
	        }
	        return 0;
	    };
	    DateTimeProcess.prototype.GetElapsedTime = function (serverTime, localTime, stateTime) {
	        var now = new Date().getTime(), currentServerTime = serverTime + (now - localTime);
	        currentServerTime = parseInt((currentServerTime * 0.001).toFixed(0));
	        stateTime = parseInt((stateTime * 0.001).toFixed(0));
	        if (currentServerTime < stateTime) {
	            return stateTime - currentServerTime;
	        }
	        return currentServerTime - stateTime;
	    };
	    DateTimeProcess.prototype.ToShortDateTimeString = function (date) {
	        date = date || new Date();
	        var pattern = 'MM/dd/yyyy HH:min ampm';
	        var hrs = date.getHours(), ampm = hrs >= 12 ? 'pm' : 'am';
	        hrs = hrs % 12;
	        hrs = hrs ? hrs : 12; // the hour '0' should be '12'
	        return pattern.replace('yyyy', date.getFullYear())
	            .replace('dd', this.twoDigitText(date.getDate()))
	            .replace('MM', this.twoDigitText(date.getMonth() + 1))
	            .replace('HH', this.twoDigitText(hrs))
	            .replace('min', this.twoDigitText(date.getMinutes() + 1))
	            .replace('ampm', ampm);
	    };
	    DateTimeProcess.prototype.SecondsToTime = function (seconds) {
	        var time = ':00', hours, mins, secs;
	        if (seconds !== null && seconds !== undefined && typeof seconds === 'number') {
	            if (seconds <= 0) {
	                return time;
	            }
	            hours = Math.floor(seconds / 3600), mins = Math.floor(seconds / 60) % 60, secs = seconds % 60;
	            if (hours > 0) {
	                time = hours + ":" + (mins > 9 ? mins : "0" + mins) + ":" + (secs > 9 ? secs : "0" + secs);
	            }
	            else if (mins <= 0) {
	                time = (secs > 9 ? '00:' + secs : "00:0" + secs);
	            }
	            else {
	                time = (mins > 9 ? mins : '0' + mins) + ":" + (secs > 9 ? secs : "0" + secs);
	            }
	            return time;
	        }
	        else if (seconds === 0) {
	            return time;
	        }
	        return time;
	    };
	    return DateTimeProcess;
	}());
	exports.DateTimeProcess = DateTimeProcess;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var storage_1 = __webpack_require__(63);
	var validation_1 = __webpack_require__(61);
	var BrowserTab = (function () {
	    function BrowserTab() {
	        var _this = this;
	        this.store = storage_1.default.getInstance();
	        this.v = new validation_1.Validation();
	        this.amIPolling = false;
	        this.documentUnloaded = false;
	        this.browserTabIndex = 0;
	        this.browserTabId = '';
	        this.callbacks = new Array();
	        console.log('BrowserTab handler invoked..');
	        if (BrowserTab._instance) {
	            console.log("BrowserTab Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");
	        }
	        BrowserTab._instance = this;
	        if (window.addEventListener) {
	            window.addEventListener("onunload", function () {
	                _this.onUnload();
	            }, false);
	        }
	        else if (window.attachEvent) {
	            window.attachEvent("onunload", function () {
	                _this.onUnload();
	            });
	        }
	        else {
	            window["onunload"] = function () {
	                _this.onUnload();
	            };
	        }
	        this.initializeTab();
	        setInterval(function () {
	            _this.checkPollingWindow();
	        }, 1000);
	    }
	    BrowserTab.getInstance = function () {
	        return BrowserTab._instance;
	    };
	    BrowserTab.prototype.IsPollingWindow = function () {
	        return this.amIPolling;
	    };
	    //register for an method for polling window change event to be triggered. when change has occured.    
	    BrowserTab.prototype.OnPollingWindow = function (callback) {
	        if (this.v.IsValidFunction(callback)) {
	            this.callbacks.push(callback);
	        }
	    };
	    BrowserTab.prototype.onUnload = function () {
	        this.documentUnloaded = true;
	        var browserTabKey = 'BrowserTab_' + this.browserTabIndex, browserTab, newTabIndex;
	        if (this.store.GetData(browserTabKey) !== '') {
	            browserTab = JSON.parse(localStorage[browserTabKey]);
	            browserTab = JSON.parse(this.store.GetData(browserTabKey));
	            if (browserTab.id === this.browserTabId) {
	                this.store.RemoveKey(browserTabKey);
	                localStorage.removeItem(browserTabKey);
	                newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;
	                this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());
	            }
	        }
	    };
	    BrowserTab.prototype.initializeTab = function () {
	        var newTabIndex = 1, browserTabKey, browserTab, focusTime = 0;
	        if (this.v.IsNumber(this.store.GetData('NoOfBrowserTabs'))) {
	            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs'));
	            browserTabKey = 'BrowserTab_' + newTabIndex;
	            // Remove dead tabs
	            while (this.store.GetData(browserTabKey) === '' && newTabIndex > 0) {
	                console.log("BrowserTab Cleaning up tab index: " + newTabIndex);
	                newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;
	                this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());
	                browserTabKey = 'BrowserTab_' + newTabIndex;
	            }
	            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) + 1;
	        }
	        if (newTabIndex <= 0) {
	            newTabIndex = 1;
	        }
	        browserTabKey = 'BrowserTab_' + newTabIndex;
	        this.browserTabIndex = newTabIndex;
	        this.browserTabId = this.v.GenerateUniqueId('window');
	        browserTab = {
	            id: this.browserTabId,
	            lastUpdateTime: new Date().getTime()
	        };
	        console.log("BrowserTab Adding tab: " + browserTabKey + " | " + browserTab.id);
	        //Kludge: To be used by the logger
	        sessionStorage.setItem('BrowserTabKey', browserTab.id);
	        this.store.SetData(browserTabKey, JSON.stringify(browserTab));
	        this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());
	    };
	    BrowserTab.prototype.checkPollingWindow = function () {
	        var firstTabKey = 'BrowserTab_1', currentTabKey = 'BrowserTab_' + this.browserTabIndex, prevTabKey = 'BrowserTab_' + (this.browserTabIndex - 1), firstTab = null, prevTab = null, currentTab = null, that = this, newTabIndex = 0;
	        if (this.store.GetData(currentTabKey) !== '') {
	            currentTab = JSON.parse(this.store.GetData(currentTabKey));
	            if (currentTab.id === this.browserTabId) {
	                // Create Date object everytime to get current time, so we can avoid problems due to
	                // javascript execution delay when browser becomes unresponsive for sometime.
	                currentTab.lastUpdateTime = new Date().getTime();
	                if (this.browserTabIndex >= 2) {
	                    if (this.store.GetData(prevTabKey) !== '') {
	                        prevTab = JSON.parse(this.store.GetData(prevTabKey));
	                        // If previous tab was not updated in the last 5 seconds,
	                        // assume that previous tab is dead and remove it from the browser tab list
	                        if (!this.v.IsNumber(prevTab.lastUpdateTime) || (new Date().getTime() - prevTab.lastUpdateTime) >= 5000) {
	                            newTabIndex = parseInt(this.store.GetData('NoOfBrowserTabs')) - 1;
	                            this.store.RemoveKey(currentTabKey);
	                            this.store.SetData('NoOfBrowserTabs', newTabIndex.toString());
	                            console.log("BrowserTab Advancing tab: " + currentTabKey + " | " + currentTab.id);
	                            this.browserTabIndex--;
	                            currentTabKey = prevTabKey;
	                        }
	                    }
	                    else {
	                        console.log("BrowserTab Advancing tab as none exists: " + currentTabKey + " | " + currentTab.id);
	                        this.store.RemoveKey(currentTabKey);
	                        this.browserTabIndex--;
	                        currentTabKey = prevTabKey;
	                    }
	                }
	                this.store.SetData(currentTabKey, JSON.stringify(currentTab));
	                if (this.store.GetData(firstTabKey) !== '') {
	                    firstTab = JSON.parse(this.store.GetData(firstTabKey));
	                    if (this.v.IsValidObject(firstTab) && firstTab.id === this.browserTabId) {
	                        if (this.amIPolling !== true) {
	                            this.amIPolling = true;
	                            this.publishPollingWindow();
	                        }
	                    }
	                }
	            }
	            else {
	                this.amIPolling = false;
	                //Re-initilizing tab as same tab already exists.
	                console.log('BrowserTab Re-Adding tab - Duplicate exists.');
	                this.initializeTab();
	            }
	        }
	        else {
	            if (this.documentUnloaded === false) {
	                console.log("BrowserTab Re-Adding tab");
	                this.initializeTab();
	            }
	        }
	    };
	    BrowserTab.prototype.publishPollingWindow = function () {
	        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
	            var callback = _a[_i];
	            try {
	                callback(this.amIPolling);
	            }
	            catch (ex) {
	                console.log('BrowserTab Browsertabs - call back exception .', ex.message);
	            }
	        }
	    };
	    BrowserTab._instance = new BrowserTab();
	    return BrowserTab;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BrowserTab;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var validation_1 = __webpack_require__(61);
	var StorageHandler = (function () {
	    function StorageHandler() {
	        this.eventKeys = new Map();
	        this.v = new validation_1.Validation();
	        console.log('Storage handler invoked..');
	        if (StorageHandler._instance) {
	            console.log("Storage Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.");
	            return StorageHandler._instance;
	        }
	        StorageHandler._instance = this;
	        if (window.addEventListener) {
	            window.addEventListener("storage", this.onStorageUpdated, false);
	        }
	        else if (window.attachEvent) {
	            window.attachEvent("onstorage", this.onStorageUpdated);
	        }
	        else {
	            window["onstorage"] = this.onStorageUpdated;
	        }
	    }
	    StorageHandler.prototype.onStorageUpdated = function (e) {
	        try {
	            if (!e) {
	                e = window.event;
	            }
	            if (StorageHandler._instance.v.IsNotNullOrEmpty(StorageHandler._instance.eventKeys[e.key])) {
	                StorageHandler._instance.eventKeys[e.key](e.key, e.newValue);
	            }
	        }
	        catch (ex) {
	            console.log('Storage Error occured on processing event :', e, '-- Error Data :', ex.message);
	        }
	    };
	    StorageHandler.getInstance = function () {
	        return StorageHandler._instance;
	    };
	    StorageHandler.prototype.SetEventKeys = function (lstKey, callback) {
	        if (this.v.IsValidFunction(callback)) {
	            for (var _i = 0, lstKey_1 = lstKey; _i < lstKey_1.length; _i++) {
	                var key = lstKey_1[_i];
	                this.eventKeys[key] = callback;
	            }
	        }
	    };
	    StorageHandler.prototype.SetData = function (key, value) {
	        if ((key != "BrowserTab_1" && key != "LCM_CALLCOUNT")) {
	        }
	        localStorage[key] = value;
	    };
	    ;
	    StorageHandler.prototype.GetData = function (key) {
	        var value = localStorage[key];
	        if (key != 'BrowserTab_1' && key != "LCM_CALLCOUNT") {
	        }
	        if (this.v.IsNotNullOrUndefinedString(value)) {
	            return value;
	        }
	        return '';
	    };
	    StorageHandler.prototype.RemoveKey = function (key) {
	        if (key != 'BrowserTab_1' && key != "LCM_CALLCOUNT") {
	        }
	        localStorage.removeItem(key);
	    };
	    StorageHandler._instance = new StorageHandler();
	    return StorageHandler;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = StorageHandler;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var validation_1 = __webpack_require__(61);
	var PersistentList = (function () {
	    function PersistentList(name) {
	        var _this = this;
	        this.v = new validation_1.Validation();
	        this.listName = '';
	        this.list = new Array();
	        console.log('PersistentList handler invoked..');
	        if (!String.prototype.trim) {
	            String.prototype.trim = function () {
	                return this.replace(/^\s+|\s+$/g, "");
	            };
	        }
	        // Throw error if list name is invalid
	        if (name == null || name == undefined || name.trim().length === 0) {
	            throw new Error("List name is invalid");
	        }
	        this.listName = name + '_list';
	        // Try to get existing list from localStorage. If not found, create a new one
	        if (localStorage.getItem(this.listName) != null) {
	            try {
	                this.list = JSON.parse(localStorage.getItem(this.listName));
	            }
	            catch (e) {
	                this.persistList();
	            }
	        }
	        else {
	            this.persistList();
	        }
	        // Attach localStorage event handlers
	        if (window.addEventListener) {
	            window.addEventListener("storage", function (e) { _this.onListUpdate(e); }, false);
	        }
	        else if (window.attachEvent) {
	            window.attachEvent("onstorage", function (e) { _this.onListUpdate(e); });
	        }
	        else {
	            window["onstorage"] = function (e) { _this.onListUpdate(e); };
	        }
	    }
	    PersistentList.prototype.onListUpdate = function (e) {
	        if (!e)
	            e = window.event;
	        if (e.key === this.listName) {
	            try {
	                this.list = JSON.parse(localStorage.getItem(this.listName));
	            }
	            catch (e) {
	            }
	        }
	    };
	    PersistentList.prototype.persistList = function () {
	        localStorage.setItem(this.listName, JSON.stringify(this.list));
	    };
	    PersistentList.prototype.clone = function (o) {
	        if (typeof o === 'object') {
	            return JSON.parse(JSON.stringify(o));
	        }
	        return o;
	    };
	    PersistentList.prototype.equals = function (a, b) {
	        return a.id === b.id;
	    };
	    PersistentList.prototype.Add = function (item) {
	        this.list.push(item);
	        this.persistList();
	    };
	    PersistentList.prototype.Remove = function (item) {
	        if (this.list.length == 0) {
	            return;
	        }
	        for (var i = this.list.length - 1; i >= 0; i--) {
	            if (this.equals(item, this.list[i])) {
	                this.list.splice(i, 1);
	            }
	        }
	        this.persistList();
	    };
	    PersistentList.prototype.Contains = function (item) {
	        if (this.list.length == 0) {
	            return false;
	        }
	        for (var i = 0; i < this.list.length; i++) {
	            if (this.equals(item, this.list[i])) {
	                return true;
	            }
	        }
	        return false;
	    };
	    PersistentList.prototype.Clear = function () {
	        this.list = [];
	        this.persistList();
	    };
	    PersistentList.prototype.IsEmpty = function () {
	        return this.list.length == 0;
	    };
	    PersistentList.prototype.ForEach = function (f) {
	        if (typeof f !== 'function')
	            throw new Error('Invalid argument type. Expected function.');
	        var i = 0;
	        var newList = this.clone(this.list);
	        for (i = 0; i < newList.length; i++) {
	            if (f(i, newList[i]) === true)
	                break;
	        }
	    };
	    return PersistentList;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PersistentList;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var app_config_1 = __webpack_require__(60);
	(function (LogLevel) {
	    LogLevel[LogLevel["ALL"] = 0] = "ALL";
	    LogLevel[LogLevel["TRACE"] = 1] = "TRACE";
	    LogLevel[LogLevel["DEBUG"] = 2] = "DEBUG";
	    LogLevel[LogLevel["INFO"] = 3] = "INFO";
	    LogLevel[LogLevel["WARN"] = 4] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 5] = "ERROR";
	    LogLevel[LogLevel["FATAL"] = 6] = "FATAL";
	})(exports.LogLevel || (exports.LogLevel = {}));
	var LogLevel = exports.LogLevel;
	;
	var LogSetting = (function () {
	    function LogSetting() {
	        this.Level = app_config_1.default.LoggerSetting.level;
	        this.IsConsoleAppender = app_config_1.default.LoggerSetting.isConsoleAppender;
	        this.IsAPIAppender = app_config_1.default.LoggerSetting.isAPIAppender;
	        this.MaxLine = app_config_1.default.LoggerSetting.maxLine;
	    }
	    return LogSetting;
	}());
	var CustomLogger = (function () {
	    function CustomLogger(className) {
	        this.apiURL = '/express';
	        this.className = className;
	    }
	    CustomLogger.prototype.log = function (level, value) {
	        var _this = this;
	        //Create a date of specified format
	        var d = new Date();
	        var temp = '[' + d.toISOString() + '] : ' + d.toLocaleTimeString() + ' -' + level + ': ' + this.className + ' : ';
	        //let temp = '[' + d.toLocaleString() + '] -' + level + ': ' + this.className + ' : ';
	        if (typeof value === 'object') {
	            value = JSON.stringify(value);
	        }
	        temp = temp + value;
	        if (CustomLogger.Setting.IsConsoleAppender === true && window.console) {
	            console.log(temp);
	        }
	        if (CustomLogger.Setting.IsAPIAppender === true) {
	            //fire the ajax request from here.
	            //Store based on the maxLines reached.
	            var logFormat = '[' + d.toISOString() + '] : ' + d.toLocaleTimeString() + '- {0} ' + level + ': ' + this.className + ' : ';
	            var browserId = sessionStorage.getItem('BrowserTabKey');
	            var userDetail_1 = '';
	            var agentId_1 = '';
	            if (browserId === undefined || browserId === null || browserId === '' || browserId === 'undefined' || browserId === 'null') {
	                logFormat = logFormat.replace('{0}', '');
	            }
	            else {
	                logFormat = logFormat.replace('{0}', browserId);
	            }
	            logFormat = logFormat + value;
	            CustomLogger.lstLog.push(logFormat);
	            setTimeout(function () {
	                if (CustomLogger.lstLog.length >= CustomLogger.Setting.MaxLine) {
	                    var appendLst = CustomLogger.lstLog.splice(0, CustomLogger.Setting.MaxLine);
	                    var finalStr = '';
	                    var url = _this.apiURL + '/LogRequest';
	                    for (var _i = 0, appendLst_1 = appendLst; _i < appendLst_1.length; _i++) {
	                        var t = appendLst_1[_i];
	                        finalStr = finalStr + t + '\r\n';
	                    }
	                    finalStr = finalStr.slice(0, -2);
	                    userDetail_1 = localStorage.getItem('USER_CREDENTIALS');
	                    if (userDetail_1 === undefined || userDetail_1 === null || userDetail_1 === '' || userDetail_1 === 'undefined' || userDetail_1 === 'null') {
	                        agentId_1 = '';
	                    }
	                    else {
	                        userDetail_1 = JSON.parse(userDetail_1);
	                        agentId_1 = userDetail_1['Username'];
	                    }
	                    _this.ajax(url, 'POST', JSON.stringify({ agentId: agentId_1, logText: finalStr }))
	                        .done(function (data, textStatus, jqXHR) {
	                        //console.log('Logger Save : ', data);
	                    })
	                        .fail(function (jqXHR, textStatus, errorThrown) {
	                        //console.log('Logger Save Error :', textStatus);
	                    });
	                }
	            }, 0);
	        }
	    };
	    CustomLogger.prototype.All = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.ALL) {
	            this.log('ALL', val);
	        }
	    };
	    CustomLogger.prototype.Trace = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.TRACE) {
	            this.log('TRACE', val);
	        }
	    };
	    CustomLogger.prototype.Debug = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.DEBUG) {
	            this.log('DEBUG', val);
	        }
	    };
	    CustomLogger.prototype.Info = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.INFO) {
	            this.log('INFO', val);
	        }
	    };
	    CustomLogger.prototype.Warn = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.WARN) {
	            this.log('WARN', val);
	        }
	    };
	    CustomLogger.prototype.Error = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.ERROR) {
	            this.log('ERROR', val);
	        }
	    };
	    CustomLogger.prototype.Fatal = function (val) {
	        if (CustomLogger.Setting.Level <= LogLevel.FATAL) {
	            this.log('FATAL', val);
	        }
	    };
	    CustomLogger.prototype.ajax = function (url, method, data) {
	        return window.$.ajax({
	            url: url,
	            method: method,
	            data: data,
	            dataType: "json",
	            contentType: "application/json; charset=utf-8"
	        });
	    };
	    CustomLogger.Setting = new LogSetting();
	    CustomLogger.lstLog = new Array();
	    CustomLogger.Level = 5; //Setting the default log level to Error;
	    return CustomLogger;
	}());
	exports.CustomLogger = CustomLogger;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Models = __webpack_require__(67);
	var logger_1 = __webpack_require__(65);
	var validation_1 = __webpack_require__(61);
	var storage_1 = __webpack_require__(63);
	var app_config_1 = __webpack_require__(60);
	var $ = __webpack_require__(68); //NBC
	var core_1 = __webpack_require__(1);
	var IncontactMethod = (function () {
	    function IncontactMethod() {
	        this.baseURI = '';
	        this.servicesPath = 'services/' + app_config_1.default.apiVersion;
	        this.serverTimeURI = '/server-time';
	        this.agentSessionURI = '/agent-sessions';
	        this.joinSessionURI = '/agent-sessions/join';
	        this.eventURI = '/agent-sessions/{sessionId}/get-next-event?timeout=60';
	        this.updateStateURI = '/agent-sessions/{sessionId}/state';
	        this.logoutSessionURI = '/agent-sessions/{sessionId}';
	        this.agentDetailURI = '/agents/{agentId}?fields=agentId,firstName,lastName,userName,teamId,teamName,isSupervisor';
	        this.agentStateURI = '/agents/states?agentId,firstName,lastName,userName,agentStateName,startDate,outStateDescription,isAcw,teamId,teamName,lastPollTime';
	        this.notreadyReasonCodeURI = '/teams/{teamId}/unavailable-codes';
	        this.fetchTeamAgentsURI = '/teams/{teamId}/agents?fields=agentId,firstName,lastName,userName,teamId,teamName';
	        this.acceptCallURI = '/agent-sessions/{sessionId}/interactions/{contactId}/accept';
	        this.dropCallURI = '/agent-sessions/{sessionId}/interactions/{contactId}/end';
	        this.holdCallURI = '/agent-sessions/{sessionId}/interactions/{contactId}/hold';
	        this.resumeCallURI = '/agent-sessions/{sessionId}/interactions/{contactId}/resume';
	        this.makeCallURI = '/agent-sessions/{sessionId}/dial-phone';
	        this.consultAgentURI = '/agent-sessions/{sessionId}/consult-agent';
	        this.conferenceCallURI = '/agent-sessions/{sessionId}/interactions/conference-calls';
	        this.transferCallURI = '/agent-sessions/{sessionId}/interactions/transfer-calls';
	        this.acceptConsultURI = '/agent-sessions/{sessionId}/interactions/{contactId}/accept-consult';
	        this.logger = new logger_1.CustomLogger('IncontactMethod');
	        this.v = new validation_1.Validation();
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.store = storage_1.default.getInstance();
	        this.isLoginProgress = false;
	        this.AgentInfo = new Models.Agent();
	        this.CallInfo = new Array();
	        this.TeamInfo = new Array();
	        this.agentStateLastPollTime = '';
	        this.loginJobId = '';
	        this.doPoll = false;
	        this.logger.Info('InContact constructor loaded ..');
	    }
	    IncontactMethod.prototype.OnInit = function (clearStorage) {
	        // if (clearStorage !== true) {
	        var value;
	        value = this.store.GetData(Models.Topics.UserCredentials);
	        this.logger.Info('OnInit');
	        if (value !== '') {
	            this.userInfo = JSON.parse(value);
	            if (this.v.IsNotNullOrUndefinedString(this.userInfo.access_token)) {
	                this.request = new validation_1.Request(this.userInfo.access_token, this.userInfo.token_type);
	            }
	            else {
	                return;
	            }
	        }
	        else {
	            return;
	        }
	        value = this.store.GetData(Models.Topics.SystemInformation);
	        if (value !== '') {
	            this.SystemInformation = JSON.parse(value);
	            this.evnt.Broadcast(Models.Topics.SystemInformation, this.SystemInformation);
	        }
	        value = this.store.GetData(Models.Topics.AgentDetail);
	        if (value !== '') {
	            this.AgentInfo = JSON.parse(value);
	            this.evnt.Broadcast(Models.Topics.AgentDetail, this.AgentInfo);
	            this.getAgentInfo();
	            this.connectEvent();
	        }
	        value = this.store.GetData(Models.Topics.CallDetail);
	        if (value !== '') {
	            this.CallInfo = JSON.parse(value);
	            this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);
	        }
	        // } else {
	        //     // this.logger.Debug("InContact OnInit Logout");
	        //     // this.AgentInfo.State = 'LOGOUT';
	        //     // this.onAgentLogout();
	        // }
	    };
	    IncontactMethod.prototype.ngOnDestroy = function () {
	        this.clearEvents();
	    };
	    IncontactMethod.prototype.clearEvents = function () {
	        if (this.v.IsNotNullOrUndefinedOjbect(this.eventPoll)) {
	            this.doPoll = false;
	            this.eventPoll.abort();
	        }
	        if (this.v.IsNotNullOrUndefinedOjbect(this.tokenTimeout)) {
	            window.clearTimeout(this.tokenTimeout);
	        }
	        if (this.v.IsNotNullOrUndefinedOjbect(this.agentStatePollTimeout)) {
	            window.clearInterval(this.agentStatePollTimeout);
	        }
	    };
	    IncontactMethod.prototype.AgentLogin = function (user, jobId, callback) {
	        var _this = this;
	        if (!(this.v.IsNotNullOrEmpty(user.username) && this.v.IsNotNullOrEmpty(user.password) && this.v.IsNotNullOrEmpty(user.stationPhoneNumber))) {
	            var t = new Models.SystemMessage();
	            t.Id = jobId;
	            t.Msg = Models.Message.EnterCredentials;
	            t.Level = Models.Severity.Error;
	            t.Type = Models.MessageType.LoginResponse;
	            this.LoginResponse = t;
	            this.store.SetData(Models.Topics.LoginResponse, JSON.stringify(this.LoginResponse));
	            this.evnt.Broadcast(Models.Topics.LoginResponse, this.LoginResponse);
	            return;
	        }
	        //check is agent is already logged in or login is in progress return that message. 
	        if (this.isLoginProgress === false) {
	            this.onLoginStart(jobId);
	            this.userInfo = user;
	            this.store.SetData(Models.Topics.UserCredentials, JSON.stringify(user));
	            this.GetAccessToken(function (jobId) {
	                console.log("Got into Incontact AgentLogin callback..");
	                _this.isLoginProgress = false;
	                var t = new Models.SystemMessage();
	                t.Id = jobId;
	                t.Msg = Models.Message.InvalidUserCredential;
	                t.Level = Models.Severity.Error;
	                t.Type = Models.MessageType.LoginResponse;
	                _this.LoginResponse = t;
	                _this.store.SetData(Models.Topics.LoginResponse, JSON.stringify(_this.LoginResponse));
	                _this.evnt.Broadcast(Models.Topics.LoginResponse, _this.LoginResponse);
	            });
	        }
	        else if (this.v.IsValidFunction(callback)) {
	            callback(jobId);
	        }
	    };
	    IncontactMethod.prototype.onLoginStart = function (jobId) {
	        this.isLoginProgress = true;
	        this.loginJobId = jobId;
	    };
	    IncontactMethod.prototype.GetAccessToken = function (callback) {
	        var _this = this;
	        var client_id = app_config_1.default.applicationName + "@" + app_config_1.default.vendorName;
	        var url = app_config_1.default.tokenUri;
	        console.log(client_id + ':' + this.userInfo.businessUnitId);
	        var key = window.btoa(client_id + ':' + this.userInfo.businessUnitId);
	        console.log(key);
	        var request = new validation_1.Request(key, "basic");
	        var tokenPayload = {
	            "grant_type": "password",
	            "username": this.userInfo.username,
	            "password": this.userInfo.password,
	            "scope": app_config_1.default.requestingAPIs
	        };
	        request.SendRequest(url, 'POST', null, JSON.stringify(tokenPayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('GetToken success..');
	                console.log("GetToken Success : ", data);
	                _this.updateToken(data);
	                _this.getServerTime();
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('GetToken failure..' + statusText + " : " + status);
	            callback(_this.loginJobId);
	        });
	    };
	    IncontactMethod.prototype.RefreshAccessToken = function () {
	        var _this = this;
	        var client_id = app_config_1.default.applicationName + "@" + app_config_1.default.vendorName;
	        var url = this.userInfo.refresh_token_uri;
	        var key = window.btoa(client_id + ':' + this.userInfo.businessUnitId);
	        var request = new validation_1.Request(key, "basic");
	        var tokenPayload = {
	            "grant_type": "refresh_token",
	            "refresh_token": this.userInfo.refresh_token
	        };
	        request.SendRequest(url, 'POST', null, JSON.stringify(tokenPayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('RefreshAccessToken success..');
	                console.log("RefreshAccessToken Success : ", data);
	                _this.updateToken(data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('RefreshAccessToken failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.updateToken = function (data) {
	        var _this = this;
	        this.userInfo.access_token = data.access_token;
	        this.userInfo.base_uri = data.resource_server_base_uri;
	        this.userInfo.token_type = data.token_type;
	        this.userInfo.refresh_token = data.refresh_token;
	        this.userInfo.refresh_token_uri = data.refresh_token_server_uri;
	        this.AgentInfo.Extension = this.userInfo.stationPhoneNumber;
	        this.AgentInfo.AgentId = data.agent_id;
	        this.store.SetData(Models.Topics.UserCredentials, JSON.stringify(this.userInfo));
	        this.request = new validation_1.Request(this.userInfo.access_token, this.userInfo.token_type);
	        this.tokenTimeout = window.setTimeout(function () {
	            _this.RefreshAccessToken();
	        }, 55 * 60 * 1000); // refresh token every 55 minutes
	    };
	    IncontactMethod.prototype.getServerTime = function () {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.serverTimeURI;
	        this.logger.Debug('getServerTime :' + url);
	        this.request.SendRequest(url, 'GET', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Server Time : ", data);
	                _this.SystemInformation = new Models.SystemInfo();
	                _this.SystemInformation.LocalTime = new Date().getTime();
	                _this.SystemInformation.ServerTime = new Date(data.ServerTime).getTime();
	                _this.store.SetData(Models.Topics.SystemInformation, JSON.stringify(_this.SystemInformation));
	                _this.evnt.Broadcast(Models.Topics.SystemInformation, _this.SystemInformation);
	                _this.signIn();
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent SignIn failure..' + statusText + " : " + status);
	            if (status === 409) {
	                _this.joinAgentSession();
	            }
	        });
	    };
	    IncontactMethod.prototype.signIn = function () {
	        var _this = this;
	        var startSessionPayload = {
	            'stationPhoneNumber': this.userInfo.stationPhoneNumber,
	            'inactivityTimeout': 30,
	            'inactivityForceLogout': false
	        };
	        var url = this.baseURI + this.agentSessionURI;
	        this.logger.Debug('signIn :' + url);
	        this.request.SendRequest(url, 'POST', null, JSON.stringify(startSessionPayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('Agent SignIn success..');
	                console.log("Agent Success : ", data);
	                _this.userInfo.sessionId = data.sessionId;
	                _this.store.SetData(Models.Topics.UserCredentials, JSON.stringify(_this.userInfo));
	                _this.onLoginSuccess();
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent SignIn failure..' + statusText + " : " + status);
	            if (status === 409) {
	                _this.joinAgentSession();
	            }
	        });
	    };
	    IncontactMethod.prototype.joinAgentSession = function () {
	        var _this = this;
	        var setAgentStatePayload = {};
	        if (this.v.IsNotNullOrUndefinedOjbect(this.AgentInfo) && this.v.IsNotNullOrUndefinedString(this.AgentInfo.AgentId)) {
	            setAgentStatePayload["asAgentId"] = +this.AgentInfo.AgentId;
	        }
	        var url = this.baseURI + this.joinSessionURI;
	        this.logger.Debug('joinAgentSession :' + url);
	        this.request.SendRequest(url, 'POST', null, JSON.stringify(setAgentStatePayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('Agent join session success..');
	                console.log("Agent Success : ", data);
	                _this.userInfo.sessionId = data.sessionId;
	                _this.store.SetData(Models.Topics.UserCredentials, JSON.stringify(_this.userInfo));
	                _this.onLoginSuccess();
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent join session failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.onLoginSuccess = function () {
	        console.log("calling onLoginSuccess");
	        try {
	            this.isLoginProgress = false;
	            var t = new Models.SystemMessage();
	            t.Id = this.loginJobId;
	            t.Msg = 'Login Successfull.';
	            t.Level = Models.Severity.Info;
	            t.Type = Models.MessageType.LoginResponse;
	            this.LoginResponse = t;
	            this.store.SetData(Models.Topics.LoginResponse, JSON.stringify(this.LoginResponse));
	            this.evnt.Broadcast(Models.Topics.LoginResponse, this.LoginResponse);
	            this.loginJobId = '';
	            this.logger.Debug('On Login Success');
	            this.getAgentInfo();
	            this.connectEvent();
	        }
	        catch (ex) {
	            this.logger.Error('On Login Success Error : ' + ex.message);
	        }
	    };
	    IncontactMethod.prototype.connectEvent = function () {
	        var self = this;
	        this.doPoll = true;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.eventURI;
	        this.logger.Debug('connectEvent :' + url + ' - ' + 'sessionId : ' + this.userInfo.sessionId);
	        (function poll() {
	            console.log("Polling event : ", self.doPoll);
	            if (self.doPoll) {
	                self.eventPoll = $.ajax({
	                    type: "GET",
	                    url: url.replace('{sessionId}', self.userInfo.sessionId),
	                    beforeSend: function (request) {
	                        request.setRequestHeader("Authorization", self.userInfo.token_type + ' ' + self.userInfo.access_token);
	                        request.setRequestHeader("content-Type", "application/json");
	                    },
	                    success: function (data) {
	                        //Update your dashboard gauge
	                        console.log("Connect Success : ", data);
	                        // self.userInfo.sessionId = data.sessionId;
	                        self.updateEvent(data);
	                    },
	                    error: function (XMLHttpRequest, textStatus, errorThrown) {
	                        //Process error actions
	                        console.log(textStatus);
	                        console.log(errorThrown);
	                        if (errorThrown == "Session Ended") {
	                            self.logger.Error("Agent session ended. Logging out.");
	                            self.onAgentLogout();
	                        }
	                        else if (errorThrown == "Unauthorized") {
	                            self.logger.Error("Agent session Unauthorized.");
	                            self.onAgentLogout();
	                        }
	                        return false;
	                    },
	                    dataType: "json",
	                    complete: poll,
	                    timeout: 30000
	                });
	            }
	        })();
	    };
	    IncontactMethod.prototype.updateEvent = function (data) {
	        this.userInfo.sessionId = data.sessionId;
	        for (var _i = 0, _a = data.events; _i < _a.length; _i++) {
	            var evt = _a[_i];
	            switch (evt.Type) {
	                case "AgentState":
	                    this.AgentInfo.State = evt.CurrentState;
	                    this.AgentInfo.StateChangeTime = new Date(evt.StartTime).getTime();
	                    if (this.v.IsNotNullOrUndefinedString(evt.CurrentOutReason)) {
	                        this.AgentInfo.Reason = new Models.ReasonCode("", evt.CurrentOutReason);
	                        if (evt.IsAcw === "True") {
	                            this.AgentInfo.Reason.isAcw = true;
	                            this.AgentInfo.Reason.acwTimeout = +evt.AcwTimeout;
	                        }
	                    }
	                    else {
	                        this.AgentInfo.Reason = null;
	                    }
	                    this.store.SetData(Models.Topics.AgentDetail, JSON.stringify(this.AgentInfo));
	                    this.evnt.Broadcast(Models.Topics.AgentDetail, this.AgentInfo);
	                    break;
	                // case "AgentSessionEnd":
	                //     this.logger.Error("Agent session ended. Logging out.");
	                //     this.onAgentLogout();
	                // break;
	                case "CallContactEvent":
	                    this.parseCallDetail(evt);
	                    break;
	                default:
	                    console.log("Update event not processed");
	            }
	        }
	    };
	    IncontactMethod.prototype.getAgentInfo = function () {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.agentDetailURI.replace('{agentId}', this.AgentInfo.AgentId);
	        this.logger.Debug('getAgentInfo :' + url);
	        this.request.SendRequest(url, 'GET', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('Agent Info success..');
	                console.log("Agent Info: ", data);
	                if (_this.v.IsNotNullOrEmptyArray(data.agents)) {
	                    var agent = data.agents[0];
	                    _this.AgentInfo.FirstName = agent.firstName;
	                    _this.AgentInfo.LastName = agent.lastName;
	                    _this.AgentInfo.LoginId = agent.agentId;
	                    _this.AgentInfo.LoginName = agent.userName;
	                    _this.AgentInfo.Roles.Agent = !agent.isSupervisor;
	                    _this.AgentInfo.Roles.Supervisor = agent.isSupervisor;
	                    _this.AgentInfo.Team = new Models.Team(String(agent.teamId), agent.teamName);
	                    _this.getNotreadyReasonCodes();
	                    _this.fetchTeamInformation();
	                    _this.subscribeToTeamAgentEvents();
	                    _this.store.SetData(Models.Topics.AgentDetail, JSON.stringify(_this.AgentInfo));
	                    _this.evnt.Broadcast(Models.Topics.AgentDetail, _this.AgentInfo);
	                }
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent Info failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.getNotreadyReasonCodes = function () {
	        var _this = this;
	        var url = this.baseURI + this.notreadyReasonCodeURI.replace('{teamId}', this.AgentInfo.Team.Id);
	        this.logger.Debug('getNotreadyReasonCodes :' + url);
	        this.request.SendRequest(url, 'GET', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('NotReady reason code success..');
	                console.log("NotReady reason code : ", data);
	                _this.NotReadyReason = new Array();
	                if (_this.v.IsNotNullOrUndefinedOjbect(data.resultSet) && _this.v.IsNotNullOrEmptyArray(data.resultSet.unavailableCodes)) {
	                    for (var _i = 0, _a = data.resultSet.unavailableCodes; _i < _a.length; _i++) {
	                        var code = _a[_i];
	                        if (code.isAcw === "False") {
	                            _this.NotReadyReason.push(new Models.ReasonCode(code.outstateId, code.outstateName));
	                        }
	                    }
	                }
	                _this.store.SetData(Models.Topics.NotReadyReasonCode, JSON.stringify(_this.NotReadyReason));
	                _this.evnt.Broadcast(Models.Topics.NotReadyReasonCode, _this.NotReadyReason);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('NotReady reason code failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.parseTeamAgentDetails = function (data) {
	        var stateChangeTime;
	        var reason;
	        var agent = new Models.TeamAgent(data.teamId, data.teamName);
	        agent.FirstName = data.firstName;
	        agent.LastName = data.lastName;
	        agent.LoginId = String(data.agentId);
	        agent.State = data.agentStateName;
	        agent.userName = data.userName;
	        agent.TeamId = String(data.teamId);
	        agent.TeamName = data.teamName;
	        stateChangeTime = data.startDate;
	        agent.StateChangeTime = stateChangeTime === '' ? -1 : new Date(stateChangeTime).getTime();
	        reason = data.outStateDescription;
	        if (this.v.IsNotNullOrUndefinedString(reason)) {
	            agent.Reason = new Models.ReasonCode("", reason);
	            if (data.IsAcw === "True") {
	                agent.Reason.isAcw = true;
	            }
	        }
	        else {
	            agent.Reason = null;
	        }
	        return agent;
	    };
	    IncontactMethod.prototype.updateTeamInformation = function (data) {
	        for (var _i = 0, _a = data.agentStates; _i < _a.length; _i++) {
	            var agent = _a[_i];
	            // console.log("AGENT : " + agent.firstName);
	            var team = this.parseTeamAgentDetails(agent);
	            var canAdd = true;
	            for (var i = 0; i < this.TeamInfo.length; i++) {
	                var t = this.TeamInfo[i];
	                if (t.LoginId === team.LoginId) {
	                    this.TeamInfo[i] = team;
	                    canAdd = false;
	                    break;
	                }
	            }
	            // if((team.LoginId === this.AgentInfo.LoginId) || (team.TeamId != this.AgentInfo.Team.Id)){
	            //     canAdd = false;
	            // }
	            if (team.LoginId === this.AgentInfo.LoginId) {
	                canAdd = false;
	            }
	            if (canAdd === true) {
	                this.TeamInfo.push(team);
	            }
	        }
	        this.store.SetData(Models.Topics.TeamInformation, JSON.stringify(this.TeamInfo));
	        this.evnt.Broadcast(Models.Topics.TeamInformation, this.TeamInfo);
	    };
	    IncontactMethod.prototype.fetchTeamInformation = function () {
	        var _this = this;
	        var url = this.baseURI + this.agentStateURI;
	        if (this.v.IsNotNullOrUndefinedString(this.agentStateLastPollTime))
	            url = url + "&updatedSince=" + this.agentStateLastPollTime;
	        this.request.SendRequest(url, 'GET', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                if (_this.v.IsNotNullOrEmptyArray(data.agentStates)) {
	                    _this.agentStateLastPollTime = data.agentStates[0].lastPollTime;
	                    _this.updateTeamInformation(data);
	                }
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('TeamInformation failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.subscribeToTeamAgentEvents = function () {
	        this.logger.Debug("subscribeToTeamAgentEvents ... ");
	        this.agentStatePollTimeout = window.setInterval(this.fetchTeamInformation.bind(this), 5000);
	    };
	    IncontactMethod.prototype.parseCallDetail = function (data) {
	        console.log('%c InContact Method parseCallDetail ', 'background:#6833FF; color:#FFF', data);
	        var canAddCall = true;
	        var call = new Models.CallInfo();
	        call.Id = data.ContactID;
	        call.From = data.ANI;
	        call.State = data.Status;
	        if (call.State === 'ACTIVE') {
	            this.store.SetData('isActiveCall', 'true');
	        }
	        call.ParentContactId = +data.MasterID;
	        call.DNIS = data.DNIS;
	        call.CallType = data.CallType;
	        call.IsOutbound = (data.IsInbound == "False");
	        call.StartTime = data.StartTime === '' ? -1 : new Date(data.StartTime).getTime();
	        call.StateChangeTime = data.LastStateChangeTime === '' ? -1 : new Date(data.LastStateChangeTime).getTime();
	        call.Actions = this.parseCallAction(data.CallType, data.Status);
	        this.logger.Info('Call DNIS - Call ID - Call Type - Call State');
	        this.logger.Info(call.DNIS + ' - ' + call.Id + ' - ' + call.CallType + ' - ' + call.State);
	        if (this.v.IsNotNullOrEmptyArray(data[app_config_1.default.callvariableField])) {
	            for (var _i = 0, _a = data[app_config_1.default.callvariableField]; _i < _a.length; _i++) {
	                var cv = _a[_i];
	                for (var _b = 0, _c = Object.entries(cv); _b < _c.length; _b++) {
	                    var _d = _c[_b], key = _d[0], value = _d[1];
	                    call.CallVariables[key] = value;
	                }
	            }
	        }
	        canAddCall = true;
	        for (var i = 0; i < this.CallInfo.length; i++) {
	            var ca = this.CallInfo[i];
	            if (ca.Id === call.Id) {
	                canAddCall = false;
	                if (call.StateChangeTime >= ca.StateChangeTime) {
	                    this.CallInfo[i] = call;
	                }
	                break;
	            }
	        }
	        if (canAddCall === true) {
	            this.CallInfo.push(call);
	        }
	        if (call.IsOutbound === false && call.State === 'Disconnected') {
	            this.removeCall(call.Id);
	        }
	        else if ((call.State === 'Disconnected' && (this.store.GetData('isActiveCall') === 'true'))
	            || (call.IsOutbound === true && call.State === 'Disconnected')) {
	            this.removeCall(call.Id);
	        }
	        else {
	            this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));
	            this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);
	            console.log('%c Parse call detail Skip removeCall ', 'background:#6833FF; color:#FFF', call.State);
	            this.logger.Debug('Parse call detail done brodcast calldetail to service and view : ' + call.State);
	        }
	        //unsuccess call
	        if (call.State === 'Disconnected' && !this.store.GetData('isActiveCall')) {
	            this.store.SetData('isFailedCall', 'true');
	        }
	    };
	    IncontactMethod.prototype.parseCallAction = function (callType, callState) {
	        var result = new Models.CallActions();
	        var actionArray = app_config_1.default.nextCallActions[callState];
	        var agentState = "IN_";
	        if (this.AgentInfo.State === "OutboundConsult")
	            agentState = "OUT_";
	        if (callType === "Consult") {
	            callState = (callState === "Active") ? agentState + callState : callState;
	            actionArray = app_config_1.default.nextConsultActions[callState];
	        }
	        if (this.v.IsNotNullOrUndefinedOjbect(actionArray)) {
	            for (var _i = 0, actionArray_1 = actionArray; _i < actionArray_1.length; _i++) {
	                var action = actionArray_1[_i];
	                switch (action) {
	                    case 'ANSWER':
	                        result.CanAnswer = true;
	                        break;
	                    case 'HOLD':
	                        result.CanHold = true;
	                        break;
	                    case 'RETRIEVE':
	                        result.CanRetrieve = true;
	                        break;
	                    case 'DROP':
	                        result.CanDrop = true;
	                        break;
	                    case 'CONSULT_CALL':
	                        result.CanConsult = true;
	                        break;
	                    case 'TRANSFER_SST':
	                        result.CanTransferSST = true;
	                        break;
	                    case 'CONFERENCE':
	                        result.CanConference = true;
	                        break;
	                    case 'TRANSFER':
	                        result.CanTransfer = true;
	                        break;
	                    case 'CONSULT_ACCEPT':
	                        result.CanAccept = true;
	                        break;
	                    case 'END_CONFERENCE':
	                        result.CanParticipantDrop = true;
	                        break;
	                }
	            }
	        }
	        return result;
	    };
	    IncontactMethod.prototype.removeCall = function (callId) {
	        //setTimeout(() => {
	        var i;
	        var index = -1;
	        /*setTimeout(function(){*/
	        for (i = 0; i < this.CallInfo.length; i++) {
	            if (this.CallInfo[i].Id === callId) {
	                index = i;
	                break;
	            }
	        }
	        if (index !== -1) {
	            var call = this.CallInfo.splice(index, 1);
	            this.logger.Debug('Remove Call : ' + callId);
	        }
	        this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));
	        this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);
	    };
	    IncontactMethod.prototype.changeAgentState = function (state, reasonCode) {
	        var _this = this;
	        var setAgentStatePayload = {
	            'state': state
	        };
	        if (this.v.IsNotNullOrUndefinedString(reasonCode) && reasonCode !== "-1") {
	            setAgentStatePayload['reason'] = reasonCode;
	        }
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.updateStateURI.replace('{sessionId}', this.userInfo.sessionId);
	        this.logger.Debug('changeAgentState :' + url);
	        this.request.SendRequest(url, 'POST', null, JSON.stringify(setAgentStatePayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('Agent state update success..');
	                console.log("Agent state : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent state update failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.AgentLogout = function () {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.logoutSessionURI.replace('{sessionId}', this.userInfo.sessionId);
	        this.logger.Debug('AgentLogout :' + url);
	        var endAgentSessionPayload = {
	            'sessionId': 'string'
	        };
	        this.request.SendRequest(url, 'DELETE', null, JSON.stringify(endAgentSessionPayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                _this.logger.Info('Agent logout success..');
	                _this.onAgentLogout();
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Agent logout failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.onAgentLogout = function () {
	        try {
	            this.logger.Debug('On Agent Logout.');
	            this.clearEvents();
	            this.delete_cookie('JSESSIONIDSSO');
	            this.delete_cookie('JSESSIONID');
	            this.isLoginProgress = false;
	            this.request = null;
	            this.userInfo = new Models.UserCredentials();
	            this.AgentInfo = new Models.Agent();
	            this.CallInfo = new Array();
	            this.LoginResponse = new Models.SystemMessage();
	            this.NotReadyReason = new Array();
	            this.clearStorage();
	        }
	        catch (ex) {
	            this.logger.Error('On Agent Logout Error : ' + ex.message);
	        }
	    };
	    IncontactMethod.prototype.delete_cookie = function (name) {
	        window.document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
	    };
	    ;
	    IncontactMethod.prototype.clearStorage = function () {
	        //clear the storage and fire the events
	        this.store.SetData(Models.Topics.UserCredentials, JSON.stringify(this.userInfo));
	        this.store.SetData(Models.Topics.AgentDetail, JSON.stringify(this.AgentInfo));
	        this.evnt.Broadcast(Models.Topics.AgentDetail, this.AgentInfo);
	        this.store.SetData(Models.Topics.CallDetail, JSON.stringify(this.CallInfo));
	        this.evnt.Broadcast(Models.Topics.CallDetail, this.CallInfo);
	        this.evnt.Broadcast(Models.Topics.LoginResponse, this.LoginResponse);
	        this.store.SetData(Models.Topics.NotReadyReasonCode, JSON.stringify(this.NotReadyReason));
	        this.evnt.Broadcast(Models.Topics.NotReadyReasonCode, this.NotReadyReason);
	        this.store.SetData(Models.Topics.TeamInformation, JSON.stringify(this.TeamInfo));
	        this.evnt.Broadcast(Models.Topics.TeamInformation, this.TeamInfo);
	        this.store.RemoveKey("isCallDroped");
	        this.store.RemoveKey('isActiveCall');
	        this.store.RemoveKey('isFailedCall');
	        this.logger.Debug('clearStorage Call data store cleared');
	    };
	    IncontactMethod.prototype.AnswerCall = function (callId) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.acceptCallURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', callId);
	        this.logger.Debug('AnswerCall :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Answer call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Answer call failure..' + statusText + " : " + status);
	        });
	    };
	    // public DropCall(callId:string){
	    //     this.baseURI =this.userInfo.base_uri + this.servicesPath;
	    //     let url = this.baseURI + this.dropCallURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', callId);
	    //     this.logger.Debug('Drop Call :' + url);
	    //     this.request.SendRequest(url, 'POST', null, null, (data: any, status: number, statusText: string) => {
	    //         if (statusText === 'success') {
	    //             console.log("Drop call : ", data);
	    //         }
	    //     }, (status: number, statusText: string, response: string) => {
	    //         this.logger.Error('Drop call failure..' + statusText + " : " + status);
	    //     });
	    // }
	    IncontactMethod.prototype.DropCall = function (call) {
	        var _this = this;
	        if (call.IsOutbound && call.CallType != "Consult") {
	            var data = {
	                "ContactID": call.Id,
	                "ANI": call.From,
	                "Status": "Disconnected",
	                "MasterID": call.Id,
	                "DNIS": "12345",
	                "CallType": "Regular",
	                "IsInbound": "False",
	                "StartTime": new Date().toISOString(),
	                "LastStateChangeTime": new Date().toISOString()
	            };
	            this.parseCallDetail(data);
	            var self = this;
	            var agentState = {
	                "Type": "AgentState",
	                "CurrentState": "Unavailable",
	                "StartTime": new Date().toISOString()
	            };
	            var agentData = {
	                "events": [
	                    agentState
	                ],
	                "sessionId": self.userInfo.sessionId
	            };
	            this.updateEvent(agentData);
	        }
	        else {
	            this.baseURI = this.userInfo.base_uri + this.servicesPath;
	            var url = this.baseURI + this.dropCallURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', call.Id);
	            this.logger.Debug('Drop Call :' + url);
	            this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	                if (statusText === 'success') {
	                    console.log("Drop call : ", data);
	                }
	            }, function (status, statusText, response) {
	                _this.logger.Error('Drop call failure..' + statusText + " : " + status);
	            });
	        }
	    };
	    IncontactMethod.prototype.HoldCall = function (callId, callback) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.holdCallURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', callId);
	        this.logger.Debug('Hold Call :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Hold call : ", data);
	                if (_this.v.IsValidFunction(callback)) {
	                    callback(data);
	                }
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Hold call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.RetrieveCall = function (callId) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.resumeCallURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', callId);
	        this.logger.Debug('Retrieve Call :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Retrieve call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Retrieve call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.MakeCall = function (toAddress) {
	        // this.baseURI =this.userInfo.base_uri + this.servicesPath;
	        // let url = this.baseURI + this.makeCallURI.replace('{sessionId}', this.userInfo.sessionId)
	        // this.logger.Debug('Make Call :' + url);
	        // const  placeOutboundCallPayload = {
	        //     'phoneNumber': toAddress,
	        //     'skillName': '2004584',
	        //     'ParentContactId' : 0
	        // }
	        // this.request.SendRequest(url, 'POST', null, JSON.stringify(placeOutboundCallPayload), (data: any, status: number, statusText: string) => {
	        //     if (statusText === 'success') {
	        //         console.log("Make call : ", data);
	        //     }
	        // }, (status: number, statusText: string, response: string) => {
	        //     this.logger.Error('Make call failure..' + statusText + " : " + status);
	        // });
	        var id = Math.floor(10000000 + Math.random() * 90000000).toString();
	        var data = {
	            "ContactID": id,
	            "ANI": toAddress,
	            "Status": "Dialing",
	            "MasterID": id,
	            "DNIS": "12345",
	            "CallType": "Regular",
	            "IsInbound": "False",
	            "StartTime": new Date().toISOString(),
	            "LastStateChangeTime": new Date().toISOString()
	        };
	        this.parseCallDetail(data);
	        var self = this;
	        var agentState = {
	            "Type": "AgentState",
	            "CurrentState": "OutboundContact",
	            "StartTime": new Date().toISOString()
	        };
	        var agentData = {
	            "events": [
	                agentState
	            ],
	            "sessionId": self.userInfo.sessionId
	        };
	        this.updateEvent(agentData);
	    };
	    IncontactMethod.prototype.ConsultCall = function (callId, callState, agentId, userName) {
	        var _this = this;
	        console.log("Consult call state : " + callState);
	        if (callState != "Holding") {
	            this.HoldCall(callId, function (data) {
	                _this.makeConsultCall(callId, agentId, userName);
	            });
	        }
	        else {
	            this.makeConsultCall(callId, agentId, userName);
	        }
	    };
	    IncontactMethod.prototype.makeConsultCall = function (callId, agentId, userName) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.consultAgentURI.replace('{sessionId}', this.userInfo.sessionId);
	        this.logger.Debug('Consult Call :' + url);
	        var consultAgentPayload = {
	            'targetAgentId': +agentId,
	            'ParentContactId': +callId
	        };
	        this.request.SendRequest(url, 'POST', null, JSON.stringify(consultAgentPayload), function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Consult call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Consult call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.DirectTransfer = function (callId, callState, agentId, userName) {
	    };
	    IncontactMethod.prototype.TransferCall = function (callId) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.transferCallURI.replace('{sessionId}', this.userInfo.sessionId);
	        this.logger.Debug('Transfer Call :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Transfer call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Transfer call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.ConferenceCall = function (callId) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.conferenceCallURI.replace('{sessionId}', this.userInfo.sessionId);
	        this.logger.Debug('Conference Call :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Conference call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Conference call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod.prototype.AcceptConsultCall = function (callId) {
	        var _this = this;
	        this.baseURI = this.userInfo.base_uri + this.servicesPath;
	        var url = this.baseURI + this.acceptConsultURI.replace('{sessionId}', this.userInfo.sessionId).replace('{contactId}', callId);
	        this.logger.Debug('Accept consult Call :' + url);
	        this.request.SendRequest(url, 'POST', null, null, function (data, status, statusText) {
	            if (statusText === 'success') {
	                console.log("Accept consult call : ", data);
	            }
	        }, function (status, statusText, response) {
	            _this.logger.Error('Accept consult call failure..' + statusText + " : " + status);
	        });
	    };
	    IncontactMethod = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], IncontactMethod);
	    return IncontactMethod;
	}());
	exports.IncontactMethod = IncontactMethod;


/***/ }),
/* 67 */
59,
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.3.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-01-20T17:24Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var document = window.document;
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	var isFunction = function isFunction( obj ) {
	
	      // Support: Chrome <=57, Firefox <=52
	      // In some browsers, typeof returns "function" for HTML <object> elements
	      // (i.e., `typeof document.createElement( "object" ) === "function"`).
	      // We don't want to classify *any* DOM node as a function.
	      return typeof obj === "function" && typeof obj.nodeType !== "number";
	  };
	
	
	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};
	
	
	
	
		var preservedScriptAttributes = {
			type: true,
			src: true,
			noModule: true
		};
	
		function DOMEval( code, doc, node ) {
			doc = doc || document;
	
			var i,
				script = doc.createElement( "script" );
	
			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {
					if ( node[ i ] ) {
						script[ i ] = node[ i ];
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	
	
	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
	
		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.3.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
	
			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}
	
			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
	
			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );
	
		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");
	
		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
	
		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {
	
				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {
	
					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}
	
					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||
	
						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}
	
				return elem.disabled === disabled;
	
			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}
	
			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
	
			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );
	
					if ( elem ) {
	
						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
	
						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}
	
					return [];
				}
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	
	
	function nodeName( elem, name ) {
	
	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	
	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}
	
		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}
	
		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}
	
		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}
	
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }
	
	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }
	
	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = locked || options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject, noValue ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,
	
						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		if ( chainable ) {
			return elems;
		}
	
		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}
	
		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	
	
	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;
	
	// Used by camelCase as callback to replace()
	function fcamelCase( all, letter ) {
		return letter.toUpperCase();
	}
	
	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}
	
		if ( data === "false" ) {
			return false;
		}
	
		if ( data === "null" ) {
			return null;
		}
	
		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}
	
		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}
	
		return data;
	}
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			while ( maxIterations-- ) {
	
				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;
	
			}
	
			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );
	
	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;
	
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );
	
		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );
	
		} else {
			ret = [];
		}
	
		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}
	
		return ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( toType( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;
	
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			if ( delegateCount &&
	
				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&
	
				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}
	
				if ( button & 2 ) {
					return 3;
				}
	
				if ( button & 4 ) {
					return 2;
				}
	
				return 0;
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		/* eslint-disable max-len */
	
		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	
		/* eslint-enable */
	
		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;
	
			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;
	
			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;
	
			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			div.style.position = "absolute";
			scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}
	
		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
	
			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;
	
		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}
	
			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {
	
				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
	
				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
	
			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {
	
				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {
	
			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5
			) );
		}
	
		return delta;
	}
	
	function getWidthOrHeight( elem, dimension, extra ) {
	
		// Start with computed style
		var styles = getStyles( elem ),
			val = curCSS( elem, dimension, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox;
	
		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}
	
		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = valueIsBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ dimension ] );
	
		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		if ( val === "auto" ||
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {
	
			val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];
	
			// offsetWidth/offsetHeight provide border-box values
			valueIsBorderBox = true;
		}
	
		// Normalize "" and auto
		val = parseFloat( val ) || 0;
	
		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,
	
				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;
	
			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );
	
			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
	
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, dimension, extra );
							} ) :
							getWidthOrHeight( elem, dimension, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),
					isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra && boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					);
	
				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && support.scrollboxSize() === styles.position ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}
	
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}
	
				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}
	
				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		return animation;
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;
	
		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];
	
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = Date.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}
	
		inProgress = true;
		schedule();
	};
	
	jQuery.fx.stop = function() {
		inProgress = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
	
				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}
	
					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}
	
					return -1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}
	
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			classes = classesToArray( value );
	
			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			classes = classesToArray( value );
	
			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );
	
			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( isValidValue ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}
	
					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}
	
				return;
			}
	
			valueIsFunction = isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;
	
					if ( index < 0 ) {
						i = max;
	
					} else {
						i = one ? index : 0;
					}
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	support.focusin = "onfocusin" in window;
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = lastElement = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
	
						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}
	
						elem[ type ]();
	
						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}
	
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = Date.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( Array.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && toType( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				if ( val == null ) {
					return null;
				}
	
				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}
	
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
	
			if ( isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
	
		// offset() relates an element's border box to the document origin
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var rect, win,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},
	
		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();
	
			} else {
				offset = this.offset();
	
				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {
	
					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {
	
					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
	
				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;
	
		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}
	
		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}
	
		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};
	
		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
		return proxy;
	};
	
	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;
	
	jQuery.now = Date.now;
	
	jQuery.isNumeric = function( obj ) {
	
		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&
	
			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	return jQuery;
	} );


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var validation_1 = __webpack_require__(61);
	var models_1 = __webpack_require__(59);
	var app_config_1 = __webpack_require__(60);
	var logger_1 = __webpack_require__(65);
	var $ = __webpack_require__(68);
	var SnConnector = (function () {
	    function SnConnector(appService) {
	        this.appService = appService;
	        /* Variable declaration start */
	        /* Private variable start */
	        this.logger = new logger_1.CustomLogger('ServiceNowMethod');
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.currentUISelectedIncident = null;
	        this.user = new models_1.UserCredentials();
	        this.v = new validation_1.Validation();
	        this.logger.Info('ServiceNow method inititalize ...');
	    }
	    SnConnector.prototype.OnInit = function (clearStorage) {
	        this.logger.Info('OnInit clearStorage : ' + clearStorage);
	        //add eventlistener for message event from top frame
	        if (window.addEventListener) {
	            window.addEventListener("message", topFrameListener);
	        }
	        var snComp = this;
	        function topFrameListener(event) {
	            console.log("SNCONNECTOR - EVENT FROM RECEIVED");
	            if (event.origin.indexOf(app_config_1.default.ServiceNowDomainUrl) > -1) {
	                console.log(event.data);
	                var type = event.data.type;
	                if (type === "LOGIN") {
	                    console.log(event.data.username);
	                    snComp.user.username = event.data.username;
	                    snComp.user.password = event.data.password;
	                    snComp.user.stationPhoneNumber = event.data.extension;
	                    snComp.user.businessUnitId = event.data.buid;
	                    snComp.evnt.Broadcast("ToggleLoader", "SHOW");
	                    snComp.appService.AgentLogin(snComp.user, function (msg) {
	                        console.log('On Click Login : ' + snComp.user);
	                        console.log(msg);
	                    });
	                }
	                else if (type === "UPDATE_BUID") {
	                }
	                else if (type === "CLICK_CALL") {
	                    var callerid = String(event.data.data);
	                    snComp.makeOutboundCall(callerid);
	                }
	                else if (type === "CALLER_INCIDENTS") {
	                    var incidents = event.data.data;
	                    snComp.updateIncidents(incidents);
	                }
	                else if (type === "UI_INCIDENT_SELECT") {
	                    snComp.currentUISelectedIncident = event.data.data;
	                    snComp.updateWrapupIncident();
	                }
	            }
	            else {
	                return;
	            }
	        }
	    };
	    SnConnector.prototype.makeOutboundCall = function (callerid) {
	        console.log("Outbound Number : " + callerid);
	        this.appService.MakeCall(callerid);
	    };
	    SnConnector.prototype.updateIncidents = function (incidents) {
	        var incFields = new Array();
	        $.each(incidents.result, function (i, inc) {
	            var field = new models_1.SNIncidentField();
	            field.Number = inc.number;
	            field.Sysid = inc.sys_id;
	            field.CreatedOn = inc.sys_created_on;
	            field.CreatedBy = inc.sys_created_by;
	            incFields.push(field);
	        });
	        var incident = new models_1.SNIncident();
	        incident.ResultFld = incFields;
	        this.appService.incident = incident;
	        //make incident used to initiate outbound call as selected in wrapup ui
	        if (this.appService.Call != null && this.appService.Call.CallType == 'OUT' && this.currentUISelectedIncident != null) {
	            this.updateWrapupIncident();
	        }
	    };
	    SnConnector.prototype.updateWrapupIncident = function () {
	        var _this = this;
	        console.log("updateWrapupIncident :: ");
	        console.log(this.appService.Call);
	        if (this.appService.Call != null && this.appService.Call.State == "Active") {
	            if (this.appService.incident == null) {
	                var incFields = new Array();
	                var incident = new models_1.SNIncident();
	                incident.ResultFld = incFields;
	                this.appService.incident = incident;
	            }
	            var incidentLst = this.appService.incident.ResultFld;
	            var openedIncident = incidentLst.find(function (i) { return i.Number === _this.currentUISelectedIncident.number; });
	            console.log("updateWrapupIncident - openedIncident :: ");
	            console.log(openedIncident);
	            if (openedIncident == null) {
	                var incidentFld = new models_1.SNIncidentField();
	                incidentFld.Number = this.currentUISelectedIncident.number;
	                incidentFld.Sysid = this.currentUISelectedIncident.sysid;
	                incidentLst.push(incidentFld);
	            }
	            this.appService.currentSelectedIncident = this.currentUISelectedIncident;
	            this.evnt.Broadcast(this.appService.TopicList.WrapupIncidentSelect, this.currentUISelectedIncident);
	        }
	    };
	    SnConnector.prototype.showInboundScreen = function (caller_id) {
	        this.logger.Info('Show Inbound AgentScreen : ' + caller_id);
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";
	        parent.postMessage("SHOW_INBOUND|" + caller_id + "|" + newForm, "*");
	    };
	    SnConnector.prototype.showOutboundScreen = function (caller_id) {
	        this.logger.Info('Show Outbound AgentScreen : ' + caller_id);
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";
	        parent.postMessage("SHOW_OUTBOUND|" + caller_id + "|" + newForm, "*");
	    };
	    SnConnector.prototype.openIncident = function (incidentId) {
	        console.log('SN METHOD : Open Incident : ' + incidentId);
	        parent.postMessage("OPEN_INCIDENT|" + incidentId + "|" + app_config_1.default.hideAgentDesktopAfterIncidentSelect, "*");
	    };
	    SnConnector.prototype.hideAgentScreen = function () {
	        this.logger.Info('SN METHOD : Hide AgentScreen');
	        parent.postMessage("HIDE_FRAME", "*");
	    };
	    SnConnector.prototype.saveLoginDetails = function (user) {
	        console.log('SN METHOD : saveLoginDetails : ', user);
	        parent.postMessage("SAVE_LOGIN|" + JSON.stringify(user), "*");
	    };
	    SnConnector.prototype.processCallResult = function (call) {
	        if (call != null) {
	            if (call.IsOutbound == false && call.State == 'Incoming') {
	                this.logger.Debug("Show Inbound Screen for : " + call.From);
	                // var incidentNumber = call.CallVariables["callVariable1"];
	                // this.logger.Debug("Show Inbound Screen Incident Number : " + incidentNumber);
	                // this.showInboundScreen(call.From+"|"+incidentNumber);
	                var searchText = call.From + "|true|"; //Second field to know whether search is by ANI or not
	                var searchField = app_config_1.default.searchConfig[call.DNIS];
	                if (this.v.IsNotNullOrUndefinedString(searchField)) {
	                    searchText = call.From + "|false|" + call.CallVariables[searchField];
	                }
	                this.showInboundScreen(searchText);
	            }
	            else if (call.State == 'Active' && app_config_1.default.hideAgentDesktopAfterCall == true) {
	                this.logger.Debug("Hide Agent Screen : ");
	                this.hideAgentScreen();
	            }
	        }
	    };
	    return SnConnector;
	}());
	exports.SnConnector = SnConnector;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var validation_1 = __webpack_require__(61);
	var models_1 = __webpack_require__(59);
	var app_config_1 = __webpack_require__(60);
	var logger_1 = __webpack_require__(65);
	var $ = __webpack_require__(68);
	var SnConnectorInline = (function () {
	    function SnConnectorInline(appService) {
	        this.appService = appService;
	        /* Variable declaration start */
	        /* Private variable start */
	        this.logger = new logger_1.CustomLogger('ServiceNowMethod');
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.currentUISelectedIncident = null;
	        this.user = new models_1.UserCredentials();
	        this.v = new validation_1.Validation();
	        this.frameWidth = 300;
	        this.frameHeight = 800;
	        this.frameBottom = 10;
	        this.frameRight = 10;
	        this.isClickToCall = false;
	        this.config = {
	            height: this.frameHeight,
	            width: this.frameWidth
	        };
	        this.logger.Info('ServiceNow Inline method inititalize ...');
	    }
	    SnConnectorInline.prototype.OnInit = function (clearStorage) {
	        var _this = this;
	        this.logger.Info('OnInit clearStorage : ' + clearStorage);
	        openFrameAPI.init(this.config, function (snConfig) {
	            _this.initSuccess(snConfig);
	        }, this.initFailure);
	        if (window.addEventListener) {
	            window.addEventListener("DOMContentLoaded", function () {
	                _this.updateFrameUI();
	            }, false);
	        }
	        else if (window.attachEvent) {
	            window.attachEvent("DOMContentLoaded", function () {
	                _this.updateFrameUI();
	            });
	        }
	        else {
	            window["DOMContentLoaded"] = function () {
	                _this.updateFrameUI();
	            };
	        }
	        // //add eventlistener for message event from top frame
	        // if (window.addEventListener) {
	        //     window.addEventListener("message", topFrameListener);
	        // }
	        // var snComp = this;
	        // function topFrameListener(event) {
	        //     console.log("SNCONNECTOR - EVENT FROM RECEIVED")
	        //     if (event.origin.indexOf(AppConfig.ServiceNowDomainUrl) > -1) {
	        //         console.log(event.data);
	        //         var type = event.data.type;
	        //         if(type === "LOGIN"){
	        //             console.log(event.data.username);
	        //             snComp.user.username = event.data.username;
	        //             snComp.user.password = event.data.password;
	        //             snComp.user.stationPhoneNumber = event.data.extension;
	        //             snComp.user.businessUnitId = event.data.buid;
	        //             snComp.evnt.Broadcast("ToggleLoader", "SHOW");
	        //             snComp.appService.AgentLogin(snComp.user, (msg: SystemMessage) => {
	        //                 console.log('On Click Login : ' + snComp.user);
	        //                 console.log(msg);
	        //             });
	        //         }else if(type === "UPDATE_BUID"){
	        //             // snComp.appService.icm.businessUnitId = event.data.buid;
	        //         }else if(type === "CLICK_CALL"){
	        //             var callerid = String(event.data.data);
	        //             snComp.makeOutboundCall(callerid);
	        //         }else if(type === "CALLER_INCIDENTS"){
	        //             var incidents = event.data.data;
	        //             snComp.updateIncidents(incidents);
	        //         }else if(type === "UI_INCIDENT_SELECT"){
	        //             snComp.currentUISelectedIncident = event.data.data;                    
	        //             snComp.updateWrapupIncident();
	        //         }
	        //     } else {
	        //         return;
	        //     }
	        // }
	    };
	    SnConnectorInline.prototype.handleCommunicationEvent = function (context) {
	        console.log("Communication from Topframe", context);
	        if (context.type === "CLICK_CALL") {
	            openFrameAPI.show();
	            this.fetchCallerIncidents(context.sys_id);
	            this.isClickToCall = true;
	            var callerid = String(context.data);
	            this.makeOutboundCall(callerid);
	        }
	        else if (context.type === "UI_INCIDENT_SELECT") {
	            this.currentUISelectedIncident = context.data;
	            this.updateWrapupIncident();
	        }
	    };
	    SnConnectorInline.prototype.initSuccess = function (snConfig) {
	        var _this = this;
	        console.log("openframe configuration", snConfig);
	        this.fetchAppConfig();
	        //register for communication event from TopFrame
	        openFrameAPI.subscribe(openFrameAPI.EVENTS.COMMUNICATION_EVENT, function (context) {
	            _this.handleCommunicationEvent(context);
	        });
	    };
	    SnConnectorInline.prototype.updateFrameUI = function () {
	        openFrameAPI.setTitleIcon({ imageURL: '/title_logo.png', imageTitle: 'Acqueon Lynx' });
	        var openframe = window.top.document.getElementById('mainFrame');
	        openframe.setAttribute("style", "right:" + this.frameRight + "px;bottom:" + this.frameBottom + "px;width:" + this.frameWidth + "px");
	        var headerFrame = window.top.document.getElementById('headerMainFrame');
	        headerFrame.setAttribute("style", "height:35px;background-color:#303a46");
	        window.top.document.getElementById('headerMainFrame').getElementsByClassName('callInfo')[0].setAttribute("style", "margin-top: 5px");
	        window.top.document.getElementById('headerMainFrame').getElementsByClassName('closeIcon')[0].setAttribute("style", "background-size: 12px");
	    };
	    SnConnectorInline.prototype.initFailure = function (error) {
	        console.log("OpenFrame init failed..", error);
	    };
	    SnConnectorInline.prototype.fetchLynxCredentials = function () {
	        console.log("fetching lynx details.....");
	        var self = this;
	        $.ajax({
	            url: '/api/' + window['app_scope'] + '/lynxservice/getcredentials',
	            type: 'GET',
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("Result in fetchLynxCredentials : ");
	                console.log(res);
	                if (self.v.IsNotNullOrUndefinedOjbect(res) && self.v.IsNotNullOrUndefinedString(res.result.username))
	                    self.autoLoginUser(res.result);
	            }
	        });
	    };
	    SnConnectorInline.prototype.fetchAppConfig = function () {
	        console.log("fetching lynx details.....");
	        var self = this;
	        $.ajax({
	            url: '/api/' + window['app_scope'] + '/lynxservice/getappconfig',
	            type: 'GET',
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("Result in fetchAppConfig : ");
	                console.log(res);
	                if (self.v.IsNotNullOrUndefinedOjbect(res)) {
	                    app_config_1.default.tokenUri = res.result.token_uri;
	                    app_config_1.default.applicationName = res.result.appname;
	                    app_config_1.default.vendorName = res.result.vendorname;
	                    app_config_1.default.searchConfig = JSON.parse(res.result.dnissearch);
	                    self.fetchLynxCredentials();
	                }
	            }
	        });
	    };
	    SnConnectorInline.prototype.autoLoginUser = function (data) {
	        var _this = this;
	        this.user.username = data.username;
	        this.user.password = data.password;
	        this.user.stationPhoneNumber = data.extension;
	        this.user.businessUnitId = data.buid;
	        this.evnt.Broadcast("ToggleLoader", "SHOW");
	        this.appService.AgentLogin(this.user, function (msg) {
	            console.log('On Click Login : ' + _this.user);
	            console.log(msg);
	        });
	    };
	    SnConnectorInline.prototype.updateLynxCredentials = function (user) {
	        console.log("updating lynx credentials.....");
	        var self = this;
	        $.ajax({
	            url: "/api/" + window['app_scope'] + "/lynxservice/savecredentials",
	            type: 'POST',
	            contentType: 'application/json',
	            data: user,
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("UpdateLynxCredentials : result : " + JSON.stringify(res));
	            }
	        });
	    };
	    SnConnectorInline.prototype.getUserId = function (phone, isSearchByANI, incidentNumber, newFormURL) {
	        var self = this;
	        $.ajax({
	            url: "/api/now/table/sys_user?sysparm_query=phone=" + phone + "^ORhome_phone=" + phone + "^NQmobile_phone=" + phone + "&sysparm_fields=sys_id",
	            type: 'GET',
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("Result in getUserId : " + JSON.stringify(res));
	                if (res.result.length > 0) {
	                    var caller_sys_id = res.result[0].sys_id;
	                    if (isSearchByANI == true && caller_sys_id != null) {
	                        console.log("Search by ANI : " + phone);
	                        openFrameAPI.openServiceNowForm({ entity: 'sys_user', query: 'sysparm_query=phone=' + phone + '^ORhome_phone=' + phone + '^NQmobile_phone=' + phone + '&sysparm_view=ITIL' });
	                    }
	                    self.fetchCallerIncidents(caller_sys_id);
	                }
	                else if (res.result.length == 0 && isSearchByANI == true) {
	                    openFrameAPI.openCustomURL(newFormURL);
	                }
	            }
	        });
	        if (isSearchByANI == false) {
	            console.log("Search by Incident Number : " + incidentNumber);
	            if (incidentNumber.length > 0) {
	                openFrameAPI.openServiceNowForm({ entity: 'incident', query: 'sysparm_query=number=INC' + incidentNumber + '&sysparm_view=ITIL' });
	            }
	            else {
	                openFrameAPI.openCustomURL("incident.do");
	            }
	        }
	    };
	    SnConnectorInline.prototype.fetchCallerIncidents = function (caller_sys_id) {
	        var self = this;
	        $.ajax({
	            url: '/api/now/table/incident?sysparm_query=caller_id=' + caller_sys_id + '^active=true^ORDERBYDESCsys_created_on&sysparm_fields=sys_id,number,sys_created_on,sys_created_by',
	            type: 'GET',
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("Result in fetchCallerIncidents : ");
	                console.log(res);
	                self.updateIncidents(res);
	            }
	        });
	    };
	    SnConnectorInline.prototype.updateActivityObject = function (incidentId, dataObj) {
	        $.ajax({
	            url: "/api/now/table/incident/" + incidentId,
	            type: 'PUT',
	            contentType: 'application/json',
	            data: dataObj,
	            headers: { 'Accept': 'application/json', 'X-UserToken': window['g_ck'] },
	            success: function (res) {
	                console.log("UpdateActivity : result : " + JSON.stringify(res));
	            }
	        });
	    };
	    SnConnectorInline.prototype.makeOutboundCall = function (callerid) {
	        console.log("Outbound Number : " + callerid);
	        this.appService.MakeCall(callerid);
	    };
	    SnConnectorInline.prototype.updateIncidents = function (incidents) {
	        var incFields = new Array();
	        incidents.result.forEach(function (inc) {
	            var field = new models_1.SNIncidentField();
	            field.Number = inc.number;
	            field.Sysid = inc.sys_id;
	            field.CreatedOn = inc.sys_created_on;
	            field.CreatedBy = inc.sys_created_by;
	            incFields.push(field);
	        });
	        var incident = new models_1.SNIncident();
	        incident.ResultFld = incFields;
	        this.appService.incident = incident;
	        //make incident used to initiate outbound call as selected in wrapup ui
	        if (this.appService.Call != null && this.appService.Call.CallType == 'OUT' && this.currentUISelectedIncident != null) {
	            this.updateWrapupIncident();
	        }
	    };
	    SnConnectorInline.prototype.updateWrapupIncident = function () {
	        var _this = this;
	        console.log("updateWrapupIncident :: ");
	        console.log(this.appService.Call);
	        if (this.appService.Call != null && this.appService.Call.State == "Active") {
	            if (this.appService.incident == null) {
	                var incFields = new Array();
	                var incident = new models_1.SNIncident();
	                incident.ResultFld = incFields;
	                this.appService.incident = incident;
	            }
	            var incidentLst = this.appService.incident.ResultFld;
	            var openedIncident = incidentLst.find(function (i) { return i.Number === _this.currentUISelectedIncident.number; });
	            console.log("updateWrapupIncident - openedIncident :: ");
	            console.log(openedIncident);
	            if (openedIncident == null) {
	                var incidentFld = new models_1.SNIncidentField();
	                incidentFld.Number = this.currentUISelectedIncident.number;
	                incidentFld.Sysid = this.currentUISelectedIncident.sysid;
	                incidentLst.push(incidentFld);
	            }
	            this.appService.currentSelectedIncident = this.currentUISelectedIncident;
	            this.evnt.Broadcast(this.appService.TopicList.WrapupIncidentSelect, this.currentUISelectedIncident);
	        }
	    };
	    SnConnectorInline.prototype.showInboundScreen = function (searchObj) {
	        this.logger.Info('Show Inbound AgentScreen : ' + searchObj);
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";
	        openFrameAPI.show();
	        var inCallerId = searchObj.caller_id;
	        var isSearchByANI = searchObj.search_by_ani;
	        var incidentNumber = searchObj.incident_number;
	        this.getUserId(inCallerId, isSearchByANI, incidentNumber, newForm);
	    };
	    SnConnectorInline.prototype.showOutboundScreen = function (caller_id) {
	        this.logger.Info('Show Outbound AgentScreen : ' + caller_id);
	        var newForm = (app_config_1.default.openUserPageForNewUser) ? "sys_user.do" : "incident.do";
	        openFrameAPI.show();
	        if (this.isClickToCall == false)
	            this.getUserId(caller_id, true, "", newForm);
	        this.isClickToCall = false;
	    };
	    SnConnectorInline.prototype.openIncident = function (incidentId) {
	        console.log('SN METHOD : Open Incident : ' + incidentId);
	        openFrameAPI.openServiceNowForm({ entity: 'incident', query: 'sys_id=' + incidentId });
	        if (app_config_1.default.hideAgentDesktopAfterIncidentSelect == "true")
	            openFrameAPI.hide();
	    };
	    SnConnectorInline.prototype.hideAgentScreen = function () {
	        this.logger.Info('SN METHOD : Hide AgentScreen');
	        openFrameAPI.hide();
	    };
	    SnConnectorInline.prototype.updateActivity = function (selectedIncident, dataObj) {
	        this.logger.Info('SN METHOD : Update Activity');
	        this.updateActivityObject(selectedIncident, dataObj);
	    };
	    SnConnectorInline.prototype.saveLoginDetails = function (user) {
	        console.log('SN METHOD : saveLoginDetails : ', user);
	        // parent.postMessage("SAVE_LOGIN|"+JSON.stringify(user), "*");
	        this.updateLynxCredentials(JSON.stringify(user));
	    };
	    SnConnectorInline.prototype.processCallResult = function (call) {
	        if (call != null) {
	            if (call.IsOutbound == false && call.State == 'Incoming') {
	                this.logger.Debug("Show Inbound Screen for : " + call.From);
	                var searchObj = {
	                    "caller_id": call.From,
	                    "search_by_ani": true //Second field to know whether search is by ANI or not
	                };
	                var searchField = app_config_1.default.searchConfig[call.DNIS];
	                if (this.v.IsNotNullOrUndefinedString(searchField)) {
	                    searchObj.search_by_ani = false;
	                    searchObj["incident_number"] = call.CallVariables[searchField];
	                }
	                this.showInboundScreen(searchObj);
	            }
	            else if (call.State == 'Active' && app_config_1.default.hideAgentDesktopAfterCall == true) {
	                this.logger.Debug("Hide Agent Screen : ");
	                this.hideAgentScreen();
	            }
	        }
	    };
	    return SnConnectorInline;
	}());
	exports.SnConnectorInline = SnConnectorInline;


/***/ }),
/* 71 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"skin-lightning\"><router-outlet></router-outlet></div>";

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var models_1 = __webpack_require__(59);
	var validation_1 = __webpack_require__(61);
	var router_1 = __webpack_require__(29);
	var LoginComponent = (function () {
	    function LoginComponent(appService, zone, router) {
	        var _this = this;
	        this.appService = appService;
	        this.zone = zone;
	        this.router = router;
	        this.user = new models_1.UserCredentials();
	        this.rememberLogin = false;
	        this.isError = false;
	        this.showLoader = false;
	        this.errorMessage = '';
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.evntLst = new Array();
	        console.log('LoginComponent constructor loaded ..');
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.LoginResponse, function (type, data) {
	            _this.zone.run(function () {
	                _this.onMessageReceived(type, data);
	            });
	        }));
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.SystemMessage, function (type, data) {
	            _this.zone.run(function () {
	                _this.onMessageReceived(type, data);
	            });
	        }));
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (type, data) {
	            console.log('LoginComponent State changed -');
	            _this.zone.run(function () {
	                if (data.State === 'LOGOUT') {
	                    _this.showLoader = false;
	                }
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent("ToggleLoader", function (type, data) {
	            console.log('ToggleLoader : ', data);
	            _this.zone.run(function () {
	                if (data === 'SHOW') {
	                    _this.showLoader = true;
	                }
	                else {
	                    _this.showLoader = false;
	                }
	            });
	        }));
	    }
	    LoginComponent.prototype.OnLogin = function () {
	        console.log('Login component. OnLogin');
	        this.errorMessage = '';
	        this.showLoader = true;
	        this.appService.AgentLogin(this.user, function (msg) {
	            console.log(msg);
	        });
	    };
	    LoginComponent.prototype.onMessageReceived = function (topic, data) {
	        if (topic === this.appService.TopicList.LoginResponse) {
	            console.log('LoginComponent onMessageReceived -', this.appService.LoginResponse.Msg);
	            if (this.appService.LoginResponse.Level !== 2) {
	                this.showLoader = false;
	                this.errorMessage = this.appService.LoginResponse.Msg;
	                if (this.appService.LoginResponse.Type == 0) {
	                    this.errorMessage = 'Invalid Agent ID or Password. Please try again.';
	                }
	            }
	            else {
	                if (this.rememberLogin) {
	                    this.rememberLogin = false;
	                    this.appService.sn.saveLoginDetails(this.user);
	                }
	            }
	        }
	        else if (topic === this.appService.TopicList.SystemMessage) {
	            this.errorMessage = data.Msg;
	        }
	    };
	    LoginComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('LoginComponent Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    LoginComponent.prototype.onKeyDownEvent = function (key) {
	        var _this = this;
	        if (key === 13) {
	            this.zone.run(function () {
	                _this.OnLogin();
	            });
	        }
	        else if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||
	            key === 46 || key === 110 || key === 190 || key === 187 || key === 107 || key === 61) || (key >= 48 && key <= 57) || (key >= 96 && key <= 106)) {
	            return true;
	        }
	        return false;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', (typeof (_a = typeof models_1.UserCredentials !== 'undefined' && models_1.UserCredentials) === 'function' && _a) || Object)
	    ], LoginComponent.prototype, "user", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], LoginComponent.prototype, "rememberLogin", void 0);
	    LoginComponent = __decorate([
	        core_1.Component({
	            selector: 'sf-login',
	            template: __webpack_require__(73),
	            styles: [__webpack_require__(74)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_b = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object])
	    ], LoginComponent);
	    return LoginComponent;
	    var _a, _b, _c, _d;
	}());
	exports.LoginComponent = LoginComponent;


/***/ }),
/* 73 */
/***/ (function(module, exports) {

	module.exports = "\r\n<div class=\"jumbotron sf-wrap sf-login login-com\">   \r\n    <div class=\"login-header\"></div> \r\n    <div class=\"login-header-text\">\r\n        LYNX DESKTOP\r\n    </div> \r\n    <form class=\"form-signin\">\r\n        <div class=\"sf-banner clearfix\">\r\n        </div>\r\n        <div class=\"panel\">           \r\n            <div class=\"form-group\">                               \r\n                <label for=\"user-name\"><span class=\"icon-user\"></span></label>\r\n                <input tabindex=\"1\" type=\"text\" [(ngModel)]=\"user.username\" placeholder=\"Agent ID\" name=\"username\" id=\"user-name\" (keyup.enter)=\"OnLogin()\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\"><span class=\"icon-lock\"></span></label>\r\n                <input tabindex=\"2\" [(ngModel)]=\"user.password\" placeholder=\"Password\" name=\"password\" type=\"password\" id=\"password\" (keyup.enter)=\"OnLogin()\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"extn\"><span class=\"icon-extension\"></span></label>\r\n                <input tabindex=\"3\" type=\"text\" [(ngModel)]=\"user.stationPhoneNumber\" name=\"stationPhoneNumber\" placeholder=\"Station PhoneNumber\" id=\"extn\"/>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"buid\"><span class=\"icon-business-field\"></span></label>\r\n                <input tabindex=\"4\" type=\"text\" [(ngModel)]=\"user.businessUnitId\" name=\"businessUnitId\" placeholder=\"Business unit ID\" id=\"buid\" />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <input tabindex=\"5\" type=\"checkbox\" [(ngModel)]=\"rememberLogin\" name=\"rememberLogin\" placeholder=\"Remember Me\" id=\"rememberme\"/> Remember Me\r\n            </div>\r\n\r\n            <button tabindex=\"4\" class=\"btn btn-mini btn-block login-btn\" (click)=\"OnLogin()\" type=\"submit\">Sign in</button>\r\n            <!-- <p class=\"login-caption\">ServiceNow connector for InContact</p> -->\r\n            <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\r\n                <label>{{errorMessage}}</label>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <span *ngIf=\"showLoader\" style=\"display:block;\" class=\"pre-loader\"></span>   \r\n</div>\r\n\r\n";

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/* .sf-login {\r\n    border: 1px solid $prime1;\r\n    background: $loginbg $prime1;\r\n    height: 100%;\r\n    //height: 550px; //Prabha Changed\r\n    // @mixin login-boxes($path) {\r\n    //   content: \"\";\r\n    //   display: inline-block;\r\n    //   width: 11px;\r\n    //   height: 14px;\r\n    //   background: url($path) no-repeat;\r\n    // }\r\n    // .icon-user:before{@include login-boxes($userIcon)}\r\n    // .icon-lock:before{@include login-boxes($PasswordIcon)}\r\n    // .icon-extn:before{@include login-boxes($extensionIcon)}\r\n    h4 {\r\n        line-height: 36px;\r\n        text-align: center;\r\n        &:before {\r\n            content: \"\";\r\n            display: none;\r\n            float: left;\r\n            width: 25px;\r\n            height: 25px;\r\n            margin: 8px 10px 0;\r\n            // background: url('../ui/images/serv-icon.png');\r\n        }\r\n    }\r\n    .sf-banner {\r\n        text-align: center;\r\n        padding: 5px;\r\n        background-color: transparent;\r\n        .login-logo {\r\n            display: block;\r\n            text-align: center;\r\n            &:before {\r\n                content: \"\";\r\n                width: 100%;\r\n                height: 76px;\r\n                background: $sflogo;\r\n                display: block;\r\n            }\r\n        }\r\n    }\r\n    .form-group {\r\n        position: relative;\r\n        padding-bottom: 5px;\r\n        margin-bottom: 0;\r\n        input[type=\"text\"],\r\n        input[type=\"password\"] {\r\n            width: 100%;\r\n            border: 0px;\r\n            height: 40px;\r\n            padding-left: 30px;\r\n            border-bottom: 1px solid $whiteShadebright;\r\n            background-color: transparent;\r\n            color: #333;\r\n            transition: border-color ease-in-out 0.3s;\r\n            &:focus {\r\n                border-bottom-color: $white;\r\n                outline: none;\r\n            }\r\n            &::-webkit-input-placeholder {\r\n                color: #333;\r\n            }\r\n            &::-moz-placeholder {\r\n                color: #333;\r\n            }\r\n            &:-ms-input-placeholder {\r\n                color: #333;\r\n            }\r\n            &:-moz-placeholder {\r\n                color: #333;\r\n            }\r\n        }\r\n        label {\r\n            position: absolute;\r\n            left: 5px;\r\n            top: 15px;\r\n            color: #333;\r\n        }\r\n    }\r\n    .login-btn {\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        color: #fff;\r\n        font-size: 16px;\r\n        text-transform: uppercase;\r\n        border-radius: 6px;\r\n        border: 0px;\r\n        padding: 8px;\r\n        width: 100%;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        text-align: center;\r\n        margin-top: 10px;\r\n        outline: none;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n.sf-wrap.sf-login .panel {\r\n    margin-top: 130px;\r\n    background-color: transparent;\r\n    border: 0px;\r\n    max-height: inherit;\r\n    overflow: inherit;\r\n}\r\n\r\n.login-footer {\r\n    position: absolute;\r\n    bottom: 0px;\r\n    left: 0;\r\n    right: 0;\r\n    text-align: center;\r\n    font-size: 11px;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    height: 26px;\r\n    line-height: 26px;\r\n    color: #fff;\r\n}\r\n\r\n.alert {\r\n    margin: 5px 0;\r\n    padding: 5px;\r\n    max-height: 135px;\r\n    overflow: auto;\r\n    background-color: #fff;\r\n    label {\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n.login-caption {\r\n    text-align: center;\r\n    color: #fff;\r\n    padding: 10px 0 0;\r\n}\r\n\r\n*/\n.sf-wrap.sf-login .panel {\n  background-color: transparent;\n  border: 0px;\n  max-height: inherit;\n  overflow: inherit; }\n\n.alert {\n  margin: 5px 0;\n  padding: 5px;\n  max-height: 135px;\n  font-size: 14px;\n  overflow: auto;\n  background-color: #fff; }\n  .alert label {\n    margin: 0; }\n\n.login-caption {\n  text-align: center;\n  color: #333;\n  padding: 20px 0 0;\n  font-weight: 600;\n  font-size: 13px; }\n\n.jumbotron {\n  padding: 0 !important; }\n\n.btn.active.focus, .btn.active:focus, .btn.focus, .btn:active.focus, .btn:active:focus, .btn:focus {\n  outline: none; }\n\n/** Lightning Theme **/\n.skin-lightning .sf-login {\n  background: none;\n  height: 100%;\n  font-size: 13px;\n  font-weight: 500; }\n  .skin-lightning .sf-login h4 {\n    line-height: 36px;\n    text-align: center; }\n    .skin-lightning .sf-login h4:before {\n      content: \"\";\n      display: none;\n      float: left;\n      width: 25px;\n      height: 25px;\n      margin: 8px 10px 0; }\n  .skin-lightning .sf-login .login-header {\n    height: 100px;\n    background: url(\"/acqueon-logo-sfdc-login.png\") no-repeat center; }\n  .skin-lightning .sf-login .login-header-text {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: 13px;\n    margin-bottom: 15px; }\n  .skin-lightning .sf-login .sf-banner {\n    text-align: center;\n    padding: 5px;\n    background-color: transparent; }\n    .skin-lightning .sf-login .sf-banner .login-logo {\n      display: block;\n      text-align: center; }\n      .skin-lightning .sf-login .sf-banner .login-logo:before {\n        content: \"\";\n        width: 100%;\n        height: 76px;\n        background: url(/acquon-logo.png) no-repeat center;\n        display: block; }\n  .skin-lightning .sf-login .form-group {\n    position: relative;\n    margin-bottom: 20; }\n    .skin-lightning .sf-login .form-group input[type=\"text\"],\n    .skin-lightning .sf-login .form-group input[type=\"password\"] {\n      width: 100%;\n      border: 0px;\n      height: 24px;\n      padding-left: 30px;\n      border-bottom: 1px solid #a5a5a5;\n      background-color: transparent;\n      color: #333;\n      transition: border-color ease-in-out 0.3s; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:focus,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:focus {\n        outline: none; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]::-webkit-input-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]::-webkit-input-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]::-moz-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]::-moz-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:-ms-input-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:-ms-input-placeholder {\n        color: #333; }\n      .skin-lightning .sf-login .form-group input[type=\"text\"]:-moz-placeholder,\n      .skin-lightning .sf-login .form-group input[type=\"password\"]:-moz-placeholder {\n        color: #333; }\n    .skin-lightning .sf-login .form-group label {\n      position: absolute;\n      left: 5px;\n      top: 5px;\n      color: #00a1e0;\n      font-size: 13px; }\n    .skin-lightning .sf-login .form-group ::-moz-placeholder,\n    .skin-lightning .sf-login .form-group :-ms-input-placeholder,\n    .skin-lightning .sf-login .form-group ::-ms-input-placeholder {\n      font-weight: 600; }\n  .skin-lightning .sf-login .login-btn {\n    background-color: #01549b;\n    color: #fff;\n    font-size: 15px;\n    text-transform: uppercase;\n    border-radius: 6px;\n    border: 0px;\n    padding: 6px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n    text-align: center;\n    margin-top: 10px;\n    outline: none; }\n  .skin-lightning .sf-login .icon-user:before {\n    color: #0072d2; }\n  .skin-lightning .sf-login .icon-lock:before {\n    color: #0072d2; }\n  .skin-lightning .sf-login .icon-extension:before {\n    color: #0072d2; }\n  .skin-lightning .sf-login .icon-business-field:before {\n    color: #0072d2; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-login {\n  border: 1px solid #f99b41;\n  background: linear-gradient(orange, #FCBB75, orange);\n  height: 100%;\n  font-size: 13px;\n  font-weight: 500; }\n  .skin-classic .sf-login h4 {\n    line-height: 36px;\n    text-align: center; }\n    .skin-classic .sf-login h4:before {\n      content: \"\";\n      display: none;\n      float: left;\n      width: 25px;\n      height: 25px;\n      margin: 8px 10px 0; }\n  .skin-classic .sf-login .login-header {\n    height: 100px;\n    background: url(\"/acqueon-logo-sfdc-login.png\") no-repeat center; }\n  .skin-classic .sf-login .login-header-text {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: 13px;\n    margin-bottom: 15px; }\n  .skin-classic .sf-login .sf-banner {\n    text-align: center;\n    padding: 5px;\n    background-color: transparent; }\n    .skin-classic .sf-login .sf-banner .login-logo {\n      display: block;\n      text-align: center; }\n      .skin-classic .sf-login .sf-banner .login-logo:before {\n        content: \"\";\n        width: 100%;\n        height: 76px;\n        background: url(/acquon-logo.png) no-repeat center;\n        display: block; }\n  .skin-classic .sf-login .form-group {\n    position: relative;\n    margin-bottom: 20; }\n    .skin-classic .sf-login .form-group input[type=\"text\"],\n    .skin-classic .sf-login .form-group input[type=\"password\"] {\n      width: 100%;\n      border: 0px;\n      height: 24px;\n      padding-left: 30px;\n      border-bottom: 1px solid #a5a5a5;\n      background-color: transparent;\n      color: #333;\n      transition: border-color ease-in-out 0.3s; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:focus,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:focus {\n        outline: none; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]::-webkit-input-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]::-webkit-input-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]::-moz-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]::-moz-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:-ms-input-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:-ms-input-placeholder {\n        color: #333; }\n      .skin-classic .sf-login .form-group input[type=\"text\"]:-moz-placeholder,\n      .skin-classic .sf-login .form-group input[type=\"password\"]:-moz-placeholder {\n        color: #333; }\n    .skin-classic .sf-login .form-group label {\n      position: absolute;\n      left: 5px;\n      top: 5px;\n      color: #00a1e0;\n      font-size: 13px; }\n    .skin-classic .sf-login .form-group ::-moz-placeholder,\n    .skin-classic .sf-login .form-group :-ms-input-placeholder,\n    .skin-classic .sf-login .form-group ::-ms-input-placeholder {\n      font-weight: 600; }\n  .skin-classic .sf-login .login-btn {\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    font-size: 15px;\n    text-transform: uppercase;\n    border-radius: 6px;\n    border: 0px;\n    padding: 6px;\n    width: 100%;\n    cursor: pointer;\n    font-size: 16px;\n    text-align: center;\n    margin-top: 10px;\n    outline: none;\n    font-weight: bold; }\n  .skin-classic .sf-login .icon-user:before {\n    color: #333; }\n  .skin-classic .sf-login .icon-lock:before {\n    color: #333; }\n  .skin-classic .sf-login .icon-extension:before {\n    color: #333; }\n\n/** End of Classic Theme **/\n"

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var router_1 = __webpack_require__(29);
	var app_service_1 = __webpack_require__(58);
	var Models = __webpack_require__(59);
	var validation_1 = __webpack_require__(61);
	var logger_1 = __webpack_require__(65);
	var MasterComponent = (function () {
	    function MasterComponent(sfAppService, router, zone) {
	        var _this = this;
	        this.sfAppService = sfAppService;
	        this.router = router;
	        this.zone = zone;
	        this.logger = new logger_1.CustomLogger('MasterComponent');
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.evntLst = new Array();
	        this.v = new validation_1.Validation();
	        this.agent = new Models.Agent();
	        this.calls = new Array();
	        this.activeCall = null;
	        this.isUccx = false;
	        this.isIvr = false;
	        this.showClickToDial = false;
	        this.clickToDialMsg = 'Switch the agent to Not Ready to make call';
	        this.clickToDialNo = '';
	        this.successMessage = '';
	        this.displayMessage = '';
	        this.messageType = 'success';
	        this.messageTimer = null;
	        this.myPageUrl = '';
	        this.stateSessionClear = "INITIATED,NOT_READY"; //INITIATING,ALERTING,INITIATED,RESERVED_OUTBOUND_PREVIEW,RESERVED		
	        this.callTypeSessionClear = "OUTBOUND_DIRECT_PREVIEW,ACD_IN"; //OUTBOUND_DIRECT_PREVIEW,ACD_IN
	        this.isConnectionDroped = false;
	        this.isOk = true;
	        this.logoutReason = new Array();
	        console.log('MasterComponent initialize');
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.AgentDetail, function (event, data) {
	            _this.zone.run(function () {
	                _this.agent = data;
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.LogoutReasonCode, function (event, data) {
	            _this.zone.run(function () {
	                _this.logoutReason = data;
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CallDetails, function (event, data) {
	            _this.zone.run(function () {
	                _this.calls = data;
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.CurrentCallDetail, function (event, data) {
	            _this.zone.run(function () {
	                console.log('master.components - CurrentCallDetail exe : ', data);
	                if (data != null) {
	                    _this.activeCall = data;
	                    _this.calls = _this.sfAppService.CallDetails;
	                    //NBC Start
	                    if (_this.stateSessionClear.toUpperCase().includes(data.State.toUpperCase()) && _this.callTypeSessionClear.toUpperCase().includes(data.CallType.toUpperCase())
	                        || (data.State.toUpperCase() === 'INITIATING' && data.CallType.toUpperCase() === 'OUTBOUND_DIRECT_PREVIEW')) {
	                        _this.logger.Debug('I am in clear session CallType : ' + data.CallType.toUpperCase() + ' CallState:  ' + data.State.toUpperCase());
	                        localStorage.removeItem("isActivityCreated");
	                        localStorage.removeItem("IsDispositionUpdated");
	                        localStorage.removeItem("isDoScreenPopupDone");
	                        localStorage.removeItem("isCallDroped");
	                        localStorage.removeItem("parseDetailExist");
	                        localStorage.removeItem("outcomeEdited");
	                        localStorage.removeItem('sessPageData');
	                        localStorage.removeItem('IsRejectOrClose');
	                        localStorage.removeItem('isActiveCall');
	                        localStorage.removeItem('isFailedCall'); //unsuccess call
	                        localStorage.removeItem('isNonPewcCall');
	                    }
	                }
	                else {
	                    _this.activeCall = null;
	                }
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.SystemMessage, function (event, data) {
	            _this.zone.run(function () {
	                //Set the data to
	                _this.messageType = 'success';
	                if (data.Level === Models.Severity.Error) {
	                    _this.messageType = 'danger';
	                }
	                else if (data.Level === Models.Severity.Warn) {
	                    _this.messageType = 'warning';
	                }
	                _this.displayMessage = data.Msg;
	                _this.isOk = data.IsOk;
	                if (_this.messageTimer !== null) {
	                    clearTimeout(_this.messageTimer);
	                    _this.messageTimer = null;
	                }
	                _this.messageTimer = setTimeout(function () {
	                    _this.messageTimer = null;
	                    _this.displayMessage = '';
	                }, _this.sfAppService.MessageTimeout);
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.sfAppService.TopicList.ClickToDial, function (event, data) {
	            //show the modal pop up based on the agent state check.
	            _this.zone.run(function () {
	                if (data.number) {
	                    _this.clickToDialNo = data.number;
	                    if (_this.agent.State === 'LOGOUT') {
	                        return;
	                    }
	                    else if (_this.agent.State === 'NOT_READY') {
	                        _this.logger.Info('ClickToDial - make call in Not Ready State to :' + data.number);
	                        _this.sfAppService.MakeCall(data.number);
	                    }
	                    else if (_this.agent.State === 'READY') {
	                        //BCode
	                        _this.showClickToDial = false;
	                        _this.sfAppService.MakeCall(data.number);
	                        _this.agent.State = 'READY';
	                        _this.logger.Info('ClickToDial - make call in Ready State :' + data.number);
	                    }
	                    else if (_this.calls.length === 1) {
	                        //Do you want to place the call in consult or conference.                    
	                        _this.clickToDialMsg = 'Do you want to make Consult or Transfer.';
	                        _this.showClickToDial = true;
	                    }
	                }
	            });
	        }));
	        this.zone.run(function () {
	            _this.agent = _this.sfAppService.AgentDetail;
	            _this.logoutReason = _this.sfAppService.LogoutReasonCode;
	            _this.calls = _this.sfAppService.CallDetails;
	            _this.activeCall = _this.sfAppService.Call;
	            //For Message Box Ok click NBC Start
	            // if (this.agent.State === 'LOGOUT'&& this.agent.LoginId==null) {
	            //     this.isConnectionDroped = true;
	            //     this.displayMessage = 'Acqueon connector isnâ€™t available!';
	            //     console.log('isConnectionDroped -' + this.activeCall, +this.isConnectionDroped)
	            // }
	            // else {          
	            //     this.isConnectionDroped = false;
	            //     console.log('isConnectionDroped false -' + this.activeCall, +this.isConnectionDroped)
	            // }
	            //NBC End
	        });
	    }
	    MasterComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('MasterComponent Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    MasterComponent.prototype.onCallSelect = function (call) {
	        this.sfAppService.SetActiveCall(call);
	    };
	    MasterComponent.prototype.onMessageClose = function () {
	        if (this.messageTimer !== null) {
	            clearTimeout(this.messageTimer);
	            this.messageTimer = null;
	        }
	        this.displayMessage = '';
	        this.messageType = 'success';
	    };
	    MasterComponent.prototype.onErrorMessageClose = function () {
	        window.top.location.href = this.myPageUrl;
	    };
	    MasterComponent.prototype.routeToPath = function (path) {
	        console.log('Routing to path :', path);
	        this.router.navigate([path]);
	    };
	    MasterComponent.prototype.AgentLogout = function () {
	        this.logger.Debug('Master Component - AgentLogout .');
	        this.sfAppService.AgentLogout();
	    };
	    MasterComponent.prototype.ngOnInit = function () { };
	    MasterComponent.prototype.clickToDialAction = function (callAction) {
	        this.showClickToDial = false;
	        if (this.calls.length > 0 && (callAction === 'CONSULT' || callAction === 'SST')) {
	            var callId = this.calls[0].Id;
	            this.sfAppService.DoCallAction(callAction, { callId: callId, toAddress: this.clickToDialNo });
	        }
	    };
	    MasterComponent = __decorate([
	        //NBC
	        core_1.Component({
	            selector: 'master',
	            template: __webpack_require__(76),
	            styles: [__webpack_require__(77)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _c) || Object])
	    ], MasterComponent);
	    return MasterComponent;
	    var _a, _b, _c;
	}());
	exports.MasterComponent = MasterComponent;


/***/ }),
/* 76 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"jumbotron sf-wrap sf-agent master-com\">\r\n    <div class=\"sf-head\">\r\n        <!-- <span class=\"icon-mini-logo pull-xs-left icon \"></span> -->\r\n        <div ngbDropdown class=\"d-block pull-xs-right btn-logout\">\r\n            <button *ngIf=\"agent.State !== 'Unavailable' || activeCall != null || (agent.State === 'Unavailable' && agent.Reason !== null && agent.Reason.isAcw == true)\" class=\"btn btn-sm btn-link disabled\">\r\n                <span class=\"icon icon-login-user\"></span>\r\n            </button>\r\n            <button *ngIf=\"agent.State === 'Unavailable' && activeCall == null && (agent.Reason == null || (agent.Reason !== null && agent.Reason.isAcw == false))\" class=\"btn btn-sm btn-link\" id=\"dropdownMenu1\" ngbDropdownToggle\r\n                title=\"User Profile\">\r\n                <span class=\"icon icon-login-user\"></span>\r\n            </button>\r\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                <!-- <button *ngFor=\"let code of logoutReason\" class=\"dropdown-item\" (click)=\"AgentLogout(code)\">{{code.Label}}</button> -->\r\n                <button class=\"dropdown-item\" (click)=\"AgentLogout()\">Logout</button>\r\n            </div>\r\n        </div>\r\n        <span class=\"master-user-name text-truncate pull-xs-right\" [title]=\"agent.FirstName + ' ' + agent.LastName \">\r\n            {{agent.FirstName + ' ' + agent.LastName}}\r\n        </span>\r\n    </div>\r\n    <div class=\"sf-banner\">\r\n        <div class=\"panel\">\r\n            <sf-agent></sf-agent>\r\n            <sf-call [call]=\"activeCall\" [agentState]=\"agent.State\" [isAcw]=\"v.IsNotNullOrUndefinedOjbect(agent.Reason) && agent.Reason.isAcw === true\" [showDialpad]=\"agent.State === 'Unavailable1' && (!v.IsNotNullOrUndefinedOjbect(agent.Reason) || (v.IsNotNullOrUndefinedOjbect(agent.Reason) && agent.Reason.isAcw == false))\"></sf-call>\r\n            <div *ngIf=\"calls.length >0 && activeCall != null\" class=\"btn-group line-nav\" data-toggle=\"buttons\">\r\n                <label *ngFor=\"let call of calls; let i = index;\" [ngClass]=\"{'btn': true, 'btn-link': true, 'btn-sm': true, 'active': call.Id === activeCall.Id}\"\r\n                    (click)=\" onCallSelect(call)\">\r\n                    <input type=\"radio\" name=\"line\" id=\"line{{i+1}}\" autocomplete=\"off\" checked> Line {{i+1}}\r\n                </label>\r\n            </div>\r\n            <div *ngIf=\"showClickToDial\" class=\"click-dial\">\r\n                <span class=\"close\" (click)=\"clickToDialAction('')\">&times;</span>\r\n                <p>Switch the agent to Not Ready to make call.</p>\r\n                <div>\r\n                    <button *ngIf=\"agent.State === 'READY'\" class=\"btn btn-sm btn-success\" (click)=\"clickToDialAction('')\">Accept</button>\r\n                    <button *ngIf=\"agent.State !== 'READY'\" class=\"btn btn-sm btn-info\" (click)=\"clickToDialAction('CONSULT')\">Consult</button>\r\n                    <button *ngIf=\"agent.State !== 'READY' && isUccx === false\" class=\"btn btn-sm btn-info\" (click)=\"clickToDialAction('SST')\">Transfer</button>\r\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"clickToDialAction('')\">Reject</button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"sf-content animated fadeIn\">\r\n        <div class=\"main-tab btn-group\" data-toggle=\"buttons\">\r\n            <table class=\"table table-sm\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n                <tr>\r\n                    <td>\r\n                        <label title=\"Information\" class=\"btn btn-secondary btn-sm parentTabs active\" id=\"info_Tab\" (click)=\"routeToPath('/master/cr')\">\r\n                            <span class=\"icon-info\"></span>\r\n                            <input type=\"radio\" name=\"maintab\" id=\"maintab1\" autocomplete=\"off\" checked>\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <label title=\"Teams\" class=\"btn btn-secondary btn-sm parentTabs\" (click)=\"routeToPath('/master/team')\">\r\n                            <span class=\"icon-group\"></span>\r\n                            <input type=\"radio\" name=\"maintab\" id=\"maintab3\" autocomplete=\"off\">\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <ngb-alert class=\"sf-alert animated bounceInUp\" [dismissible]=\"false\" *ngIf=\"displayMessage\" type=\"{{messageType}}\" (close)=\"onMessageClose()\">\r\n            <p>{{ displayMessage }}</p>\r\n            <p>\r\n                <button *ngIf=\"!isConnectionDroped && isOk\" class=\"btn btn-sm btn-warning\" (click)=\"onMessageClose()\">OK</button>\r\n            </p>\r\n            <p>\r\n                <button *ngIf=\"isConnectionDroped\" class=\"btn btn-sm btn-warning\" (click)=\"onErrorMessageClose()\">OK</button>\r\n            </p>\r\n        </ngb-alert>\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n    <div class=\"sf-foot\">Powered by Acqueon</div>\r\n</div>";

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/** Lightning Theme **/\n.skin-lightning .sf-agent .sf-head {\n  background-color: #004487; }\n  .skin-lightning .sf-agent .sf-head .icon-login-user {\n    border-radius: 50%;\n    font-size: 18px;\n    margin: 3px;\n    color: #fff; }\n  .skin-lightning .sf-agent .sf-head .icon-mini-logo {\n    background: url(\"/acqueon-mini-logo.png\") no-repeat center;\n    height: 16px;\n    width: 16px;\n    background-size: cover;\n    margin: 7px 5px; }\n  .skin-lightning .sf-agent .sf-head .btn-user {\n    margin: 4px 0 0; }\n  .skin-lightning .sf-agent .sf-head .master-user-name {\n    font-size: 13px;\n    padding: 7px 0px; }\n  .skin-lightning .sf-agent .sf-head .dropdown-toggle::after {\n    display: none; }\n  .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu {\n    background-color: #004487; }\n    .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first {\n      border-bottom: 1px solid gray; }\n    .skin-lightning .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first-child {\n      border-bottom: 1px solid gray; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-agent .sf-head {\n  background-color: #f99b41; }\n  .skin-classic .sf-agent .sf-head .icon-login-user {\n    border-radius: 50%;\n    font-size: 18px;\n    margin: 3px;\n    color: #fff; }\n  .skin-classic .sf-agent .sf-head .icon-mini-logo {\n    background: url(\"/acqueon-mini-logo.png\") no-repeat center;\n    height: 18px;\n    width: 18px;\n    background-size: cover;\n    margin: 7px 5px; }\n  .skin-classic .sf-agent .sf-head .btn-user {\n    margin: 4px 0 0; }\n  .skin-classic .sf-agent .sf-head .master-user-name {\n    font-size: 13px;\n    padding: 7px 0px; }\n  .skin-classic .sf-agent .sf-head .dropdown-toggle::after {\n    display: none; }\n  .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu {\n    background-color: #f99b41; }\n    .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first {\n      border-bottom: 1px solid gray; }\n    .skin-classic .sf-agent .sf-head .btn-logout .dropdown-menu .dropdown-item:first-child {\n      border-bottom: 1px solid gray; }\n\n.skin-classic .sf-agent .sf-foot {\n  position: fixed;\n  bottom: 0px !important; }\n\n/** End of Classic Theme **/\n.sf-foot {\n  position: fixed;\n  bottom: 0px;\n  left: 0;\n  right: 0;\n  text-align: center;\n  font-size: 11px;\n  background: #455464;\n  height: 26px;\n  line-height: 26px;\n  color: #fff; }\n\n.call-tab {\n  width: 100%;\n  padding: 0;\n  position: relative; }\n  .call-tab label {\n    float: left;\n    margin-bottom: 0; }\n    .call-tab label.btn {\n      outline: none;\n      font-size: 16px; }\n      .call-tab label.btn.active {\n        color: #f99b41;\n        border-bottom: transparent;\n        background-color: #fff; }\n\n.sf-detail {\n  height: 280px;\n  overflow: hidden;\n  overflow-y: auto;\n  position: relative; }\n  .sf-detail::-webkit-scrollbar {\n    width: 6px; }\n  .sf-detail::-webkit-scrollbar-track {\n    background-color: rgba(250, 250, 250, 0.4);\n    border-radius: 3px; }\n  .sf-detail::-webkit-scrollbar-thumb {\n    border-radius: 6px;\n    background-color: rgba(102, 102, 102, 0.2); }\n  .sf-detail .panel {\n    margin: 3px; }\n    .sf-detail .panel .row {\n      border-bottom: 1px solid rgba(102, 102, 102, 0.2);\n      margin: 0 -5px;\n      padding: 5px 0;\n      font-size: 12px;\n      color: #000; }\n      .sf-detail .panel .row > div {\n        padding-left: 5px;\n        padding-right: 5px; }\n      .sf-detail .panel .row:first-child {\n        color: #999;\n        font-family: 'open_sanslight'; }\n      .sf-detail .panel .row:last-child {\n        border-bottom: 0; }\n\n.main-tab {\n  width: 100%;\n  height: 30px;\n  margin: -1px;\n  border-bottom: 1px solid #ccc; }\n  .main-tab [type=\"checkbox\"],\n  .main-tab [type=\"radio\"] {\n    display: none; }\n  .main-tab table {\n    margin-bottom: 0; }\n    .main-tab table td {\n      padding: 0; }\n      .main-tab table td label {\n        float: left;\n        width: 100%;\n        margin-bottom: 0; }\n        .main-tab table td label.btn {\n          background-color: transparent;\n          border: 0px;\n          outline: none;\n          border-right: 1px solid rgba(250, 250, 250, 0.4);\n          padding: 4px 0;\n          border-radius: 0; }\n          .main-tab table td label.btn.active {\n            background-color: transparent;\n            color: #f99b41; }\n          .main-tab table td label.btn:last-child {\n            border-right: 0px; }\n\n.sub-tab {\n  position: relative; }\n  .sub-tab .panel-title .search-box {\n    position: absolute;\n    right: 5px;\n    top: 0px;\n    margin: 0; }\n    .sub-tab .panel-title .search-box > label {\n      position: absolute;\n      right: 2px;\n      top: 5px;\n      cursor: pointer;\n      z-index: 1; }\n    .sub-tab .panel-title .search-box .form-control {\n      width: 10px;\n      top: 0px;\n      float: right;\n      position: relative;\n      height: 22px;\n      right: 0;\n      border: 0;\n      background-color: #e6e7e8;\n      font-size: 11px;\n      transition: all 0.3s ease-in-out; }\n      .sub-tab .panel-title .search-box .form-control:focus {\n        width: 190px;\n        padding-right: 20px;\n        background: #fff; }\n  .sub-tab .card {\n    background-color: #fff;\n    overflow: hidden;\n    overflow-y: auto;\n    border: 0;\n    margin-bottom: 0px; }\n  .sub-tab .card-header {\n    padding: 5px 5px 5px 10px;\n    font-weight: bold; }\n    .sub-tab .card-header > a {\n      display: block;\n      width: 100%;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      outline: none;\n      text-decoration: none;\n      position: relative;\n      color: #333; }\n      .sub-tab .card-header > a:after {\n        content: \"+\";\n        position: absolute;\n        right: 0px;\n        background-color: rgba(102, 102, 102, 0.2);\n        width: 20px;\n        height: 20px;\n        text-align: center; }\n    .sub-tab .card-header.active > a:after {\n      content: \"-\"; }\n  .sub-tab .card-block {\n    padding: 0px 3px;\n    background-color: #fff;\n    margin-bottom: 0px; }\n\n.line-nav {\n  text-align: left;\n  margin-top: 10px;\n  border-top: 1px dashed #ddd;\n  width: 100%; }\n  .line-nav label {\n    margin-bottom: 0;\n    width: 25%; }\n    .line-nav label.btn {\n      padding: 5px 0;\n      color: #999;\n      outline: none;\n      text-align: center;\n      font-size: 13px;\n      float: inherit;\n      line-height: 10px;\n      position: relative;\n      margin-bottom: -4px; }\n      .line-nav label.btn:hover {\n        text-decoration: none; }\n      .line-nav label.btn.active {\n        background-color: rgba(250, 250, 250, 0.4);\n        color: #000;\n        border-radius: 0;\n        font-weight: bold; }\n\n.sf-alert {\n  position: absolute;\n  z-index: 9;\n  right: 0;\n  left: 0;\n  bottom: 60;\n  padding: 0 5px 5px; }\n  .sf-alert .alert {\n    padding: 3px;\n    text-align: center;\n    border: 1px solid;\n    font-weight: bold; }\n"

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var storage_1 = __webpack_require__(63); //NBC
	var router_1 = __webpack_require__(29);
	var validation_1 = __webpack_require__(61);
	var $ = __webpack_require__(68); //NBC
	var app_config_1 = __webpack_require__(60);
	var CallResultComponent = (function () {
	    function CallResultComponent(appService, router, zone) {
	        var _this = this;
	        this.appService = appService;
	        this.router = router;
	        this.zone = zone;
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.store = storage_1.default.getInstance();
	        this.evntLst = new Array();
	        this.canShowCallInfo = true;
	        this.canShowCallWrap = true;
	        this.canShowCallIncidents = true;
	        this.activeCall = null; //NBC
	        this.agentState = 'LOGOUT';
	        this.InboundDefaultTab = app_config_1.default.InboundDefaultTab;
	        //get if it's uccx and path to be shown
	        // subscribe to call details only when call has LCM related data show them.
	        //subscribe to isLcm Call event . 
	        //check for is UCCX flag event and do the work here 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (type, data) {
	            _this.zone.run(function () {
	                _this.agentState = data.State;
	                _this.onagentstatechange();
	            });
	        }));
	        //NBC Start
	        this.zone.run(function () {
	            //this.changeDisplayOption(null)
	            _this.activeCall = _this.appService.Call;
	            if (_this.activeCall != null) {
	                if (_this.activeCall.IsOutbound === true) {
	                    //this.changeDisplayOption(this.activeCall);
	                    _this.canShowCallInfo = true;
	                    _this.canShowCallIncidents = true;
	                    _this.canShowCallWrap = false;
	                }
	                else {
	                    _this.canShowCallInfo = true;
	                    _this.canShowCallIncidents = true;
	                    _this.canShowCallWrap = true;
	                }
	            }
	            else {
	                //InBound
	                if (_this.appService.AgentDetail.State == "Unavailable") {
	                    _this.canShowCallInfo = true;
	                    _this.canShowCallIncidents = true;
	                    _this.canShowCallWrap = true;
	                }
	                else if (_this.appService.AgentDetail.State == "Available") {
	                    _this.canShowCallInfo = true;
	                    _this.canShowCallIncidents = true;
	                    _this.canShowCallWrap = true;
	                }
	            }
	        });
	        //NBC End
	    }
	    CallResultComponent.prototype.onagentstatechange = function () {
	        if (this.appService.AgentDetail.State == "Available") {
	            this.canShowCallInfo = true;
	            this.canShowCallIncidents = true;
	            this.canShowCallWrap = true;
	            $('.parentTabs').removeClass("active");
	            $('.parentTabs').first().addClass("active");
	            var path = '/master/cr/info';
	            this.router.navigate([path]);
	            $('.call-result-com td label').removeClass("active");
	            $('#intoTab').addClass("active");
	        }
	        else if (this.appService.AgentDetail.State == "Unavailable") {
	            this.canShowCallInfo = true;
	            this.canShowCallIncidents = true;
	            this.canShowCallWrap = true;
	            if (this.appService.Call != null) {
	                if (this.appService.Call.State == "Incoming" || this.appService.Call.State == "Holding" || this.appService.Call.State == "Active") {
	                    this.canShowCallWrap = false;
	                }
	            }
	        }
	        // else if (this.appService.AgentDetail.State == "TALKING" || this.appService.AgentDetail.State == "WORK" || this.appService.AgentDetail.State == "WORK_READY") {
	        //     if (this.appService.Call != null && this.appService.Call.CallType != "ACD_IN" && this.appService.Call.IsOutbound == false) {
	        //         if (this.appService.Call.AgentState == "INITIATING" || this.appService.Call.AgentState == "INITIATED" || this.appService.Call.AgentState == "HELD" || this.appService.Call.AgentState == "ACTIVE" || this.appService.Call.AgentState == "WRAP_UP") {
	        //             this.canShowNonPEWC = this.IsEnableNonPewc;//true; //true
	        //             this.canShowLcmChangeNumber = true;
	        //             this.canShowCallWrap = false;
	        //             this.canShowLcmOutcome = true;
	        //             this.canShowCallVariable = false;
	        //             this.canShowLcmBusinessField = true
	        //         }
	        //     }
	        // }
	    };
	    CallResultComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.CurrentCallResult, function (topic, data) {
	            _this.changeDisplayOption(data);
	        }));
	        // //Bin Code Start
	        // this.evntLst.push(this.evnt.RegisterEvent(this.appService.LCMTopicList.LCMContact, (topic: string, data: any) => {
	        //     if (data) {
	        //         data['IsLCM'] = true;
	        //     }
	        //     this.changeDisplayOption(data);
	        // }));
	        // this.changeDisplayOption(this.appService.CurrentCallRes);
	        // if (this.appService.LcmContact) {
	        //     this.appService.LcmContact['IsLCM'] = true;
	        // }
	        //this.changeDisplayOption(this.appService.LcmContact);
	        //do it even for ?
	        //Bin Code End
	    };
	    CallResultComponent.prototype.changeDisplayOption = function (data) {
	        if (data != null) {
	            this.canShowCallInfo = true;
	            this.canShowCallIncidents = true;
	            this.canShowCallWrap = true;
	            //NBC Start            
	            if (data.Call != undefined && data.Call.State == "Incoming" && data.Call.IsOutbound == false) {
	                $('.parentTabs').removeClass("active");
	                $('.parentTabs').first().addClass("active");
	                var path = '/master/cr/' + this.InboundDefaultTab;
	                this.router.navigate([path]);
	                $('.call-result-com td label').removeClass("active");
	                $('#' + this.InboundDefaultTab).addClass("active");
	            }
	            else if (this.appService.AgentDetail.State == "Unavailable") {
	                this.canShowCallWrap = false;
	            }
	        }
	        else {
	            this.canShowCallInfo = true;
	            this.canShowCallIncidents = true;
	            this.canShowCallWrap = true;
	        }
	        // if (this.appService.Call != null) {
	        //     if (this.appService.Call.AgentState == "INITIATED" || this.appService.Call.AgentState == "HELD" || this.appService.Call.AgentState == "ACTIVE") {
	        //         this.canShowNonPEWC = this.IsEnableNonPewc;//true; //true
	        //         this.canShowLcmChangeNumber = true;
	        //         this.canShowCallWrap = false;
	        //         this.canShowLcmOutcome = true;
	        //         this.canShowCallVariable = false;
	        //         this.canShowLcmBusinessField = true;
	        //     }
	        // }
	        // if (this.appService.AgentDetail.State == "TALKING" || this.appService.AgentDetail.State == "WORK" || this.appService.AgentDetail.State == "WORK_READY") {
	        //     if (this.appService.Call != null && this.appService.Call.CallType != "ACD_IN" && this.appService.Call.IsOutbound == false) {
	        //         if (this.appService.Call.AgentState == "INITIATING" || this.appService.Call.AgentState == "INITIATED" || this.appService.Call.AgentState == "HELD" || this.appService.Call.AgentState == "ACTIVE" || this.appService.Call.AgentState == "WRAP_UP") {
	        //             this.canShowNonPEWC = this.IsEnableNonPewc;// true; //true
	        //             this.canShowLcmChangeNumber = true;
	        //             this.canShowCallWrap = false;
	        //             this.canShowLcmOutcome = true;
	        //             this.canShowCallVariable = false;
	        //             this.canShowLcmBusinessField = true;
	        //         }
	        //     }
	        // }
	    };
	    //Commented for PEWC
	    // if (!data && this.appService.AgentDetail.State !== 'LOGOUT') {
	    //     if (this.appService.IsUCCX === true) {
	    //         this.canShowCallInfo = false;
	    //         this.canShowNonPEWC = true;
	    //         this.routeToPath('/master/cr/pewc');
	    //     } else {
	    //         this.routeToPath('/master/cr/info');
	    //     }
	    // }
	    CallResultComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('Businessfields Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    CallResultComponent.prototype.routeToPath = function (path) {
	        console.log('Routing to path :', path);
	        this.router.navigate([path]);
	    };
	    CallResultComponent = __decorate([
	        core_1.Component({
	            selector: 'call-result',
	            template: __webpack_require__(79),
	            styles: [__webpack_require__(80)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _c) || Object])
	    ], CallResultComponent);
	    return CallResultComponent;
	    var _a, _b, _c;
	}());
	exports.CallResultComponent = CallResultComponent;


/***/ }),
/* 79 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"call-tab  btn-group call-result-com\" data-toggle=\"buttons\">\r\n    <table class=\"table table-sm\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n            <td valign=\"top\" *ngIf=\"canShowCallInfo\">\r\n                <label class=\"btn btn-secondary btn-sm childTabs active\" (click)=\"routeToPath('/master/cr/info')\" id=\"info\" title=\"Call Information\">\r\n                    <span class=\"icon-call-info\"></span>\r\n                    <input type=\"radio\" name=\"options\" id=\"option1\" autocomplete=\"off\">\r\n                </label>\r\n            </td>\r\n            <!-- Added by Prakash -->\r\n            <td *ngIf=\"canShowCallIncidents\">\r\n                <label class=\"btn btn-secondary btn-sm childTabs\" (click)=\"routeToPath('/master/cr/incident')\" id=\"incident\" title=\"Open Incidents\">\r\n                    <span class=\"icon-call-variable\"></span>\r\n                    <input type=\"radio\" name=\"options\" id=\"option2\" autocomplete=\"off\">\r\n                </label>\r\n            </td>\r\n            <td *ngIf=\"canShowCallWrap\">\r\n                <label class=\"btn btn-secondary btn-sm childTabs\" (click)=\"routeToPath('/master/cr/wrap')\" id=\"wrap\" title=\"Activity Log\">\r\n                    <span class=\"icon-call-wrapup\"></span>\r\n                    <input type=\"radio\" name=\"options\" id=\"option3\" autocomplete=\"off\">\r\n                </label>\r\n            </td>\r\n        </tr>\r\n        \r\n    </table>\r\n</div>\r\n<router-outlet></router-outlet>";

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.call-tab [type=\"checkbox\"], .call-tab [type=\"radio\"] {\n  display: none; }\n\n.call-tab table {\n  margin-bottom: 0; }\n  .call-tab table td {\n    padding: 0; }\n    .call-tab table td label.btn {\n      display: block;\n      width: 100%;\n      border-radius: 0;\n      border-left: 0px;\n      padding: 5px 0; }\n\n.parentTabs {\n  font-size: 18px;\n  height: 28px;\n  margin-left: 0px; }\n  .parentTabs:hover {\n    background-color: #e6e6e6 !important;\n    border-color: #adadad;\n    border: none;\n    border: 1px 0 1px 0 solid; }\n\n/** Lightning Theme **/\n.skin-lightning .parentTabs.active {\n  border-bottom: 2px solid #004487 !important; }\n  .skin-lightning .parentTabs.active .icon-info:before, .skin-lightning .parentTabs.active .icon-group:before, .skin-lightning .parentTabs.active .icon-ivr:before, .skin-lightning .parentTabs.active .icon-queue:before {\n    color: #004487;\n    background-color: transparent; }\n\n.skin-lightning .parentTabs .icon-info:before, .skin-lightning .parentTabs .icon-group:before, .skin-lightning .parentTabs .icon-ivr:before, .skin-lightning .parentTabs .icon-queue:before {\n  color: #969492; }\n\n.skin-lightning .childTabs.active .icon-call-info:before, .skin-lightning .childTabs.active .icon-non-pewc:before, .skin-lightning .childTabs.active .icon-call-variable:before, .skin-lightning .childTabs.active .icon-call-wrapup:before, .skin-lightning .childTabs.active .icon-business-field:before, .skin-lightning .childTabs.active .icon-change-number:before {\n  color: #004487; }\n\n.skin-lightning .childTabs .icon-call-info:before, .skin-lightning .childTabs .icon-non-pewc:before, .skin-lightning .childTabs .icon-call-variable:before, .skin-lightning .childTabs .icon-call-wrapup:before, .skin-lightning .childTabs .icon-business-field:before, .skin-lightning .childTabs .icon-change-number:before {\n  color: #969492; }\n\n.skin-lightning .call-tab label.btn.active {\n  color: #004487;\n  border-bottom: transparent;\n  background-color: #fff; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .parentTabs.active {\n  border-bottom: 2px solid #f99b41 !important; }\n  .skin-classic .parentTabs.active .icon-info:before, .skin-classic .parentTabs.active .icon-group:before, .skin-classic .parentTabs.active .icon-ivr:before, .skin-classic .parentTabs.active .icon-queue:before {\n    color: #f99b41;\n    background-color: transparent; }\n\n.skin-classic .parentTabs .icon-info:before, .skin-classic .parentTabs .icon-group:before, .skin-classic .parentTabs .icon-ivr:before, .skin-classic .parentTabs .icon-queue:before {\n  color: #969492; }\n\n.skin-classic .childTabs.active .icon-call-info:before, .skin-classic .childTabs.active .icon-non-pewc:before, .skin-classic .childTabs.active .icon-call-variable:before, .skin-classic .childTabs.active .icon-call-wrapup:before, .skin-classic .childTabs.active .icon-business-field:before, .skin-classic .childTabs.active .icon-change-number:before {\n  color: #f99b41; }\n\n.skin-classic .childTabs .icon-call-info:before, .skin-classic .childTabs .icon-non-pewc:before, .skin-classic .childTabs .icon-call-variable:before, .skin-classic .childTabs .icon-call-wrapup:before, .skin-classic .childTabs .icon-business-field:before, .skin-classic .childTabs .icon-change-number:before {\n  color: #969492; }\n\n.skin-classic .call-tab label.btn.active {\n  color: #004487;\n  border-bottom: transparent;\n  background-color: #fff; }\n\n/** End of Classic Theme **/\n"

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var $ = __webpack_require__(68);
	var app_config_1 = __webpack_require__(60);
	var CallInfoComponent = (function () {
	    function CallInfoComponent(appService, zone) {
	        var _this = this;
	        this.appService = appService;
	        this.zone = zone;
	        this.call = null;
	        this.callStateTimerId = null;
	        this.callStateTime = '00:00';
	        this.callStateTimeOverall = '00:00';
	        this.v = new validation_1.Validation();
	        this.enteredIncidentNumber = null;
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.evntLst = new Array();
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.CurrentCallDetail, function (type, data) {
	            _this.zone.run(function () {
	                console.log('call-info.components - CurrentCallDetail : ', data);
	                _this.call = data;
	                _this.setCallStateTime();
	                _this.updateCallVariable();
	            });
	        }));
	        this.zone.run(function () {
	            _this.call = _this.appService.Call;
	            _this.setCallStateTime();
	            _this.updateCallVariable();
	            $('.call-result-com td label').removeClass("active");
	            $('#infoTab').addClass("active");
	        });
	    }
	    CallInfoComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('AgentState Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	        if (this.callStateTimerId !== null) {
	            clearInterval(this.callStateTimerId);
	        }
	    };
	    CallInfoComponent.prototype.updateCallVariable = function () {
	        if (this.call !== null) {
	            var searchField = app_config_1.default.searchConfig[this.call.DNIS];
	            if (this.v.IsNotNullOrUndefinedString(searchField)) {
	                this.enteredIncidentNumber = this.call.CallVariables[searchField];
	            }
	        }
	        else {
	            this.enteredIncidentNumber = null;
	        }
	    };
	    CallInfoComponent.prototype.setCallStateTime = function () {
	        var _this = this;
	        if (this.call !== null) {
	            this.callStateTime = this.appService.GetElapsedTime(this.call.StateChangeTime);
	            this.callStateTimeOverall = this.appService.GetElapsedTime(this.call.StartTime);
	            if (this.callStateTimerId === null) {
	                this.callStateTimerId = setInterval(function () {
	                    if (_this.call !== null) {
	                        _this.callStateTime = _this.appService.GetElapsedTime(_this.call.StateChangeTime);
	                        _this.callStateTimeOverall = _this.appService.GetElapsedTime(_this.call.StartTime);
	                    }
	                }, 1000);
	            }
	        }
	        else if (this.callStateTimerId !== null) {
	            clearInterval(this.callStateTimerId);
	            this.callStateTimerId = null;
	            this.callStateTime = '00:00';
	            this.callStateTimeOverall = '00:00';
	        }
	    };
	    CallInfoComponent = __decorate([
	        core_1.Component({
	            selector: 'call-info',
	            template: __webpack_require__(82),
	            styles: [__webpack_require__(83)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _b) || Object])
	    ], CallInfoComponent);
	    return CallInfoComponent;
	    var _a, _b;
	}());
	exports.CallInfoComponent = CallInfoComponent;


/***/ }),
/* 82 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"panel info-panel call-info-com\">\r\n    <div class=\"row info-title\">\r\n        <div class=\"col-xs-12\">Call Information</div>\r\n    </div>\r\n    <div class=\"info-records\">           \r\n        <div class=\"row info-record\">\r\n            <div class=\"col-xs-6\">ANI</div>\r\n            <div class=\"col-xs-6\">{{call!= null ? call.From : ''}}</div>\r\n        </div>\r\n        <!-- <div class=\"row info-record\">\r\n            <div class=\"col-xs-6\">Dialed Numbers</div>\r\n            <div class=\"col-xs-6\">{{call!= null ? call.DialedNumber : ''}}</div>\r\n        </div> -->\r\n        <div class=\"row info-record\" *ngIf=\"call != null && enteredIncidentNumber != null\">\r\n            <div class=\"col-xs-6\">Incident Number</div>\r\n            <div class=\"col-xs-6\">{{enteredIncidentNumber}}</div>\r\n        </div>\r\n        <div class=\"row info-record\">\r\n            <div class=\"col-xs-6\">Current State</div>\r\n            <div class=\"col-xs-6\">{{call!= null ? call.State : ''}}</div>\r\n        </div>\r\n        <div class=\"row info-record\">\r\n            <div class=\"col-xs-6\">Current State Duration</div>\r\n            <div class=\"col-xs-6\">{{call!= null ? callStateTime : ''}}</div>\r\n        </div>\r\n        <div class=\"row info-record\">\r\n            <div class=\"col-xs-6\">Overall Duration</div>\r\n            <div class=\"col-xs-6\">{{call!= null ? callStateTimeOverall : ''}}</div>\r\n        </div>\r\n        \r\n    </div>\r\n</div>";

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	module.exports = ".panel.call-info-com .info-records {\n  height: 225px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  font-size: 11px; }\n"

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var logger_1 = __webpack_require__(65);
	var CallWrapComponent = (function () {
	    function CallWrapComponent(appService, zone) {
	        this.appService = appService;
	        this.zone = zone;
	        //subscribe 
	        this.logger = new logger_1.CustomLogger('CallWrapComponent');
	        this.v = new validation_1.Validation();
	        this.evntLst = new Array();
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.callRes = null;
	        this.rValue = true;
	        this.comment = '';
	        /**Added by Prakash */
	        this.additionalComments = "Additional Comments";
	        this.workNotes = "Work Notes";
	        this.typeLst = new Array();
	        this.incidentLst = new Array();
	        this.selectedIncident = '';
	        this.selectedType = this.workNotes;
	    }
	    CallWrapComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.logger.Warn('ngOnInit called');
	        //Added by Prakash
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.WrapupIncidentSelect, function (event, data) {
	            _this.zone.run(function () {
	                console.log("WRAP UP EVENT : " + data);
	                _this.updateIncidentList();
	            });
	        }));
	        this.zone.run(function () {
	            _this.updateUIData();
	        });
	    };
	    CallWrapComponent.prototype.updateUIData = function () {
	        console.log("call wrap - updateUIData");
	        //Added by Prakash
	        this.logger.Debug("Call Wrap : Update UI : " + this.appService.incident);
	        this.typeLst.push(this.additionalComments);
	        this.typeLst.push(this.workNotes);
	        this.comment = '';
	        if (this.appService.incident !== null) {
	            this.updateIncidentList();
	        }
	        else {
	            this.incidentLst = new Array();
	        }
	    };
	    CallWrapComponent.prototype.updateIncidentList = function () {
	        this.incidentLst = this.appService.incident.ResultFld;
	        console.log("Call Wrap : appService.currentSelectedIncident : " + this.appService.currentSelectedIncident);
	        if (this.appService.currentSelectedIncident != null) {
	            // var openedIncident = this.incidentLst.find(i => i.Number === this.appService.currentSelectedIncident);
	            // this.logger.Debug("Call Wrap : openedIncident : " + openedIncident);
	            this.selectedIncident = this.appService.currentSelectedIncident.sysid;
	            this.logger.Debug("Call Wrap : selectedIncident : " + this.selectedIncident);
	        }
	    };
	    CallWrapComponent.prototype.ddSelectValue = function (list, element) {
	        var selectedObj;
	        if (this.v.IsValidObject(element)) {
	            for (var i = 0; i < list.length; i++) {
	                if (list[i].Id == element.Id) {
	                    selectedObj = list[i];
	                    break;
	                }
	            }
	        }
	        else {
	            selectedObj = list[list.length - 1];
	        }
	        return selectedObj;
	    };
	    CallWrapComponent.prototype.ngOnDestroy = function () {
	        //console.log('%c call-wrap-components - ngOnDestroy','background:#777778; color:#FFF');
	        this.logger.Warn('ngOnDestroy called');
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            this.logger.Debug('ngOnDestroy -Unregister event :' + id);
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    CallWrapComponent.prototype.isEmpty = function (obj) {
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key))
	                return false;
	        }
	        return true;
	    };
	    CallWrapComponent.prototype.onSubmit = function (form) {
	        //print all the changed entities                
	        console.log("Call wrap - OnSubmit");
	        /**Added by Prakash */
	        this.logger.Debug('Type : ' + this.selectedType);
	        this.logger.Debug('Incident : ' + this.selectedIncident);
	        this.logger.Debug('Comment VAR : ' + this.comment);
	        var dataObj = {};
	        if (this.selectedType === this.workNotes) {
	            dataObj = { "work_notes": this.comment };
	        }
	        else {
	            dataObj = { "comments": this.comment };
	        }
	        //    parent.postMessage("ACTIVITY|"+this.selectedIncident+"|"+JSON.stringify(dataObj), "*");
	        this.appService.sn.updateActivity(this.selectedIncident, JSON.stringify(dataObj));
	        this.comment = '';
	    };
	    CallWrapComponent.prototype.onCallResultChanged = function (type, data) {
	        console.log("Call wrap - onCallResultChanged : ", data);
	        var val;
	        if (type === 'Comment') {
	            this.comment = data;
	        }
	        else if (type === 'commentType') {
	            val = this.typeLst[data];
	            if (val !== undefined) {
	                this.selectedType = val;
	            }
	        }
	        else if (type === 'incidentNumber') {
	            val = this.incidentLst[data];
	            if (val !== undefined) {
	                this.selectedIncident = val.Sysid;
	            }
	        }
	    };
	    CallWrapComponent = __decorate([
	        core_1.Component({
	            selector: 'call-wrap',
	            template: __webpack_require__(85),
	            styles: [__webpack_require__(86)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _b) || Object])
	    ], CallWrapComponent);
	    return CallWrapComponent;
	    var _a, _b;
	}());
	exports.CallWrapComponent = CallWrapComponent;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"panel call-log call-wrap-com info-panel\">\r\n    <div class=\"row info-title\">\r\n        <div class=\"col-xs-12\">Activity Log</div>\r\n    </div>\r\n    <!-- <form #wrapupForm=\"ngForm\" (ngSubmit)=\"onSubmit(wrapupForm)\">\r\n        <div class=\"info-records\">\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleInputEmail1\">Name</label>\r\n                <select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhoId' , $event.target.selectedIndex)\" [(ngModel)]=\"selectedWho\" name=\"whoId\">\r\n                    <option *ngFor=\"let item of whoLst\" [ngValue]=\"item\">{{item.Name}}</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleSelect1\">Related to</label>\r\n                <select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('WhatId' , $event.target.selectedIndex)\" [(ngModel)]=\"selectedWhat\" name=\"relateTo\">\r\n                    <option *ngFor=\"let item of whatLst\" [ngValue]=\"item\">{{item.Name}}</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleSelect2\">Wrap up</label>\r\n                <select class=\"form-control form-control-sm\" (change)=\"onCallResultChanged('Wrapup' , $event.target.selectedIndex)\" [ngModel]=\"selectedWrapup\" name=\"callwrapSelected\">\r\n                <option *ngFor=\"let item of wrapupLst\" [ngValue]=\"item.Id\">{{item.Label}}</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleTextarea\">Comments</label>\r\n                <textarea #ta class=\"form-control\" [(value)]='comment' (blur)=\"onCallResultChanged('Comment', ta.value)\"></textarea>\r\n            </div>\r\n        </div>\r\n        <button *ngIf=\"callRes === null\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button disabled\">Submit</button>\r\n        <button [disabled]=\"wrapupForm.submitted\" *ngIf=\"callRes\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\">Submit</button>\r\n\r\n    </form> -->\r\n\r\n    <!--Added by Prakash-->\r\n    <form #wrapupForm=\"ngForm\" (ngSubmit)=\"onSubmit(wrapupForm)\">\r\n        <div class=\"info-records\">\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleInputEmail1\">Type</label>\r\n                <select class=\"form-control form-control-sm\" [ngModel]=\"selectedType\" name=\"commentType\" (change)=\"onCallResultChanged('commentType' , $event.target.selectedIndex)\">\r\n                    <option *ngFor=\"let item of typeLst\" [value]=\"item\">{{item}}</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleSelect1\">Incident</label>\r\n                <select class=\"form-control form-control-sm\" [(ngModel)]=\"selectedIncident\" name=\"incidentNumber\" (change)=\"onCallResultChanged('incidentNumber' , $event.target.selectedIndex)\">\r\n                    <option *ngFor=\"let item of incidentLst\" [value]=\"item.Sysid\">{{item.Number}}</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"exampleTextarea\">Comments</label>\r\n                <textarea autofocus #ta class=\"form-control\"  [(value)]='comment' (blur)=\"onCallResultChanged('Comment', ta.value)\"></textarea>\r\n            </div>\r\n\r\n            <button *ngIf=\"callRes === null\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\">Submit</button>\r\n            <button [disabled]=\"wrapupForm.submitted\" *ngIf=\"callRes\" type=\"submit\" class=\"btn btn-sm btn-primary btn-block wrap-submit-button\">Submit</button>\r\n        </div>\r\n    </form>\r\n</div>";

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\ntextarea {\n  font-size: 12px;\n  height: 20%;\n  resize: none; }\n\n.sf-wrap .panel {\n  margin: 0px 1px;\n  border: 0px none; }\n\n.sub-tab .card-block {\n  margin-bottom: 0px; }\n\n.panel.call-wrap-com .form-group label {\n  font-weight: 600;\n  color: #333; }\n\n.panel.call-wrap-com .form-group select {\n  font-size: 12px; }\n\n.panel.call-wrap-com .info-records {\n  height: 60%;\n  overflow-y: auto;\n  overflow-x: hidden;\n  margin-bottom: 10px; }\n\n/** Lightning Theme **/\n.skin-lightning .panel.call-wrap-com .wrap-submit-button {\n  background-color: #1b5297 !important;\n  color: #fff !important;\n  border: #1b5297 !important; }\n  .skin-lightning .panel.call-wrap-com .wrap-submit-button:hover {\n    background-color: #004487 !important;\n    border: #004487 !important; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .panel.call-wrap-com .wrap-submit-button {\n  background-color: #f99b41 !important;\n  color: #333 !important;\n  font-weight: 600;\n  border: none; }\n\n/** End of Classic Theme **/\n"

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var PageNotFoundComponent = (function () {
	    function PageNotFoundComponent() {
	    }
	    PageNotFoundComponent.prototype.ngOnInit = function () { };
	    PageNotFoundComponent = __decorate([
	        core_1.Component({
	            selector: 'page-not-found',
	            template: __webpack_require__(88)
	        }), 
	        __metadata('design:paramtypes', [])
	    ], PageNotFoundComponent);
	    return PageNotFoundComponent;
	}());
	exports.PageNotFoundComponent = PageNotFoundComponent;


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	module.exports = "Page not found";

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var logger_1 = __webpack_require__(65);
	var CallIncidentComponent = (function () {
	    function CallIncidentComponent(appService, zone) {
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.appService = appService;
	        this.zone = zone;
	        this.logger = new logger_1.CustomLogger('CallIncidentComponent');
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.evntLst = new Array();
	        this.call = null;
	        this.incident = null;
	    }
	    CallIncidentComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        console.log("Call INCIDENT : ONINIT");
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.CurrentCallDetail, function (type, data) {
	            _this.zone.run(function () {
	                console.log('call-incident.components - CurrentCallDetail : ', data);
	                _this.call = data;
	                _this.updateCallVariable();
	            });
	        }));
	        this.zone.run(function () {
	            console.log('call-incident.components - zone run : ', _this.appService.Call);
	            _this.call = _this.appService.Call;
	            _this.updateCallVariable();
	        });
	    };
	    CallIncidentComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('CallIncident Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	    };
	    CallIncidentComponent.prototype.updateCallVariable = function () {
	        if (this.call !== null) {
	            if (this.appService.incident != null) {
	                this.incident = this.appService.incident;
	            }
	        }
	    };
	    CallIncidentComponent.prototype.openIncident = function (incidentId) {
	        console.log('CALL INCIDENT COMPONENT : Open Incident : ' + incidentId);
	        this.appService.currentSelectedIncident = incidentId;
	        this.appService.sn.openIncident(incidentId);
	    };
	    CallIncidentComponent = __decorate([
	        core_1.Component({
	            selector: 'call-incident',
	            template: __webpack_require__(90),
	            styles: [__webpack_require__(91)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _b) || Object])
	    ], CallIncidentComponent);
	    return CallIncidentComponent;
	    var _a, _b;
	}());
	exports.CallIncidentComponent = CallIncidentComponent;


/***/ }),
/* 90 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"panel info-panel call-incident-com\">\r\n    <div class=\"row info-title\">\r\n        <div class=\"col-xs-12\">Open Incidents</div>\r\n    </div>\r\n    \r\n    <div>\r\n        <div class=\"row\" style=\"font-size: 11px\">\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\">Incident ID</div>\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\">Created On</div>\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\">Created By</div>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"incident !== null && incident !== undefined\" class=\"info-records\">\r\n        <div class=\"row info-record\" *ngFor=\"let v of incident.ResultFld\">\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\"><a [routerLink]=\"\" (click)=\"openIncident($event.target.innerText)\">{{v.Number}}</a></div>\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\">{{v.CreatedOn}}</div>\r\n            <div class=\"col-xs-6\" style=\"width: 33%;\">{{v.CreatedBy}}</div>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	module.exports = ".panel.call-incident-com .info-records {\n  height: 50%;\n  overflow-y: auto;\n  overflow-x: hidden;\n  font-size: 11px; }\n"

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var logger_1 = __webpack_require__(65);
	var TeamInfoComponent = (function () {
	    function TeamInfoComponent(appService, zone) {
	        this.appService = appService;
	        this.zone = zone;
	        //Subscribe to queue information
	        this.logger = new logger_1.CustomLogger('teamInfo');
	        this.teams = {};
	        this.teamIds = [];
	        this.searchTerm = '';
	        this.agentLoginId = '';
	        this.agentState = '';
	        this.isSupervisor = false;
	        this.isUccx = false;
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.v = new validation_1.Validation();
	        this.evntLst = new Array();
	        this.timerId = null;
	        this.activeCall = null;
	        this.teamDetails = '';
	        this.isActive = false;
	    }
	    TeamInfoComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.TeamsDetail, function (type, data) {
	            _this.zone.run(function () {
	                _this.onAllAgent();
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (type, data) {
	            _this.zone.run(function () {
	                _this.onAgentInfoChanged(data);
	                _this.onAllAgent();
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.CurrentCallDetail, function (type, data) {
	            //this.onAgentInfoChanged(data);
	            _this.zone.run(function () {
	                _this.logger.Debug("<<<<<<<<<<<<Call details received in team info>>>>>>>>>>>>");
	                _this.activeCall = data;
	                _this.onAllAgent();
	            });
	        }));
	        this.zone.run(function () {
	            _this.activeCall = _this.appService.Call;
	            _this.onAgentInfoChanged(_this.appService.AgentDetail);
	            _this.onAllAgent();
	        });
	    };
	    TeamInfoComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            console.log('QueueComponent Unregister event');
	            this.evnt.UnRegisterEvent(id);
	        }
	        if (this.timerId !== null) {
	            clearTimeout(this.timerId);
	        }
	    };
	    TeamInfoComponent.prototype.onAgentInfoChanged = function (agent) {
	        this.agentLoginId = agent.LoginId;
	        this.isSupervisor = agent.Roles.Supervisor;
	        this.agentState = agent.State;
	    };
	    //To fetch details for all agent(LoggegIn+LoggedOut agents)
	    TeamInfoComponent.prototype.onAllAgent = function () {
	        var teams = this.appService.Teams;
	        this.teams = {};
	        this.teamIds = [];
	        for (var i = 0; i < teams.length; i++) {
	            var team = teams[i];
	            if (this.canAddMember(team)) {
	                if (!this.teams.hasOwnProperty(team.TeamId)) {
	                    this.teams[team.TeamId] = {
	                        Name: team.TeamName,
	                        agents: []
	                    };
	                    this.teamIds.push(team.TeamId);
	                    console.log("onAllAgent:" + team.State, +team.TeamId);
	                }
	                this.processTeamMember(team);
	                this.teams[team.TeamId].agents.push(team);
	            }
	        }
	        if (this.timerId !== null) {
	            clearTimeout(this.timerId);
	        }
	        this.setTeamTime();
	        this.searchTerm = '';
	        this.isActive = false;
	        this.logger.Info('onAllAgent-All Agent Details');
	    };
	    //To fetch details for all active agent(LoggegIn agents)
	    TeamInfoComponent.prototype.onActiveAgent = function (teamDetails) {
	        var teams = this.appService.Teams;
	        this.teams = {};
	        this.teamIds = [];
	        for (var i = 0; i < teams.length; i++) {
	            var team = teams[i];
	            if ((this.v.IsNotNullOrUndefinedString(teamDetails)) && (team.State !== 'LoggedOut')) {
	                if (this.canAddMember(team)) {
	                    if (!this.teams.hasOwnProperty(team.TeamId)) {
	                        this.teams[team.TeamId] = {
	                            Name: team.TeamName,
	                            agents: []
	                        };
	                        this.teamIds.push(team.TeamId);
	                        console.log("onActiveAgent:" + team.State, +team.TeamId);
	                    }
	                    this.processTeamMember(team);
	                    this.teams[team.TeamId].agents.push(team);
	                }
	            }
	        }
	        if (this.timerId !== null) {
	            clearTimeout(this.timerId);
	        }
	        this.setTeamTime();
	        this.searchTerm = '';
	        this.isActive = true;
	        this.logger.Info('onActiveAgent-All Agent Details');
	    };
	    TeamInfoComponent.prototype.canAddMember = function (agent) {
	        if (agent.LoginId === String(this.agentLoginId)) {
	            return false;
	        }
	        if (this.searchTerm === '') {
	            return true;
	        }
	        var key = this.searchTerm.toLowerCase();
	        if (agent.TeamName.toLowerCase().indexOf(key) !== -1 ||
	            agent.FirstName.toLowerCase().indexOf(key) !== -1 || agent.LastName.toLowerCase().indexOf(key) !== -1 ||
	            agent.LoginId.toLowerCase().indexOf(key) !== -1 || agent.TeamId.toLowerCase().indexOf(key) !== -1 ||
	            agent.State.toLowerCase().indexOf(key) !== -1 || (agent.Reason !== null && (agent.Reason.Label.toLowerCase().indexOf(key) !== -1))) {
	            return true;
	        }
	        return false;
	    };
	    TeamInfoComponent.prototype.processTeamMember = function (agent) {
	        agent.StateChangeTimeText = this.appService.GetElapsedTime(agent.StateChangeTime);
	        agent['CanMonitor'] = false;
	        agent['CanReady'] = false;
	        agent['CanLogout'] = false;
	        agent['CanNotReady'] = false;
	        agent['CanConsult'] = false;
	        agent['CanTransfer'] = false;
	        if (agent.LoginId !== this.agentLoginId) {
	            if (this.isSupervisor) {
	                if (this.agentState === 'Unavailable' && agent.State === 'InboundContact') {
	                    agent['CanMonitor'] = true;
	                }
	                if (agent.State === 'Available') {
	                    agent['CanNotReady'] = true;
	                }
	                else if (agent.State === 'Unavailable') {
	                    agent['CanReady'] = true;
	                }
	                if (agent.State !== 'LOGOUT') {
	                    agent['CanLogout'] = true;
	                }
	            }
	            //Class for call handling            
	            if (this.v.IsValidObject(this.activeCall) && (agent.State === 'Available')) {
	                agent['CanConsult'] = this.activeCall.Actions.CanConsult;
	                agent['CanTransfer'] = this.activeCall.Actions.CanTransferSST;
	            }
	        }
	        return agent;
	    };
	    TeamInfoComponent.prototype.setTeamTime = function () {
	        var _this = this;
	        for (var t in this.teams) {
	            if (this.teams.hasOwnProperty(t)) {
	                var team = this.teams[t];
	                for (var i = 0; i < team.agents.length; i++) {
	                    var agent = team.agents[i];
	                    agent.StateChangeTimeText = this.appService.GetElapsedTime(agent.StateChangeTime);
	                    team.agents[i] = agent;
	                }
	            }
	        }
	        this.timerId = setTimeout(function () {
	            _this.setTeamTime();
	        }, 5000);
	    };
	    TeamInfoComponent.prototype.getStateClass = function (state) {
	        var cl = 'state-dot ';
	        if (state === 'LOGOUT') {
	            cl += 'grey';
	        }
	        else if (state === 'Available') {
	            cl += 'green';
	        }
	        else if (state === 'Unavailable') {
	            cl += 'red';
	        }
	        else {
	            cl += 'yellow';
	        }
	        return cl;
	    };
	    TeamInfoComponent.prototype.silentMonitor = function (extn) {
	        console.log('On Silent monitor :', extn);
	        this.appService.DoCallAction('SILENTMONITOR', { toAddress: extn });
	    };
	    // agentReady(loginId) {
	    //     this.appService.ChangeTeamAgentState(loginId, 'READY', '');
	    // }
	    // agentNotReady(loginId) {
	    //     this.appService.ChangeTeamAgentState(loginId, 'NOT_READY', '');
	    // }
	    // logoutAgent(loginId) {
	    //     this.appService.TeamAgentLogout(loginId, '-1');
	    // }
	    TeamInfoComponent.prototype.getCanDisableButton = function (btnType, loginId, state) {
	        if (loginId === this.agentLoginId) {
	            return false;
	        }
	        return false;
	    };
	    TeamInfoComponent.prototype.teamCallAction = function (callAction, agentId, userName) {
	        if (this.v.IsValidObject(this.activeCall) && (callAction === 'CONSULT' || callAction === 'SST')) {
	            this.appService.DoCallAction(callAction, { callId: this.activeCall.Id, callState: this.activeCall.State, agentId: agentId, userName: userName });
	        }
	    };
	    TeamInfoComponent = __decorate([
	        core_1.Component({
	            selector: 'team-info',
	            template: __webpack_require__(93),
	            styles: [__webpack_require__(94)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _b) || Object])
	    ], TeamInfoComponent);
	    return TeamInfoComponent;
	    var _a, _b;
	}());
	exports.TeamInfoComponent = TeamInfoComponent;


/***/ }),
/* 93 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"panel sub-tab team-panel\">\r\n    <h4 class=\"panel-title\">\r\n        <div class=\"row info-title\">\r\n            <div class=\"col-xs-12\">Teams</div>\r\n        </div>\r\n        <div class=\"form-group search-box \">\r\n            <label for=\"searchTeam\" class=\"pull-xs-right\"><span class=\"icon-search\"></span></label>\r\n            <input *ngIf=\"!isActive;\" type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"onAllAgent()\" id=\"searchTeam\" placeholder=\"Search Team\">\r\n            <input *ngIf=\"isActive;\" type=\"text\" class=\"form-control form-control-sm\" [(ngModel)]=\"searchTerm\" (ngModelChange)=\"onActiveAgent('LOGOUT')\" id=\"searchTeam\" placeholder=\"Search Team\">\r\n        </div>\r\n    </h4>\r\n\r\n    <div class=\"team-panel\">\r\n        <label class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == false }\" (click)=\"onAllAgent()\">\r\n            <span class=\"pull-left\">All Agents</span>\r\n        </label>\r\n\r\n        <label class=\"agent-btn\" [ngClass]=\"{ 'active': isActive == true}\" (click)=\"onActiveAgent('LOGOUT')\">\r\n            <span class=\"pull-right\">Active Agents</span>\r\n        </label>\r\n    </div>\r\n\r\n    <ngb-accordion #acc=\"ngbAccordion\" activeIds=\"{{teamIds.length === 1 ? '1' : ''}}\">\r\n        <ngb-panel *ngFor=\"let id of teamIds; let i = index;\" id=\"{{i+1}}\" title=\"{{teams[id].Name}}\">\r\n            <template ngbPanelContent>\r\n                <ul class=\"list-unstyled team-list clearfix\">\r\n                    <li *ngFor=\"let agent of teams[id].agents\" class=\"clearfix\" [ngClass]=\"{'clearfix': true}\">\r\n                        <span [ngClass]=\"getStateClass(agent.State)\"></span> <span class=\"team-users\">{{agent.FirstName + ' ' + agent.LastName}}</span>\r\n                        <small class=\"text-muted state-time pull-left\">{{agent.StateChangeTimeText}}</small>\r\n                        <span class=\"team-user-extn\" *ngIf=\"agent.Extension\"><span class=\"icon-extension\"></span> {{agent.Extension}}</span>\r\n                        <ul class=\"list-inline action-btns\">\r\n                            <!-- <div *ngIf=\"isSupervisor\">\r\n                                <li class=\"list-inline-item\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanMonitor}\" (click)=\"agent.CanMonitor && silentMonitor(agent.Extension)\"><span class=\"icon-monitor\"></span></button></li>\r\n                                <li class=\"list-inline-item\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-success': true, 'disabled': !agent.CanReady}\" (click)=\"agent.CanReady && agentReady(agent.LoginId)\"><span class=\"icon-checked\"></span></button></li>\r\n                                <li class=\"list-inline-item\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-danger': true, 'disabled': !agent.CanNotReady}\" (click)=\"agent.CanNotReady && agentNotReady(agent.LoginId)\"><span class=\"icon-cancel\"></span></button></li>\r\n                                <li class=\"list-inline-item\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-info': true, 'disabled': !agent.CanLogout}\" (click)=\"agent.CanLogout && logoutAgent(agent.LoginId)\"><span class=\"icon-logout\"></span></button></li>\r\n                            </div>\r\n                            <div *ngIf=\"!isSupervisor\"> -->\r\n                                <li class=\"list-inline-item\" title=\"Consult\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanConsult}\" (click)=\"agent.CanConsult && teamCallAction('CONSULT',agent.LoginId,agent.userName)\"><span class=\"icon-user-call\"></span></button></li>\r\n                                <!-- <li *ngIf=\"isUccx == false\" class=\"list-inline-item\" title=\"Direct Transfer\"><button [ngClass]=\"{'btn': true, ' btn-sm': true, 'btn-secondary': true, 'disabled': !agent.CanTransfer}\" (click)=\"agent.CanTransfer && teamCallAction('SST',agent.LoginId, agent.userName)\"><span class=\"icon-call-transfer\"></span></button></li> -->\r\n                            <!-- </div> -->\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </template>\r\n        </ngb-panel>\r\n    </ngb-accordion>\r\n</div>";

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.team-panel {\n  margin-top: 5px;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  height: inherit; }\n  .team-panel .agent-btn {\n    padding: .25rem 0.3rem !important;\n    border-bottom: 2px solid rgba(102, 102, 102, 0.2);\n    cursor: pointer;\n    font-weight: 600;\n    font-size: 12px; }\n  .team-panel .row.info-title {\n    color: #1b5297; }\n\n/** Lightning Theme **/\n.skin-lightning .team-panel .agent-btn.active {\n  border-bottom-color: #004487 !important; }\n\n.skin-classic .team-panel .agent-btn.active {\n  border-bottom-color: #f99b41 !important; }\n\n/** End of Lightning Theme **/\n.team-list {\n  margin-bottom: 0;\n  height: 165px;\n  overflow-x: hidden;\n  overflow-y: auto; }\n  .team-list > li {\n    border-bottom: 1px solid rgba(102, 102, 102, 0.2);\n    padding: 5px;\n    position: relative;\n    transition: all 0.3s ease-in-out;\n    float: left;\n    width: 100%;\n    height: 50px;\n    overflow: hidden; }\n    .team-list > li .state-dot {\n      margin: 5px 5px 0 0; }\n    .team-list > li .team-users {\n      width: 150px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      font-weight: 600; }\n    .team-list > li .team-user-extn {\n      font-size: 12px;\n      float: right; }\n    .team-list > li .state-time {\n      padding: 5px 0 0 15px;\n      display: inline-block; }\n    .team-list > li .action-btns {\n      position: absolute;\n      bottom: 5px;\n      padding-left: 15px;\n      visibility: hidden;\n      opacity: 0;\n      left: -100px;\n      transition: all 0.3s ease-in-out; }\n      .team-list > li .action-btns .btn {\n        border-color: #666;\n        text-align: center;\n        padding: 3px 5px;\n        border: 0; }\n    .team-list > li:hover {\n      background-color: #fff; }\n      .team-list > li:hover .action-btns {\n        opacity: 1;\n        left: 0;\n        width: 100%;\n        visibility: visible; }\n      .team-list > li:hover .state-time,\n      .team-list > li:hover .team-user-extn {\n        display: none; }\n    .team-list > li.self:hover .action-btns {\n      display: none; }\n    .team-list > li.self:hover .state-time,\n    .team-list > li.self:hover .team-user-extn {\n      display: block; }\n"

/***/ }),
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var validation_1 = __webpack_require__(61);
	var logger_1 = __webpack_require__(65);
	var app_config_1 = __webpack_require__(60);
	var AgentStateComponent = (function () {
	    function AgentStateComponent(appService, zone) {
	        var _this = this;
	        this.appService = appService;
	        this.zone = zone;
	        this.logger = new logger_1.CustomLogger('AgentStateComponent');
	        this.evntLst = new Array();
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.agentStateTimerId = null;
	        this.agentTime = 0;
	        this.extn = '';
	        this.loginId = '';
	        this.agentTimeText = '00:00';
	        this.currentState = 'LOGOUT';
	        this.reasonText = '';
	        this.currentStateColor = 'red';
	        this.nextStates = new Array();
	        this.v = new validation_1.Validation();
	        this.logger.Debug('Constructor loaded...');
	        //console.log('%c REGISTER ', 'color:#AA8000'); 
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.AgentDetail, function (event, data) {
	            _this.logger.Debug('On Agent State Change');
	            _this.zone.run(function () {
	                _this.onAgentStateChange(data);
	                _this.refreshNextStates(_this.appService.NotReadyReasonCode);
	            });
	        }));
	        this.evntLst.push(this.evnt.RegisterEvent(this.appService.TopicList.NotReadyResonCode, function (event, data) {
	            _this.logger.Debug('On Next state refresh');
	            _this.zone.run(function () {
	                _this.refreshNextStates(data);
	            });
	        }));
	        this.zone.run(function () {
	            _this.onAgentStateChange(_this.appService.AgentDetail);
	            _this.refreshNextStates(_this.appService.NotReadyReasonCode);
	        });
	    }
	    AgentStateComponent.prototype.ngOnInit = function () {
	    };
	    AgentStateComponent.prototype.ngOnDestroy = function () {
	        for (var _i = 0, _a = this.evntLst; _i < _a.length; _i++) {
	            var id = _a[_i];
	            this.logger.Debug('');
	            console.log('ngOnDestroy - AgentState Unregister event :' + id);
	            this.evnt.UnRegisterEvent(id);
	        }
	        if (this.agentStateTimerId !== null) {
	            clearInterval(this.agentStateTimerId);
	            this.agentStateTimerId = null;
	        }
	    };
	    //change method for not ready reason code binding. 
	    AgentStateComponent.prototype.onAgentStateChange = function (agent) {
	        var _this = this;
	        try {
	            this.extn = agent.Extension;
	            this.loginId = agent.LoginId;
	            this.agentTime = agent.StateChangeTime;
	            this.logger.Debug('onAgentStateChange :' + agent.State);
	            if (agent.State === 'LOGOUT' && this.agentStateTimerId !== null) {
	                clearInterval(this.agentStateTimerId);
	                this.agentStateTimerId = null;
	            }
	            else if (this.agentStateTimerId === null) {
	                this.agentStateTimerId = setInterval(function () {
	                    _this.agentTimeText = _this.appService.GetElapsedTime(_this.agentTime);
	                    _this.logger.All('Agent state time changed :' + _this.agentTimeText);
	                }, 1000);
	            }
	            if (agent.State === 'Unavailable') {
	                this.currentState = 'Unavailable';
	                this.reasonText = agent.Reason !== null ? agent.Reason.Label : '';
	                this.currentState = this.reasonText !== '' ? this.currentState + ' - ' : this.currentState;
	                this.currentStateColor = 'red';
	            }
	            else {
	                var currState = agent.State;
	                var alias = app_config_1.default.callStates[currState];
	                if (this.v.IsNotNullOrUndefinedString(alias))
	                    currState = alias;
	                this.currentState = this.capitalizeFirstLetter(currState.toLowerCase());
	                this.reasonText = '';
	                this.currentStateColor = 'green';
	                if (agent.State !== 'Available') {
	                    this.currentStateColor = 'yellow';
	                }
	            }
	            this.logger.Trace('agent-state-component onAgentStateChange - currentState :' + this.currentState);
	        }
	        catch (ex) {
	            this.logger.Error('agent-state-component Change  - ' + ex.message);
	        }
	    };
	    AgentStateComponent.prototype.refreshNextStates = function (reasonCodes) {
	        var reasonCode;
	        this.nextStates = [];
	        if (this.appService.AgentDetail.State !== 'Available') {
	            this.nextStates.push({
	                id: "-1",
	                value: 'Available',
	                color: 'green'
	            });
	        }
	        if (this.v.IsNotNullOrEmptyArray(reasonCodes)) {
	            for (var i = 0; i < reasonCodes.length; i++) {
	                //Sorting Statest Text
	                reasonCodes.sort(function (a, b) {
	                    var nameA = a.Label.toLowerCase(), nameB = b.Label.toLowerCase();
	                    if (nameA < nameB)
	                        return -1;
	                    if (nameA > nameB)
	                        return 1;
	                    return 0; //default return value (no sorting)
	                });
	                reasonCode = reasonCodes[i];
	                if (reasonCode.Label !== this.reasonText) {
	                    this.nextStates.push({ id: reasonCode.Label, value: 'Unavailable - ' + reasonCode.Label, color: 'red' });
	                }
	            }
	        }
	        else {
	            this.nextStates.push({
	                id: "",
	                value: 'Unavailable',
	                color: 'red'
	            });
	        }
	    };
	    AgentStateComponent.prototype.changeAgentStateTime = function () {
	    };
	    AgentStateComponent.prototype.capitalizeFirstLetter = function (str) {
	        return str.charAt(0).toUpperCase() + str.slice(1);
	    };
	    AgentStateComponent.prototype.changeAgentState = function (state) {
	        this.logger.Debug('changeAgentState state :' + state);
	        var isReady = state.id === "-1";
	        var id = isReady ? '' : state.id;
	        var agentState = isReady ? 'Available' : 'Unavailable';
	        this.appService.ChangeAgentState(agentState, id);
	    };
	    AgentStateComponent = __decorate([
	        core_1.Component({
	            selector: 'sf-agent',
	            template: __webpack_require__(102),
	            styles: [__webpack_require__(103)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _b) || Object])
	    ], AgentStateComponent);
	    return AgentStateComponent;
	    var _a, _b;
	}());
	exports.AgentStateComponent = AgentStateComponent;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"id-extn clearfix agent-state-com\">\r\n    <span class=\"pull-xs-left\">ID {{loginId}}</span>\r\n    <span class=\"pull-xs-right\"><span class=\"icon-extension\"></span> {{extn}}</span>\r\n</div>\r\n<div ngbDropdown class=\"d-block state-option\">\r\n    <div class=\"btn-status\" id=\"dropdownMenu1\" ngbDropdownToggle>\r\n        <span class=\"state-dot {{currentStateColor}}\"></span> <span class=\"current-state\">{{currentState}}</span> <span class=\"reason-text\">{{reasonText}}</span>\r\n        <small class=\"text-muted state-time\">{{agentTimeText}}</small>\r\n    </div>\r\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n        <button *ngFor=\"let st of nextStates\" class=\"dropdown-item\" (click)=\"changeAgentState(st)\"><span class=\"state-dot {{st.color}}\"></span> {{st.value}}</button>\r\n    </div>\r\n</div>";

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n/** Lightning Theme **/\n.skin-lightning .sf-wrap.sf-agent .sf-banner .panel .btn-status {\n  text-transform: uppercase; }\n  .skin-lightning .sf-wrap.sf-agent .sf-banner .panel .btn-status .state-time {\n    color: #004487 !important; }\n\n/** End of Lightning Theme **/\n/** Classic Theme **/\n.skin-classic .sf-wrap.sf-agent .sf-banner .panel .btn-status {\n  text-transform: uppercase; }\n  .skin-classic .sf-wrap.sf-agent .sf-banner .panel .btn-status .state-time {\n    color: #f99b41 !important; }\n\n/** End of Classic Theme **/\n.sf-wrap.sf-agent .sf-banner {\n  padding: 1px 0; }\n  .sf-wrap.sf-agent .sf-banner .panel {\n    border: 0;\n    font-size: 13px;\n    font-weight: 600;\n    margin: 0 0px -1px;\n    background-color: #fff;\n    color: #3c3c3c;\n    position: relative;\n    z-index: 9;\n    /*z-index:9*/\n    overflow: visible; }\n    .sf-wrap.sf-agent .sf-banner .panel .id-extn {\n      padding-bottom: 5px; }\n    .sf-wrap.sf-agent .sf-banner .panel .state-option {\n      font-size: 13px; }\n      .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status {\n        text-align: left;\n        font-size: 12px;\n        color: #333;\n        font-family: 'open_sansbold';\n        outline: none;\n        padding: 2px 10px 0 5px;\n        border: 1px solid rgba(102, 102, 102, 0.2);\n        height: 38px;\n        border-radius: 3px;\n        cursor: pointer; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .current-state,\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .reason-text {\n          font-family: 'open_sansbold';\n          font-size: 11px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          float: left;\n          position: relative;\n          white-space: nowrap; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status .reason-text {\n          font-family: 'open_sansregular'; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:after {\n          position: absolute;\n          right: 7px;\n          top: 10px;\n          border-width: 6px; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:hover, .sf-wrap.sf-agent .sf-banner .panel .state-option .btn-status:focus {\n          text-decoration: none; }\n      .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu {\n        z-index: 9999;\n        width: 100%;\n        padding: 0;\n        border-radius: 5px; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu .dropdown-item {\n          font-size: 12px;\n          padding: 3px 10px;\n          font-weight: 500;\n          text-transform: uppercase; }\n        .sf-wrap.sf-agent .sf-banner .panel .state-option .dropdown-menu .dropdown-item:hover {\n          background-color: #d3d3d3; }\n    .sf-wrap.sf-agent .sf-banner .panel .state-time {\n      padding-left: 15px;\n      position: absolute;\n      left: 3px;\n      top: 22px;\n      color: #01549b !important; }\n"

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var app_service_1 = __webpack_require__(58);
	var models_1 = __webpack_require__(59);
	var validation_1 = __webpack_require__(61);
	var storage_1 = __webpack_require__(63); //NBC
	var ng_bootstrap_1 = __webpack_require__(95);
	var logger_1 = __webpack_require__(65); //NBC
	var CallControlComponent = (function () {
	    function CallControlComponent(modalService, sfAppService, zone) {
	        this.modalService = modalService;
	        this.sfAppService = sfAppService;
	        this.zone = zone;
	        this.call = null;
	        this.showDialpad = false;
	        this.isAcw = false;
	        this.agentState = '';
	        this.phoneNumber = '';
	        this.dialpadAction = '';
	        this.modalRef = null;
	        //NBC
	        this.logger = new logger_1.CustomLogger('CallControlComponent');
	        this.calls = new Array();
	        this.evnt = validation_1.MessageEvent.getInstance();
	        this.store = storage_1.default.getInstance();
	        this.evntLst = new Array();
	        this.onKeyPadPress = function (btnValue, txtBoxId) {
	            if (txtBoxId !== undefined) {
	                var el = document.getElementById(txtBoxId);
	                var val = el.value;
	                var position = val.slice(0, el.selectionStart).length;
	                var output = val.substr(0, position) + btnValue + val.substr(position);
	                el.value = output;
	                this.phoneNumber = output;
	                this.setCaretPosition(el, position + 1);
	            }
	        };
	    }
	    //NBC
	    CallControlComponent.prototype.ngOnChanges = function (changes) {
	        var _this = this;
	        console.log("ngOnChanges :: ", changes);
	        if (changes.hasOwnProperty('showDialpad')) {
	            var t = changes['showDialpad'];
	            if (t.hasOwnProperty('currentValue') && t['currentValue'] === false && this.modalRef !== null) {
	                this.zone.run(function () {
	                    _this.clearModelRef(true);
	                });
	            }
	        }
	    };
	    CallControlComponent.prototype.ngOnDestroy = function () {
	    };
	    CallControlComponent.prototype.open = function (content, action) {
	        var _this = this;
	        this.logger.Debug('Agent Click ACTION : ' + action);
	        if (this.modalRef === null) {
	            this.dialpadAction = action;
	            this.modalRef = this.modalService.open(content);
	            this.modalRef.result.then(function (result) {
	            }, function (reason) {
	                if (reason === 'MakeCall') {
	                    _this.makeCallAction();
	                }
	                else {
	                    _this.clearModelRef(false);
	                }
	            });
	        }
	        else {
	            this.clearModelRef(true);
	        }
	    };
	    CallControlComponent.prototype.clearModelRef = function (canClose) {
	        var _this = this;
	        this.dialpadAction = '';
	        if (canClose === true && this.modalRef !== null) {
	            setTimeout(function () {
	                console.log('Closing Modal pop up');
	                _this.modalRef.close('CancelCall');
	                _this.phoneNumber = '';
	                _this.modalRef = null;
	            }, 100);
	        }
	    };
	    CallControlComponent.prototype.makeCallAction = function (canClose) {
	        if (canClose === void 0) { canClose = false; }
	        this.logger.Debug('Agent Click makeCallAction ');
	        if (this.dialpadAction === 'MakeCall') {
	            this.store.SetData("IsConferenceDone", 'false'); //NBC
	            this.sfAppService.MakeCall(this.phoneNumber);
	        }
	        else if (this.dialpadAction === 'CONSULT' || this.dialpadAction === 'SST') {
	            this.sfAppService.DoCallAction(this.dialpadAction, { callId: this.call.Id, toAddress: this.phoneNumber });
	        }
	        this.clearModelRef(canClose);
	    };
	    CallControlComponent.prototype.doCallAction = function (action) {
	        this.logger.Debug('Agent Click ACTION : ' + action);
	        var option = {};
	        if (action === 'ANSWER' || action === 'HOLD' || action === 'RETRIEVE'
	            || action === 'CONFERENCE' || action === 'TRANSFER' || action === 'CONSULT_ACCEPT'
	            || action === 'PREVIEWREJECT' || action === 'PREVIEWCLOSE') {
	            option = { callId: this.call.Id };
	        }
	        else if (action === 'DROP') {
	            option = { call: this.call };
	        }
	        else if (action === 'BARGEIN') {
	        }
	        this.store.SetData('IsRejectOrClose', action);
	        this.sfAppService.DoCallAction(action, option);
	    };
	    CallControlComponent.prototype.onKeyDownEvent = function (key) {
	        var _this = this;
	        if (key === 13) {
	            //Dial a call from here
	            this.zone.run(function () {
	                _this.makeCallAction(true);
	            });
	            return true;
	        }
	        else if ((key === 8 || key === 27 || key === 35 || key === 36 || key === 37 || key === 38 || key === 39 || key === 40 ||
	            key === 46 || key === 110 || key === 190) || (key >= 48 && key <= 57) || (key >= 96 && key <= 106)) {
	            return true;
	        }
	        return false;
	    };
	    CallControlComponent.prototype.setCaretPosition = function (elem, caretPos) {
	        if (elem != null) {
	            if (elem.createTextRange) {
	                var range = elem.createTextRange();
	                range.move('character', caretPos);
	                range.select();
	            }
	            else {
	                if (elem.selectionStart) {
	                    elem.focus();
	                    elem.setSelectionRange(caretPos, caretPos);
	                }
	                else
	                    elem.focus();
	            }
	        }
	    };
	    ;
	    CallControlComponent.prototype.getDismissReason = function (reason) {
	        if (reason === ng_bootstrap_1.ModalDismissReasons.ESC) {
	            return 'by pressing ESC';
	        }
	        else if (reason === ng_bootstrap_1.ModalDismissReasons.BACKDROP_CLICK) {
	            return 'by clicking on a backdrop';
	        }
	        else {
	            return "with: " + reason;
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', (typeof (_a = typeof models_1.CallInfo !== 'undefined' && models_1.CallInfo) === 'function' && _a) || Object)
	    ], CallControlComponent.prototype, "call", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], CallControlComponent.prototype, "showDialpad", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], CallControlComponent.prototype, "isAcw", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], CallControlComponent.prototype, "agentState", void 0);
	    CallControlComponent = __decorate([
	        //NBC
	        core_1.Component({
	            selector: 'sf-call',
	            template: __webpack_require__(105),
	            styles: [__webpack_require__(106)]
	        }), 
	        __metadata('design:paramtypes', [(typeof (_b = typeof ng_bootstrap_1.NgbModal !== 'undefined' && ng_bootstrap_1.NgbModal) === 'function' && _b) || Object, (typeof (_c = typeof app_service_1.AppService !== 'undefined' && app_service_1.AppService) === 'function' && _c) || Object, (typeof (_d = typeof core_1.NgZone !== 'undefined' && core_1.NgZone) === 'function' && _d) || Object])
	    ], CallControlComponent);
	    return CallControlComponent;
	    var _a, _b, _c, _d;
	}());
	exports.CallControlComponent = CallControlComponent;


/***/ }),
/* 105 */
/***/ (function(module, exports) {

	module.exports = "<template ngbModalContainer #content let-c=\"close\" let-d=\"dismiss\">\r\n\t<div class=\"modal-body dial-pad call-control-com\" keyboard=\"false\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"dialpad-input\">\r\n\t\t\t\t<input id=\"dialPadCallControl\" type=\"text\" placeholder=\"Dial now..\" [(ngModel)]=\"phoneNumber\" [ngClass]=\"{'form-control': true, 'dial-display': true, 'reduce-size': phoneNumber && phoneNumber.length > 10}\"  (keydown)=\"onKeyDownEvent($event.keyCode)\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('1','dialPadCallControl')\">1</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('2','dialPadCallControl')\">2</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('3','dialPadCallControl')\" >3</button></div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\"  (click)=\"onKeyPadPress('4','dialPadCallControl')\">4</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('5','dialPadCallControl')\">5</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('6','dialPadCallControl')\">6</button></div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('7','dialPadCallControl')\">7</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('8','dialPadCallControl')\">8</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('9','dialPadCallControl')\">9</button></div>\r\n\t\t</div>\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('*','dialPadCallControl')\">*</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('0','dialPadCallControl')\">0</button></div>\r\n\t\t\t<div class=\"col-xs-4 col-sm-4\"><button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"onKeyPadPress('#','dialPadCallControl')\">#</button></div>\r\n\t\t</div>\r\n\t\t<div class=\"row call-action-btn\">\r\n\t\t\t<div class=\"col-xs-6 col-sm-6\">\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-danger\" aria-label=\"Close\" (click)=\"d('CancelCall')\"><span class=\"icon-end-call\"></span> Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"col-xs-6 col-sm-6\">\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"d('MakeCall')\"><span class=\"icon-call\"></span> Call</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<!-- <div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('Close click')\">Close</button>\r\n  </div> -->\r\n</template>\r\n\r\n<div class=\"clearfix call-control\">\r\n    <ul class=\"list-inline clearfix\" *ngIf=\"call === null || (agentState === 'Unavailable' && isAcw === false) \">\r\n        <li class=\"list-inline-item\"><button type=\"button\" title=\"Call\" class=\"btn btn-sm btn-secondary disabled\"><span class=\"icon-call-button\"></span></button></li>\r\n        <li class=\"list-inline-item\"><button type=\"button\" title=\"Hold\" class=\"btn btn-sm btn-secondary disabled\"><span class=\"icon-pause-button\"></span></button></li>\r\n        <li class=\"list-inline-item\"><button type=\"button\" title=\"Transfer\" class=\"btn btn-sm btn-secondary disabled\"><span class=\"icon-call-transfer\"></span></button></li>\r\n        <li class=\"list-inline-item\"><button type=\"button\" title=\"Conference\" class=\"btn btn-sm btn-secondary disabled\"><span class=\"icon-team-button\"></span></button></li>\r\n        <li class=\"list-inline-item\">\r\n            <!--<button *ngIf=\"!showDialpad\" type=\"button\" class=\"btn btn-secondary btn-sm disabled\"><span class=\"icon-keypad\"></span></button>-->\r\n            <button *ngIf=\"showDialpad\" type=\"button\" title=\"Dialpad\" class=\"btn btn-secondary btn-sm\" (click)=\"open(content,'MakeCall')\"><span class=\"icon-dialpad-button\"></span></button>\r\n\t\t</li>\r\n\t</ul>\r\n\r\n    <ul class=\"list-inline clearfix\" *ngIf=\"call !== null && agentState !== 'WORK_READY'\">\r\n        <li title=\"Answer\" *ngIf=\"call.Actions.CanAnswer\" (click)=\"doCallAction('ANSWER')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Answer\"><span class=\"icon-call-button\"></span></button></li>\r\n        <li title=\"Drop\" *ngIf=\"call.Actions.CanDrop\" (click)=\"doCallAction('DROP')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Drop\"><span class=\"icon-end-call-button\"></span></button></li>\r\n        <li title=\"Hold\" *ngIf=\"call.Actions.CanHold\" (click)=\"doCallAction('HOLD')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Hold\"><span class=\"icon-pause-button\"></span></button></li>\r\n        <li title=\"Retrieve\" *ngIf=\"call.Actions.CanRetrieve\" (click)=\"doCallAction('RETRIEVE')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Retrieve\"><span class=\"icon-play-button\"></span></button></li>\r\n        <!-- <li title=\"Consult\" *ngIf=\"call.Actions.CanConsult\" (click)=\"open(content,'CONSULT')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Consult\"><span class=\"icon-user-call-button\"></span></button></li> -->\r\n        <li title=\"Transfer\" *ngIf=\"call.Actions.CanTransfer\" (click)=\"doCallAction('TRANSFER')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Transfer\"><span class=\"icon-call-transfer\"></span></button></li>\r\n        <!-- <li title=\"TransferSST\" *ngIf=\"call.Actions.CanTransferSST\" (click)=\"open(content,'SST')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"TransferSST\"><span class=\"icon-call-direct-transfer\"></span></button></li> -->\r\n        <li title=\"Conference\" *ngIf=\"call.Actions.CanConference\" (click)=\"doCallAction('CONFERENCE')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Conference\"><span class=\"icon-team-button\"></span></button></li>\r\n        <!-- <li title=\"BargeCall\" *ngIf=\"call.Actions.CanBargeCall\" (click)=\"doCallAction('TRANSFER')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"BargeCall\"><span class=\"icon-call-bargin\"></span></button></li> -->\r\n        <li title=\"ParticipantDrop\" *ngIf=\"call.Actions.CanParticipantDrop\" (click)=\"doCallAction('DROP')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"End Conference\"><span class=\"icon-end-call-button\"></span></button></li>\r\n        <li title=\"Accept\" *ngIf=\"call.Actions.CanAccept\" (click)=\"doCallAction('CONSULT_ACCEPT')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Accept\"><span class=\"icon-call-button-outline\"></span></button></li>\r\n        <!-- <li title=\"Reject\" *ngIf=\"call.Actions.CanReject\" (click)=\"doCallAction('PREVIEWREJECT')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Reject\"><span class=\"icon-end-call-button\"></span></button></li> -->\r\n\t\t<!-- <li title=\"Close\" *ngIf=\"call.Actions.CanClose\" (click)=\"doCallAction('PREVIEWCLOSE')\" class=\"list-inline-item\"><button type=\"button\" class=\"btn btn-sm\" title=\"Close\"><span class=\"icon-end-call-button-outline\"></span></button></li> -->\r\n\t\t\r\n\t</ul>\r\n</div>";

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	module.exports = "/** Acquone theme**/\n/** Acquone theme end**/\n.call-control {\n  padding-top: 6px;\n  text-align: left; }\n  .call-control ul.list-inline {\n    margin-bottom: 0; }\n    .call-control ul.list-inline .list-inline-item:not(:last-child) {\n      margin-right: 6px; }\n    .call-control ul.list-inline .btn {\n      outline: none;\n      padding: 0px;\n      font-size: 20px;\n      border: none;\n      background: none; }\n      .call-control ul.list-inline .btn.disabled {\n        color: #ccc; }\n        .call-control ul.list-inline .btn.disabled .icon-call-button:before, .call-control ul.list-inline .btn.disabled .icon-pause-button:before, .call-control ul.list-inline .btn.disabled .icon-user-call-button:before, .call-control ul.list-inline .btn.disabled .icon-call-transfer:before, .call-control ul.list-inline .btn.disabled .icon-team-button:before {\n          color: #969492 !important; }\n\n.sf-banner .modal-backdrop {\n  margin: 140px 1px 1px;\n  opacity: 0.8 !important;\n  /* width: 200px; */\n  /* height: 373px; */\n  border-radius: 5px;\n  /* background-color: #5d5d5d; */ }\n\n.sf-banner .dialpad-input input {\n  padding: 0 20px;\n  text-align: center; }\n\n.sf-banner .modal {\n  width: 100%;\n  margin-top: 140px; }\n  .sf-banner .modal .modal-dialog {\n    margin: 1px; }\n    .sf-banner .modal .modal-dialog .modal-content {\n      background: transparent;\n      color: #fff;\n      border: 0px; }\n      .sf-banner .modal .modal-dialog .modal-content .dial-pad {\n        text-align: center;\n        padding-top: 0; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display {\n          border: 0;\n          background-color: transparent;\n          color: #fff;\n          font-size: 30px;\n          border: 0;\n          border-bottom: 1px solid #7d7d7d;\n          border-radius: 0;\n          padding: 0 10px; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:focus {\n            border-bottom-color: #757575; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display::-webkit-input-placeholder {\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:-moz-placeholder {\n            /* Firefox 18- */\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display::-moz-placeholder {\n            /* Firefox 19+ */\n            font-size: 16px;\n            text-align: left; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .dial-display:-ms-input-placeholder {\n            font-size: 16px;\n            text-align: left; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .reduce-size {\n          height: 37px;\n          font-size: 15px; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .btn-secondary {\n          background: transparent;\n          border: transparent;\n          color: #fff;\n          margin: 0;\n          width: 100%;\n          padding: 10px;\n          height: 30px;\n          outline: none;\n          margin: 10px 0;\n          line-height: 30px;\n          transition: all 0.3s ease-in-out; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .btn-secondary:hover {\n            font-weight: bold;\n            color: #85d2ff;\n            font-size: 30px; }\n        .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn {\n          padding: 20px 0; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn .btn {\n            padding: 8px;\n            width: 100%;\n            margin: 5px 0;\n            border-radius: 0; }\n            .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn .btn.disabled {\n              color: #ccc; }\n          .sf-banner .modal .modal-dialog .modal-content .dial-pad .call-action-btn > div {\n            padding: 0; }\n"

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(1);
	var http_1 = __webpack_require__(108);
	var HttpAjaxService = (function () {
	    function HttpAjaxService(http) {
	        this.http = http;
	        this.headers = new http_1.Headers();
	        this.headers.append('Accept', 'application/json');
	        this.headers.append('Content-Type', 'application/json');
	    }
	    HttpAjaxService.prototype.post = function (url, request) {
	        var options = new http_1.RequestOptions({ headers: this.headers });
	        return this.http.post(url, request, options).toPromise();
	    };
	    HttpAjaxService.prototype.get = function (url, request) {
	        if (request)
	            url = this.processrequest(url, request);
	        return this.http.get(url).toPromise();
	    };
	    HttpAjaxService.prototype.processrequest = function (url, data) {
	        var request = "?";
	        for (var d in data) {
	            request = request + d + "=" + data[d] + "&";
	        }
	        return url + request;
	    };
	    HttpAjaxService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object])
	    ], HttpAjaxService);
	    return HttpAjaxService;
	    var _a;
	}());
	exports.HttpAjaxService = HttpAjaxService;


/***/ })
]);
//# sourceMappingURL=app.b66710a751274c2c91ab.js.map]]></script>
        <script_name>app</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-02-06 10:09:58</sys_created_on>
        <sys_id>9d2adf88db6323008596d426ca961920</sys_id>
        <sys_mod_count>48</sys_mod_count>
        <sys_name>x_241495_myapplica.app</sys_name>
        <sys_package display_value="MyApplication" source="x_241495_myapplica">f89bfca1db1223008596d426ca961984</sys_package>
        <sys_policy/>
        <sys_scope display_value="MyApplication">f89bfca1db1223008596d426ca961984</sys_scope>
        <sys_update_name>sys_ui_script_9d2adf88db6323008596d426ca961920</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-21 09:11:27</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
